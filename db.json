{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/javascript_test_capture1.png","path":"images/javascript_test_capture1.png","modified":1,"renderable":0},{"_id":"source/images/javascript_test_capture2.png","path":"images/javascript_test_capture2.png","modified":1,"renderable":0},{"_id":"source/images/postman_example1.png","path":"images/postman_example1.png","modified":1,"renderable":0},{"_id":"source/images/postman_example2.png","path":"images/postman_example2.png","modified":1,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_drafts/자바스크립트-패턴과-테스트-정리.md","hash":"15ee6518cccf8e6310fb5756bd5b5cd49549d159","modified":1618041363145},{"_id":"source/_posts/Development.md","hash":"a86a65b3bfb57079148fe21883c87aabc7be6e71","modified":1618222994334},{"_id":"source/_posts/CodeSoom.md","hash":"57ee4e77c047a51c3ae7dc1cfad3abbc4df8c3bc","modified":1618222994334},{"_id":"source/_posts/React.md","hash":"bdc6e200329a80cbc82dcd84c98ea73069d1292b","modified":1619022563598},{"_id":"source/_posts/Eslint.md","hash":"dc1194cfacb0f56a1345ff5fad5a42354ce8189a","modified":1618222994335},{"_id":"source/_posts/Redux.md","hash":"f6275838da0dcde0276be6986d60c59401405d55","modified":1618222994335},{"_id":"source/_posts/Javascript.md","hash":"5ef64ab48572d2443e3ab51476bfffc1503f762f","modified":1618233454346},{"_id":"source/_posts/ReduxThunk.md","hash":"a121aa1f27002b9eeb0781bd31069c01150bee16","modified":1618222994335},{"_id":"source/_posts/Javascript-Testing-Introduction-Tutorial.md","hash":"2dc8bf145c59a67c34e7570799e36724b1025cf7","modified":1618041363145},{"_id":"source/_posts/Hexo-blog-start.md","hash":"019b73e2376cae064242bda001694c6d37394c03","modified":1618041363145},{"_id":"source/_posts/RxJS-정리1.md","hash":"551a4aa0b857cf630b42b9d06f5495e4fca48e62","modified":1618041363145},{"_id":"source/_posts/Router.md","hash":"9c23a46d78166a9ebfa2b9afdf8a3c392eeeea9a","modified":1618222994335},{"_id":"source/_posts/Smart-Work-2019-05-08.md","hash":"f445a14a58748a1db87c7c1fa383a7a297438b25","modified":1618041363146},{"_id":"source/_posts/TIL-2018-10-16.md","hash":"dee091e1eff3e93175b4c26d762e732da3a6cee2","modified":1618041363146},{"_id":"source/_posts/RxJS-정리3.md","hash":"3a0e487b5bd2b6c7296a60a264ee9dcc88b5061e","modified":1618041363145},{"_id":"source/_posts/RxJS-정리2.md","hash":"4142efcff40477b765a668bbb8c31a4da4c4ff0a","modified":1618041363145},{"_id":"source/_posts/TIL-2018-10-17.md","hash":"674af509a3c82f69abe9dcb808c05ad5847ae65c","modified":1618041363146},{"_id":"source/_posts/TIL-2018-10-30.md","hash":"ded05566b70ced639c081c4b6162b6e8946d5f54","modified":1618041363146},{"_id":"source/_posts/TIL-2018-10-29.md","hash":"17c1abe241e74e0adaa2607f3d97f679661e28c1","modified":1618041363146},{"_id":"source/_posts/TIL-2018-10-22.md","hash":"545e1413837bb383a92ce5606d321d004034a387","modified":1618041363146},{"_id":"source/_posts/TIL-2018-11-02.md","hash":"38f58af42a16ceaba8cced8cf8dd57dccc6883df","modified":1618041363146},{"_id":"source/_posts/TIL-2018-11-05.md","hash":"05b7493ad173db8b61854f010db1af92726144df","modified":1618041363146},{"_id":"source/_posts/TIL-2018-10-23.md","hash":"b7b4ba121a306d22c86ebfcc454714bbeceb0f30","modified":1618041363146},{"_id":"source/_posts/TIL-2018-11-13.md","hash":"a53e072526319b1bca30310e26f8be90b458d912","modified":1618041363146},{"_id":"source/_posts/TIL-2018-11-22.md","hash":"b275ba658e9b1f5c328737777b051c96d1e25659","modified":1618041363147},{"_id":"source/_posts/TIL-2018-11-09.md","hash":"c9c35179f90951b4892f2f6ce520a1994a8dcb3d","modified":1618041363146},{"_id":"source/_posts/TIL-2018-11-26.md","hash":"0a794c66ca8504643446e74eb0ccdd41d0acb00f","modified":1618041363147},{"_id":"source/_posts/TIL-2018-11-21.md","hash":"d6ed3c8d1abab8b57e1b262c028d39c1abc4c3be","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-15.md","hash":"60e930c33dfbdced0621419c9130f2da1f1354dd","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-14.md","hash":"8fce8feb1a77db610ff33c87b91ccd4612e97d96","modified":1618041363147},{"_id":"source/_posts/TIL-2019-02-22.md","hash":"ac50bce54a69899e472a1d25d19d72b247c862f6","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-22.md","hash":"e8068266fc6c30745fcc925fb254981d23924811","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-26.md","hash":"f473a06c0eeb851e9df335de92e7803d87d7425e","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-27.md","hash":"5cc750217225e38d6d90eff8d40cc3862ea78f51","modified":1618041363147},{"_id":"source/_posts/TIL-2019-04-01.md","hash":"842676caa25e112c662e1133d63fc52dab3e780a","modified":1618041363147},{"_id":"source/_posts/TIL-2019-03-25.md","hash":"dc222e7c8c37dc832f033317d4f00aa3b6c7bc77","modified":1618041363147},{"_id":"source/_posts/TIL-2019-04-03.md","hash":"350028f37d96611c056df34f3edf352643fb65ec","modified":1618041363147},{"_id":"source/_posts/TIL-2019-04-02.md","hash":"fe1ec73202f9330c8f098f7eb4bc1a89156142f1","modified":1618041363147},{"_id":"source/_posts/TIL-2019-04-05.md","hash":"640f33ef5560db3ccd21177e7bea50d181367efc","modified":1618041363147},{"_id":"source/_posts/TIL-2019-04-18.md","hash":"97963cf3c4090a35d832d13c42c1c3c4508eae44","modified":1618041363148},{"_id":"source/_posts/TIL-2019-04-22.md","hash":"b0a8eb8c5f7f69bc11e7072a20b32a3f55b0d8ab","modified":1618041363148},{"_id":"source/_posts/TIL-2019-04-16.md","hash":"fffce3d6c6f233b2007d90cc4c99d411b491495d","modified":1618041363148},{"_id":"source/_posts/TIL-2019-04-24.md","hash":"519ac8a7b331080aebfd560196bc3b0388f72d20","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-03.md","hash":"998fa4d3145bfdd704735996769415691d2b9653","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-08.md","hash":"caa76de0dc9083016535f9fffce034ba800b7d8f","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-07.md","hash":"0957efaf034cc0c07e84bcac4d75949e42c9912c","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-10.md","hash":"d24c92edf8f0be65ce190a8bfd4b36d07309310e","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-09.md","hash":"e6003c7439fd10f19f007b243791555409940fdf","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-20.md","hash":"901d9d231d188f5d546d8dcbb365eb8dc27c97a8","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-17.md","hash":"aea8da2142173103be03383be6942dd2908b7d0d","modified":1618041363148},{"_id":"source/_posts/TIL-2019-05-24.md","hash":"0bd32ebb343d8a6fd2864fd1c20dad61035aad64","modified":1618041363149},{"_id":"source/_posts/TIL-2019-05-14.md","hash":"31895314a6e0099beeb60cd68e8046c4320021ad","modified":1618041363148},{"_id":"source/_posts/TIL-2019-04-23.md","hash":"3a6917f02e633c1198e7d3af86d68491457d6f49","modified":1618041363148},{"_id":"source/_posts/TIL-2019-06-03.md","hash":"a7f2f2f7992db986500f87c41b2379dbca1653e4","modified":1618041363149},{"_id":"source/_posts/TIL-2019-05-22.md","hash":"11feb9d1d363aa3c2d08d0476989da4f96bea21c","modified":1618041363148},{"_id":"source/_posts/TIL-2019-06-05.md","hash":"c38fa7e61392b725aa8f0aa897f23fb9135f0827","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-12.md","hash":"002a722aac292dcda7090968b48ff1c635fbdbf4","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-14.md","hash":"92aa35b6a804462860a44d9aae3468fba8338c9d","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-11.md","hash":"fdc1efd65fdce808ae06ded9b183ae141fa26024","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-19.md","hash":"d9fc772ba0a1fde090f8275b35d79cacfd0e61c8","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-10.md","hash":"f3f2ac67c1ce3e78f1d2b2abd0748ceaad40fd18","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-26.md","hash":"9e1cfc6a6ef55169908c5a5c81ace02c19c1a4aa","modified":1618041363149},{"_id":"source/_posts/TIL-2019-07-02.md","hash":"91a30c5799cff3d4fa8029d7e6b0893a3b591558","modified":1618041363149},{"_id":"source/_posts/TIL-2019-07-04.md","hash":"419472f4ce3052466dc39d53eeab94183d4daaea","modified":1618041363149},{"_id":"source/_posts/TIL-2019-06-25.md","hash":"1b5011e4426e165db11dd0fc004a3fe990321793","modified":1618041363149},{"_id":"source/_posts/TIL-2019-07-25.md","hash":"19036cadeb6b50231ae8ffc9b104aac34a6d8f87","modified":1618041363149},{"_id":"source/_posts/Typescript-Quick-Start.md","hash":"29a79faa37e2dd8f30f312ec3c21d337d34ab989","modified":1618041363149},{"_id":"source/_posts/Typescript.md","hash":"62c9d8ed9524906637d51afa24372e560e6f8f11","modified":1618222994335},{"_id":"source/_posts/Test.md","hash":"65fb4c3bc93f28ac243649c26697b833b3bc798c","modified":1618464381285},{"_id":"source/_posts/Week2-1.md","hash":"382aef9d72004471b85b752517622f20311c8a42","modified":1618222994335},{"_id":"source/_posts/TIL-2021-04-14.md","hash":"c1ed81269a82b74d6136485d5897aa07ef68e87e","modified":1618376175249},{"_id":"source/_posts/daily-report.md","hash":"41824d6fee8ab831ba5ff1f36ee4eb00cdb0c204","modified":1619022282467},{"_id":"source/_posts/Webpack.md","hash":"56081334e95e8c6cc16eb803dbedf754d709868b","modified":1619021934779},{"_id":"source/_posts/Week2-2.md","hash":"a0e9db2dee148f46058bdaa7fe4678f6503f0a26","modified":1618222994335},{"_id":"source/_posts/Week3-1.md","hash":"46d55d71fbf924736696362b03093600be860d92","modified":1618222994335},{"_id":"source/_posts/jest-setup-and-teardown-2019-05-07.md","hash":"b564d13b3c883fcf5befc6d0eed8f8395ae560dc","modified":1618041363149},{"_id":"source/_posts/jest-mock-function-2019-05-10.md","hash":"9ba8b3cc98bc9d962795601c690e24682efc5058","modified":1618041363149},{"_id":"source/_posts/jest-testing-asynchronous-code.md","hash":"ed016f725cab221d44e9a878cbe48780cc3d0e7a","modified":1618041363149},{"_id":"source/_posts/jest-using-matchers.md","hash":"2fed20ee827502e183ddcec309cfaab1bb04cdbc","modified":1618041363150},{"_id":"source/_posts/style-css.md","hash":"0bb9094ba9faabbddc5a00b6da81994c405696f5","modified":1619022076226},{"_id":"source/_posts/jest-getting-started.md","hash":"5637e6ee6eea42fe0b3dc60ad79243959b9179f8","modified":1618041363149},{"_id":"source/_posts/useMemo.md","hash":"060686e6453c082f1ab921ef9a9cc06164e22808","modified":1619022499783},{"_id":"source/_posts/naver-tech-concert-2019-04-12.md","hash":"190e9b8183e9783b909c5587e3cac53a00dba03f","modified":1618041363150},{"_id":"source/_posts/useEffect.md","hash":"cc47b3e5c17b59a9680e1e386734e62ed49f5a1c","modified":1618041363150},{"_id":"source/_posts/useCallback.md","hash":"e1da9325ce8a309a772771aba4db3ae85c9c2148","modified":1618222994335},{"_id":"source/_posts/useRef.md","hash":"c415d05e26254d6fd8117982d7ca059142ad78b9","modified":1619022496120},{"_id":"source/_posts/useState.md","hash":"58e8c75f7eed6bf36cd7894bd05635df3e3958fb","modified":1619021858640},{"_id":"source/_posts/wiki.md","hash":"0800d35fcfa425b5f269f1bff9919ca908cc2e31","modified":1618237463987},{"_id":"source/about/index.md","hash":"a6e3e1bea3debba2605a2c562b395d86cd2273c9","modified":1618233176084},{"_id":"source/images/postman_example1.png","hash":"df873c49457a7ca678e475ced97e30abe12999e6","modified":1618041363152},{"_id":"source/images/javascript_test_capture1.png","hash":"c36c10d571abb89f0d038f89ac5cc482e7f410f9","modified":1618041363150},{"_id":"source/images/postman_example2.png","hash":"b3b5420a3dec109bab7d65be50621fb40ac9b7ea","modified":1618041363152},{"_id":"source/images/javascript_test_capture2.png","hash":"467ed7528a602b5d96569a6612ab1a0d3df5be17","modified":1618041363151},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1618235390515},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1618235390515},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1618235390515},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1618235390515},{"_id":"themes/cactus/README.md","hash":"fb9d93da3cbf7ce6a10d57ac47a3aaafb2d9810e","modified":1618235390516},{"_id":"themes/cactus/_config.yml","hash":"2483b4106501b46cf9d253f51ed031aa2c3b6087","modified":1618236876013},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1618235390516},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1618235390521},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1618235390516},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1618235390516},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1618235390516},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1618235390516},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1618235390516},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1618235390516},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1618235390517},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1618235390517},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1618235390517},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1618235390517},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1618235390517},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1618235390517},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1618235390517},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1618235390517},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1618235390518},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1618235390518},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1618235390517},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1618235390520},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1618235390520},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1618235390521},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1618235390521},{"_id":"themes/cactus/layout/index.ejs","hash":"054397351b38f2ae11f15b17baa1a6753ab1ea9d","modified":1618235390520},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1618235390521},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1618235390521},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1618235390521},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1618235390521},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1618235390521},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1618235390518},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1618235390518},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1618235390518},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab9648ad591d87d5a4a3482d909cef56c486fc4e","modified":1618235390518},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1618235390519},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1618235390520},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"3f7bb42d40e96c5737ad85e85bb9e6c82dca51ea","modified":1618235390520},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1618235390522},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1618235390520},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1618235390522},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1618235390530},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1618235390531},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1618235390531},{"_id":"themes/cactus/source/css/style.styl","hash":"a274f3a706d23506303f7426fe555478232d60f2","modified":1618235390531},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1618235390531},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1618235390531},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1618235390532},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1618235390532},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"b8016c193def987d4c7956486fc494d74fc14d70","modified":1618235390519},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1618235390519},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1618235390519},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1618235390519},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1618235390519},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1618235390533},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1618235390519},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1618235390533},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1618235390520},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1618235390520},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1618235390521},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9e1a129149c9d747d5d5fdfcc8837771ce940338","modified":1618235390522},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1618235390522},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1618235390522},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1618235390522},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1618235390522},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1618235390522},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1618235390522},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1618235390523},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1618235390524},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1618235390525},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1618235390526},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1618235390527},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1618235390528},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1618235390529},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1618235390529},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1618235390530},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1618235390531},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1618235390531},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1618235390531},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1618235390534},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1618235390557},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1618235390557},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1618235390558},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1618235390558},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1618235390559},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1618235390559},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1618235390560},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1618235390560},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1618235390561},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1618235390561},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1618235390563},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1618235390562},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1618235390562},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"ae3d9090bf4d934d443c0a431cb09d009743155a","modified":1618235390530},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1618235390534},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1618235390531},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1618235390539},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1618235390540},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1618235390540},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1618235390540},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1618235390546},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1618235390546},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1618235390546},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1618235390557},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1618235390556},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1618235390557},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1618235390558},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1618235390559},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1618235390559},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1618235390560},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1618235390560},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1618235390561},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1618235390561},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1618235390562},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1618235390562},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1618235390539},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1618235390539},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1618235390545},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1618235390545},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1618235390535},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1618235390539},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1618235390540},{"_id":"themes/cactus/package-lock.json","hash":"0f2145ac55d1759e978daa170fbbc2a993c71663","modified":1618236919477},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1618235390533},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1618235390541},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1618235390545},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1618235390551},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1618235390554},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1618235390555},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1618235390552},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1618235390554},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1618235390555},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1618235390553},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1618235390555},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1618235390550},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1618235390554},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1618235390555},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1618235390553},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1618235390538},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1618235390544},{"_id":"public/about/index.html","hash":"6b9b72f93ae7f1216fbdee2ae7e7501ed6cfcc4b","modified":1619022569145},{"_id":"public/useMemo/index.html","hash":"df52c78e0b19cbf2897301613758a63d71d208c5","modified":1619022569145},{"_id":"public/useRef/index.html","hash":"3665da3c09f29d5c187603bcfc46e66a15cf9dd3","modified":1619022569145},{"_id":"public/wiki/index.html","hash":"aff707f9a799859f079326c9e6b0059b410ae7f1","modified":1619022569145},{"_id":"public/ReduxThunk/index.html","hash":"88e7e8d0ccb18e5f82f2df3d6a1bafbf7bd069bd","modified":1619022569145},{"_id":"public/Router/index.html","hash":"e6f8df7e803b00b67ff0dcfc9b7b184ffbe66140","modified":1619022569145},{"_id":"public/Redux/index.html","hash":"0045ac011b3a7a50111fbad1c8846499743f7cc5","modified":1619022569145},{"_id":"public/Webpack/index.html","hash":"02dc141bcbf8dfa45c385f6b38227d074a31f4e6","modified":1619022569145},{"_id":"public/Week2-2/index.html","hash":"be46ebc684968d55ddb50e02a71ab40d38c488c7","modified":1619022569145},{"_id":"public/CodeSoom/index.html","hash":"4add7b91cdc61ac96bfc0f0568be2a0e4ab888cd","modified":1619022569145},{"_id":"public/Eslint/index.html","hash":"10658621a85ddf56b3397f08b40fc6a587a4b7eb","modified":1619022569145},{"_id":"public/useEffect/index.html","hash":"e7fd884fc565caba007561dee513b3b67aee74ff","modified":1619022569145},{"_id":"public/jest-mock-function/index.html","hash":"806dff391daf7277177a63644b708735fbd2f49e","modified":1619022569145},{"_id":"public/archives/page/2/index.html","hash":"5f5b74e137659df5780fae7ff0bb22ec5e7ea554","modified":1619022569145},{"_id":"public/archives/page/3/index.html","hash":"5873837fd1ccb9a389469d4a6ac073839199f16a","modified":1619022569145},{"_id":"public/archives/index.html","hash":"ac754bb7007505981625c929acf042d59d8c33ce","modified":1619022569145},{"_id":"public/archives/page/4/index.html","hash":"697b7c6a6c18e96503ff217c7257471ee575d959","modified":1619022569145},{"_id":"public/archives/page/5/index.html","hash":"87dbc36806434e27678cde1ced0f532d64ceea76","modified":1619022569145},{"_id":"public/archives/page/6/index.html","hash":"54fb731ee7a6196f70683138949d8a7eff180b8a","modified":1619022569145},{"_id":"public/archives/page/8/index.html","hash":"daf1c72f32d389b1f076b2f7ed90f081de6f8b90","modified":1619022569145},{"_id":"public/archives/page/9/index.html","hash":"c883b452d425f0f554fca4645f57b17fe8e17637","modified":1619022569145},{"_id":"public/archives/page/7/index.html","hash":"1bd51b88f0393b8aac287f3a54c1bd2eab1ab020","modified":1619022569145},{"_id":"public/archives/page/10/index.html","hash":"34478767e3a99a23f9f4d504ef3abeab4b5ae840","modified":1619022569145},{"_id":"public/archives/page/11/index.html","hash":"2d2abdd87b22eca276e9f32929388ebb0058ab79","modified":1619022569145},{"_id":"public/archives/page/12/index.html","hash":"5eeacaa21080356e4bec60a4126b332a3e304058","modified":1619022569145},{"_id":"public/archives/page/14/index.html","hash":"29fbb810a97278849c27f396183a0569447e2ea7","modified":1619022569145},{"_id":"public/archives/page/15/index.html","hash":"cfd22cd4037f686525e07d0b3842b1bbae748c2a","modified":1619022569145},{"_id":"public/archives/page/16/index.html","hash":"092969c69840edac1746ad46f450a6fbe3fec7ca","modified":1619022569145},{"_id":"public/archives/page/13/index.html","hash":"52b0346d91a77b489a14582411e7b059894a89f1","modified":1619022569145},{"_id":"public/archives/page/17/index.html","hash":"c33b7b18ecaf31991f719b7a6f7b8e2342d1c526","modified":1619022569145},{"_id":"public/archives/page/18/index.html","hash":"3139c271c5e188ff3ece733bd380dea9a628145b","modified":1619022569145},{"_id":"public/archives/2018/index.html","hash":"961c72b7daed0ef1180eead4a8c9a8b11806f6f2","modified":1619022569145},{"_id":"public/archives/2018/page/4/index.html","hash":"50beb86d2c2f228740f13f2e747a4845035d506b","modified":1619022569145},{"_id":"public/archives/2018/page/3/index.html","hash":"4fd8ebf8fb066956b30f9f1566ce7c55c094cddc","modified":1619022569145},{"_id":"public/archives/2018/page/2/index.html","hash":"223879a09f86dd773653bc04b0d3c2d58f3fe3e8","modified":1619022569145},{"_id":"public/archives/2018/10/index.html","hash":"399466c9755b6b5c49275e5e9fbd4a6266092b40","modified":1619022569145},{"_id":"public/archives/2018/10/page/2/index.html","hash":"539ca6ed9c1c4144bccd6426a8fc9e48a803b4b9","modified":1619022569145},{"_id":"public/archives/2018/11/index.html","hash":"c2b3573f6adffb837636abadebae56b44ed72205","modified":1619022569145},{"_id":"public/archives/2018/11/page/2/index.html","hash":"f2ce84435691a0d0ae024a8c86aef51e7c38dd79","modified":1619022569145},{"_id":"public/archives/2019/index.html","hash":"810ff41613aa011cb1970546a561f85ecddb361c","modified":1619022569145},{"_id":"public/archives/2019/page/2/index.html","hash":"6306a13d9870b3ff8824042c5a2dd417f55ebe53","modified":1619022569145},{"_id":"public/archives/2019/page/4/index.html","hash":"5c6da5ff9ade803e26cc24aa3f2d7e8294841c1d","modified":1619022569145},{"_id":"public/archives/2019/page/5/index.html","hash":"f811456b6ce0ce6f08bd49b30c84d6146ba96562","modified":1619022569145},{"_id":"public/archives/2019/page/6/index.html","hash":"36755575aa65b34260a2fadd80fde474d50ba0ca","modified":1619022569145},{"_id":"public/archives/2019/page/7/index.html","hash":"f82326bf22b090d95260f5689808e9c63e6edca6","modified":1619022569145},{"_id":"public/archives/2019/page/3/index.html","hash":"970cab04d560726971aef92a5729ee7bd4a1aad1","modified":1619022569145},{"_id":"public/archives/2019/page/8/index.html","hash":"51a572e8432948d7a475f9324c3655af2bf148b2","modified":1619022569145},{"_id":"public/archives/2019/page/9/index.html","hash":"db410f23d93e961f1897325005892794ba61cd21","modified":1619022569145},{"_id":"public/archives/2019/02/index.html","hash":"d8d96daacb489d5cb99a9c679566805a31ab95d7","modified":1619022569145},{"_id":"public/archives/2019/page/10/index.html","hash":"a02e08a74f33a0b25629d8e1a3147b2f1035448c","modified":1619022569145},{"_id":"public/archives/2019/03/page/2/index.html","hash":"485c5fd29160d8ba1768b638c361a6abd94ab55b","modified":1619022569145},{"_id":"public/archives/2019/04/index.html","hash":"2f40907653c6a5dfe0eaaae5aa797ecadbdf7c23","modified":1619022569145},{"_id":"public/archives/2019/03/index.html","hash":"77184b4d613909f3a887b839309f9b6b9d2d84ee","modified":1619022569145},{"_id":"public/archives/2019/04/page/2/index.html","hash":"e5ed1d9f57a8662bf46d4244e75a4beb74e0f36f","modified":1619022569145},{"_id":"public/archives/2019/04/page/3/index.html","hash":"f869e0742bee3c7f9ab8498e7d50b2fb82b15caa","modified":1619022569145},{"_id":"public/archives/2019/05/index.html","hash":"7377ca465b4761fd849854633f6e45066a2404a1","modified":1619022569145},{"_id":"public/archives/2019/05/page/2/index.html","hash":"7521daec5a197db2ffcf866fb337b41cfc63c2fc","modified":1619022569145},{"_id":"public/archives/2019/05/page/3/index.html","hash":"8b65a1209a633bd8d0fe370ad1fea17131b44c7b","modified":1619022569145},{"_id":"public/archives/2019/06/index.html","hash":"845a20a041ecc5ee36bba512a2460d546aebdb6f","modified":1619022569145},{"_id":"public/archives/2019/06/page/2/index.html","hash":"262637617d23814405159bd33b3a292fc277da7a","modified":1619022569145},{"_id":"public/archives/2021/index.html","hash":"ce9fb6465a61874236f229338abf4ac5b3186262","modified":1619022569145},{"_id":"public/archives/2019/07/index.html","hash":"ed9884117d45d3f89dd0cf58fda0e88f2fb350bd","modified":1619022569145},{"_id":"public/archives/2021/page/2/index.html","hash":"19bb5dc78a18cae5b44a4950a93f9b89f6d4bdd0","modified":1619022569145},{"_id":"public/archives/2021/page/3/index.html","hash":"74fd3839ccbe5202c06cf32f524262c1e8377637","modified":1619022569145},{"_id":"public/archives/2021/page/4/index.html","hash":"037d29359a510b02c83a2b3e0feae4c33538c2eb","modified":1619022569145},{"_id":"public/archives/2021/page/5/index.html","hash":"ae45d870a90ec21655198864c3a011471c1cd01c","modified":1619022569145},{"_id":"public/archives/2021/04/index.html","hash":"7768970f9aa388e4e96caed8efef17246beb2d5e","modified":1619022569145},{"_id":"public/archives/2021/04/page/2/index.html","hash":"3273851d17356353a8961b62b8078fd7fb64b7e9","modified":1619022569145},{"_id":"public/archives/2021/04/page/3/index.html","hash":"a0b26fbf9c29b7ba6cb30d2e75bcc768fafe48c1","modified":1619022569145},{"_id":"public/archives/2021/04/page/4/index.html","hash":"669de26c1072b959b7d1d0c7370358702ef952c4","modified":1619022569145},{"_id":"public/categories/RxJS/index.html","hash":"141aa759687b8df4dd51609cf293d28551b1c8e5","modified":1619022569145},{"_id":"public/categories/강의-정리/index.html","hash":"0a8990bafd8c933a28b5931e79bfb904ef6eb4a2","modified":1619022569145},{"_id":"public/archives/2021/04/page/5/index.html","hash":"fb8dd4bc7b0cb981cb704f39ad1670b996be5f4a","modified":1619022569145},{"_id":"public/categories/til/index.html","hash":"6d8d7071e24c023f45a609af9555ca02bd5cfebb","modified":1619022569145},{"_id":"public/categories/til/page/2/index.html","hash":"28d41ae1829b4980009330ed7a7a3050bf7c25f6","modified":1619022569145},{"_id":"public/categories/강의-정리/Smart-Work/index.html","hash":"8c03c8293a67a65a3d92bb7d421245a2196ad0ba","modified":1619022569145},{"_id":"public/categories/TIL/index.html","hash":"4f19e40cb6054557b5d6f2e2b2a42a83f1bfa3f4","modified":1619022569145},{"_id":"public/categories/til/page/3/index.html","hash":"6d188417337e503440720100dfa648848dc90019","modified":1619022569145},{"_id":"public/categories/TIL/page/2/index.html","hash":"73b7f9d059e2938f50eb7aa9dfdd507419e602f2","modified":1619022569145},{"_id":"public/categories/TIL/page/3/index.html","hash":"53fbe2beef6b0dc0e9b372d0eab71e105602969f","modified":1619022569145},{"_id":"public/categories/TIL/page/4/index.html","hash":"20a9c2323263d606260b21944b6f045c5ce42a3f","modified":1619022569145},{"_id":"public/categories/TIL/page/5/index.html","hash":"d6165e30bf9149bcfd893af8ec757b7aaac0d4b2","modified":1619022569145},{"_id":"public/categories/TIL/page/6/index.html","hash":"fe62b69b68d3c60b72740834e93f8d56b5ded1c7","modified":1619022569145},{"_id":"public/categories/TIL/page/7/index.html","hash":"525f0a62ac39bc7e827d7e58d8d150f3cbf40af9","modified":1619022569145},{"_id":"public/categories/책-정리/index.html","hash":"9ef06e2b1deb32bca05d224fb643962e097aabea","modified":1619022569145},{"_id":"public/categories/daily-report/index.html","hash":"13fc583c512c07c53665f1ad0a13c6f07bf89a4f","modified":1619022569145},{"_id":"public/categories/Jest/index.html","hash":"304be64b4f28cf484eed1c21b868466b7a516425","modified":1619022569145},{"_id":"public/categories/책-정리/Typescript/index.html","hash":"7df91dedd6ece9400316f432f0c9af5e8a78fd60","modified":1619022569145},{"_id":"public/categories/Jest/공식-문서/index.html","hash":"c332ca9cde4efb3f3381bd7cb8aca9eedfde12cb","modified":1619022569145},{"_id":"public/tags/javascript/index.html","hash":"328fd375af1bea0a41a037de16f4e5964998fc41","modified":1619022569145},{"_id":"public/tags/til/index.html","hash":"5ad12da6328e9fc82d777a761a2d5672e83d3d92","modified":1619022569145},{"_id":"public/tags/til/page/2/index.html","hash":"8b9b7f71b080e9f8cfa647225973ad1073d36dd1","modified":1619022569145},{"_id":"public/tags/til/page/3/index.html","hash":"c5109a1326999da18b6607bdec16c9978d02f0c7","modified":1619022569145},{"_id":"public/tags/hexo/index.html","hash":"e53ee40b6bbeb0761acc4eaa40dc8913130e0bfc","modified":1619022569145},{"_id":"public/tags/RxJ/index.html","hash":"19266997288929ae0b4cbda4108550cd0693547f","modified":1619022569145},{"_id":"public/tags/RxJS/index.html","hash":"e69c28d2e0fe4d5557bcdb7f2cfd94410f5f31d1","modified":1619022569145},{"_id":"public/tags/Smart-Work/index.html","hash":"c5ac07936ae1acfd57a803dae7afb2979664f0ae","modified":1619022569145},{"_id":"public/tags/스마트워크/index.html","hash":"d3800499811f99f17e07606502399311adc18e32","modified":1619022569145},{"_id":"public/tags/test/index.html","hash":"b045c0c84aa0e8a2106f6a76c6f429dfb9eb73bd","modified":1619022569145},{"_id":"public/tags/일하는-방식을-혁신한-기업들의-비밀/index.html","hash":"2dbecb0ef924903c0c0ed0e04e2550a9a93d2621","modified":1619022569145},{"_id":"public/tags/markdown/index.html","hash":"f480684991606ab336bf267961400c8da06f3b60","modified":1619022569145},{"_id":"public/tags/git/index.html","hash":"07dfd9cbe6eda4563bffa9a9e458b651c15bfef0","modified":1619022569145},{"_id":"public/tags/git-flow/index.html","hash":"3065b237d587107c6b4f2f0b68deebb0ee8b44ba","modified":1619022569145},{"_id":"public/tags/vue/index.html","hash":"f4d06aabf27dea35e665de21870485c973651ca9","modified":1619022569145},{"_id":"public/tags/vue-style-binding/index.html","hash":"a546932503fbad741e9d0ac1b817bf4021dc64e0","modified":1619022569145},{"_id":"public/tags/git-stash/index.html","hash":"851efd00f6749d3ec150fee3b066b2d8138a4ed5","modified":1619022569145},{"_id":"public/tags/CR/index.html","hash":"07e57f58b9163d9c892e7215600179f726f4ee3e","modified":1619022569145},{"_id":"public/tags/LF/index.html","hash":"c96c03a63faae1c93cca4edb6eb6e2b7b5944562","modified":1619022569145},{"_id":"public/tags/CRLF/index.html","hash":"873472cbea67aae2203d343802f588f14a8510e1","modified":1619022569145},{"_id":"public/tags/브라우저/index.html","hash":"d1628a5237a85294456b60bed32a2112ce72283d","modified":1619022569145},{"_id":"public/tags/HTTP/index.html","hash":"3aab239554da075ea6cf2051c2d18d50cd297713","modified":1619022569145},{"_id":"public/tags/HTTP-2/index.html","hash":"d6e93242d8ec4e08bfe8a58e938fb22bee67b4a8","modified":1619022569145},{"_id":"public/tags/stash/index.html","hash":"073fc0f2a1fd1865f5859e00016c78ac3994a6ed","modified":1619022569145},{"_id":"public/tags/reset/index.html","hash":"ba8eb323c1a447902f43b9f981527b698198fa4e","modified":1619022569145},{"_id":"public/tags/GatsbyJS/index.html","hash":"bcfd4dbe9ac930b5740bd64ccd27a7178226d955","modified":1619022569145},{"_id":"public/tags/TDD/index.html","hash":"e2cf674ebedc543cffbe130b3d57aab654b14a56","modified":1619022569145},{"_id":"public/tags/Typescript/index.html","hash":"f06cb6364a1dd9c6b411ff2aea84e4161f939c36","modified":1619022569145},{"_id":"public/tags/cache/index.html","hash":"aad91bb85fd0d3fdfee8646914b98c3c6ef1b5b7","modified":1619022569145},{"_id":"public/tags/정규표현식/index.html","hash":"ec68ae34afd47961f7ded205e1da636ed2bc4fea","modified":1619022569145},{"_id":"public/tags/회고/index.html","hash":"34e700addb2692bf66bfefcbabb25bb1ee781538","modified":1619022569145},{"_id":"public/tags/Javascript/index.html","hash":"6d97a69f21a196816dba8273ca55e18868baa46a","modified":1619022569145},{"_id":"public/tags/TIL/index.html","hash":"db4f3fed76087fb5ca90792b390915c700254cc9","modified":1619022569145},{"_id":"public/tags/for-in/index.html","hash":"b285d22e72b0a27929d24d64a94c12817030f505","modified":1619022569145},{"_id":"public/tags/for-of/index.html","hash":"9a740f687586334ea2395ba673c40dd8b6473714","modified":1619022569145},{"_id":"public/tags/docker/index.html","hash":"22447526264d8b833200efabc2e26c2a285d73ff","modified":1619022569145},{"_id":"public/tags/Jest/index.html","hash":"0ba9799b9121414f989c5737fa48465ca3e18362","modified":1619022569145},{"_id":"public/tags/Mock-Function/index.html","hash":"d3ad70f82d88edeb355282abf28cf6cc62bc9ce8","modified":1619022569145},{"_id":"public/tags/Jest-번역/index.html","hash":"6c67c0e4750c16364301c43e310cf2f5c9a5af06","modified":1619022569145},{"_id":"public/tags/VIM/index.html","hash":"c8fd1f8bc12b3a0b79e0e0db7528b288fde5a764","modified":1619022569145},{"_id":"public/tags/Unit-Test/index.html","hash":"c595fff1570b9ec92820febfef587cd8211b0a3f","modified":1619022569145},{"_id":"public/tags/설정-및-해제/index.html","hash":"0f6ce4abc487e71d0c3bb6f48aaa5855af6de0dd","modified":1619022569145},{"_id":"public/tags/Setup-and-Teardown/index.html","hash":"f489366143ab1fefbc140133cd11eda3afc70a4e","modified":1619022569145},{"_id":"public/tags/비동기-테스트/index.html","hash":"6fdff9b8367962bda4aef7ddfe93f7b00c1abba9","modified":1619022569145},{"_id":"public/tags/Getting-Started/index.html","hash":"cac5711a2d8172c4c1f433eae5bf363203361b59","modified":1619022569145},{"_id":"public/tags/FE-2019/index.html","hash":"8468c2b11b37e4c8168b790e2e1dc9af98002788","modified":1619022569145},{"_id":"public/tags/Test-Asynchronous-Code/index.html","hash":"949cb44d3fdd6c3d3171c707c74605c0fc6aa174","modified":1619022569145},{"_id":"public/tags/frontend/index.html","hash":"758e4473133c81a9c533ff0dce72b5a0f3581570","modified":1619022569145},{"_id":"public/tags/네이버-테크-콘서트/index.html","hash":"e367dec32452f75e900d1c05928e181de584ae53","modified":1619022569145},{"_id":"public/tags/Using-Matchers/index.html","hash":"c1a25901b2b46abcc493fcba354ab29cf61b133a","modified":1619022569145},{"_id":"public/index.html","hash":"abfb34f042e18d8d3f4bea32984a65ef9699c9ab","modified":1619022569145},{"_id":"public/page/3/index.html","hash":"4b7ae2b54b383c4b06ed0f9995e6f539851a2e15","modified":1619022569145},{"_id":"public/page/2/index.html","hash":"7c68be036e31f60801f38fa34fe587e5d10d8d3f","modified":1619022569145},{"_id":"public/page/4/index.html","hash":"21f02455fdd5e12bc2348656c6bd201eacbdb6f3","modified":1619022569145},{"_id":"public/page/5/index.html","hash":"d026b6af16ac0f3fe92b2d04d836793707109d26","modified":1619022569145},{"_id":"public/page/6/index.html","hash":"20516382662ee7c756a60fcca6a2b4e69900f170","modified":1619022569145},{"_id":"public/page/7/index.html","hash":"c0857d03dc99ffeb435af3bb2d18064f9cc13cfe","modified":1619022569145},{"_id":"public/page/8/index.html","hash":"e5fd127c009e6c5f01bd1d6317502ab5b1b5d80e","modified":1619022569145},{"_id":"public/page/9/index.html","hash":"b4429c3a846862989182a2cd002db401b32d4ea9","modified":1619022569145},{"_id":"public/TIL/index.html","hash":"3819f2fa1174053e4ee9b9d6d06b7f99d52e94d2","modified":1619022569145},{"_id":"public/daily-report/index.html","hash":"7a3aff5f10b34f1f3823175bcdeba1b63f918bb9","modified":1619022569145},{"_id":"public/Javascript/index.html","hash":"64f341b21eb264ebd6e49b529e08356b9a8474fd","modified":1619022569145},{"_id":"public/React/index.html","hash":"c949f65e31f21100b0502832fc82483a362a2d74","modified":1619022569145},{"_id":"public/Test/index.html","hash":"695bda04c83a6726e9229d2720e400879385335e","modified":1619022569145},{"_id":"public/Typescript/index.html","hash":"231e8a5a0b4fc385a19dd386faf8762980443370","modified":1619022569145},{"_id":"public/Week2-1/index.html","hash":"0eb3121ee6acaaebfcdf094aeb3bf656b501e684","modified":1619022569145},{"_id":"public/Week3-1/index.html","hash":"46cc867d14bde6a9c75b4d480cce7b91f98af00e","modified":1619022569145},{"_id":"public/useCallback/index.html","hash":"83ecab8703607beec3d5f6cdf0b52479fb792999","modified":1619022569145},{"_id":"public/useState/index.html","hash":"7a0e59e83c4547baf0ae842511ab14731d43513e","modified":1619022569145},{"_id":"public/Development/index.html","hash":"a32abcbf33d799baa9ece35278701b0f90cc7f63","modified":1619022569145},{"_id":"public/style-css/index.html","hash":"5c3e1bfea0f4ef3161bc697da116dd8d379ba5d9","modified":1619022569145},{"_id":"public/Smart-Work/index.html","hash":"4b94cefd9b5da23df51333242a0f3df7054c13f1","modified":1619022569145},{"_id":"public/jest-testing-asynchronous-code/index.html","hash":"c9a4193139d34c15293e630a4d23288d395cd38e","modified":1619022569145},{"_id":"public/Typescript-Quick-Start/index.html","hash":"30d0dbf982db838a7c494b055765bc0ec191b97c","modified":1619022569145},{"_id":"public/jest-setup-and-teardown/index.html","hash":"efd9510eca869c051694154146b8578d1b8b52d5","modified":1619022569145},{"_id":"public/naver-tech-concert/index.html","hash":"f8db3f277b7d14d0b68997ee17576a9cf04f41fe","modified":1619022569145},{"_id":"public/RxJS-정리1/index.html","hash":"41599bb4d7b6510fdcd97305f76539ba53b81db6","modified":1619022569145},{"_id":"public/RxJS-정리3/index.html","hash":"87cf8c5d5dba2689e343fd729f815646ef079c04","modified":1619022569145},{"_id":"public/RxJS-정리2/index.html","hash":"1a90c79738ba1610d92900de25084c9b0d4c49f2","modified":1619022569145},{"_id":"public/jest-using-matchers/index.html","hash":"d9f5fa7e9c6a9baf84b28e5305a36b96abdd231e","modified":1619022569145},{"_id":"public/jest-getting-started/index.html","hash":"270d090aad8c2cb6243af28cf007cb32847bbdb8","modified":1619022569145},{"_id":"public/Javascript-Testing-Introduction-Tutorial/index.html","hash":"2efa28978ef93b4e5f65a61e58eb441797b38c0a","modified":1619022569145},{"_id":"public/Hexo-blog-start/index.html","hash":"c43cf72561bd32b6bbc3b249a57ab056d83b4e94","modified":1619022569145},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1619022569145},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1619022569145},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1619022569145},{"_id":"public/images/postman_example1.png","hash":"df873c49457a7ca678e475ced97e30abe12999e6","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1619022569145},{"_id":"public/images/postman_example2.png","hash":"b3b5420a3dec109bab7d65be50621fb40ac9b7ea","modified":1619022569145},{"_id":"public/images/javascript_test_capture1.png","hash":"c36c10d571abb89f0d038f89ac5cc482e7f410f9","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1619022569145},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1619022569145},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1619022569145},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1619022569145},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1619022569145},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1619022569145},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1619022569145},{"_id":"public/css/style.css","hash":"023ac867bb387609a309e466ed03e957600b73ce","modified":1619022569145},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1619022569145},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1619022569145},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1619022569145},{"_id":"public/images/javascript_test_capture2.png","hash":"467ed7528a602b5d96569a6612ab1a0d3df5be17","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1619022569145},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1619022569145},{"_id":"public/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1619022569145},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1619022569145},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1619022569145}],"Category":[{"name":"RxJS","_id":"cknro8hq3000mbqwxfedl59o6"},{"name":"강의 정리","_id":"cknro8hqd0013bqwx7gbhh52i"},{"name":"til","_id":"cknro8hqe001cbqwxdsp93ms9"},{"name":"Smart Work","parent":"cknro8hqd0013bqwx7gbhh52i","_id":"cknro8hqi001xbqwx8e3u1f85"},{"name":"TIL","_id":"cknro8hqo002dbqwx7punfsvv"},{"name":"책 정리","_id":"cknro8hrs005nbqwxefsa0z63"},{"name":"Typescript","parent":"cknro8hrs005nbqwxefsa0z63","_id":"cknro8hru005ybqwxbpng9lyz"},{"name":"daily-report","_id":"cknro8hs00068bqwx2zbz5e74"},{"name":"Jest","_id":"cknro8hs5006fbqwx4g1jf6aa"},{"name":"공식 문서","parent":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsb0072bqwx7uav1aqe"}],"Data":[],"Page":[{"title":"about","date":"2021-03-28T09:38:21.000Z","_content":"\n안녕하세요. 김기현입니다\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-03-28 18:38:21\n---\n\n안녕하세요. 김기현입니다\n","updated":"2021-04-12T13:12:56.084Z","path":"about/index.html","comments":1,"layout":"page","_id":"cknro8hpl0000bqwx1hdya7bt","content":"<p>안녕하세요. 김기현입니다</p>\n","site":{"data":{}},"excerpt":"","more":"<p>안녕하세요. 김기현입니다</p>\n"}],"Post":[{"title":"자바스크립트 패턴과 테스트 - 정리","_content":"\n# 자바스크립트 패턴과 테스트\n\n## 도구 다루기\n- 의존성 주입 프레임워크\n    - 의존성 주입이란? (Dependency Injection)\n        - asdf\n\n","source":"_drafts/자바스크립트-패턴과-테스트-정리.md","raw":"---\ntitle: 자바스크립트 패턴과 테스트 - 정리\ntags: \n    - 정리\n    - book\n    - javascript\n---\n\n# 자바스크립트 패턴과 테스트\n\n## 도구 다루기\n- 의존성 주입 프레임워크\n    - 의존성 주입이란? (Dependency Injection)\n        - asdf\n\n","slug":"자바스크립트-패턴과-테스트-정리","published":0,"date":"2021-04-10T07:56:03.145Z","updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpo0001bqwxcy7mfi4u","content":"<h1 id=\"자바스크립트-패턴과-테스트\"><a href=\"#자바스크립트-패턴과-테스트\" class=\"headerlink\" title=\"자바스크립트 패턴과 테스트\"></a>자바스크립트 패턴과 테스트</h1><h2 id=\"도구-다루기\"><a href=\"#도구-다루기\" class=\"headerlink\" title=\"도구 다루기\"></a>도구 다루기</h2><ul>\n<li>의존성 주입 프레임워크<ul>\n<li>의존성 주입이란? (Dependency Injection)<ul>\n<li>asdf</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"자바스크립트-패턴과-테스트\"><a href=\"#자바스크립트-패턴과-테스트\" class=\"headerlink\" title=\"자바스크립트 패턴과 테스트\"></a>자바스크립트 패턴과 테스트</h1><h2 id=\"도구-다루기\"><a href=\"#도구-다루기\" class=\"headerlink\" title=\"도구 다루기\"></a>도구 다루기</h2><ul>\n<li>의존성 주입 프레임워크<ul>\n<li>의존성 주입이란? (Dependency Injection)<ul>\n<li>asdf</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"CodeSoom","_content":"\n*[Week2-1 리뷰](Week2-1.md)\n*[Week2-2 리뷰](Week2-2.md)\n*[Week3-1 리뷰](Week3-1.md)\n","source":"_posts/CodeSoom.md","raw":"---\ntitle: CodeSoom\n---\n\n*[Week2-1 리뷰](Week2-1.md)\n*[Week2-2 리뷰](Week2-2.md)\n*[Week3-1 리뷰](Week3-1.md)\n","slug":"CodeSoom","published":1,"date":"2021-04-12T10:23:14.334Z","updated":"2021-04-12T10:23:14.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpt0002bqwx7pu4b2kq","content":"<p><em><a href=\"Week2-1.md\">Week2-1 리뷰</a>\n</em><a href=\"Week2-2.md\">Week2-2 리뷰</a><br>*<a href=\"Week3-1.md\">Week3-1 리뷰</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em><a href=\"Week2-1.md\">Week2-1 리뷰</a>\n</em><a href=\"Week2-2.md\">Week2-2 리뷰</a><br>*<a href=\"Week3-1.md\">Week3-1 리뷰</a></p>\n"},{"title":"Development","_content":"\n# Development\n\n개발 전반에 걸친 정보를 담아보자.\n\n## 선언형 프로그래밍\n\n프로그래밍 패러다임 중 하나입니다.\n\n선언형 프로그래밍은 정확하게 어떤 명령 혹은 단계들이 실행될지 묘사하지 않고, 프로그램에서 원하는 것 목표만을 기술합니다. **즉, 목표만 있을 뿐 어떻게 목표를 달성하는지 기술하지 않는 것입니다.**\n\n선언형 프로그래밍의 예로는 데이터베이스 Query language(SQL), Regular expression, 설정 파일, 함수형 프로그래밍 등이 있습니다.\n\n## 관심사의 분리\n\n컴퓨터 프로그램을 구별된 부분으로 분리시키는 디자인 원칙으로, 각 부문은 개개의 관심사를 해결합니다. 각 부문의 관심사를 분리하면 코드를 이해하고 보수 하기 훨씬 더 쉬워집니다. 기존의 웹 개발 방식은 관심사의 분리보단 마크업, 디자인, 로직을 분리하는 기술의 분리에 가까웠습니다. 반면 리액트는 컴포넌트별로 관심사를 분리하여 재사용성과 확장성을 높여서 개발을 더 쉽게 해줍니다.\n\n예를 들면 보여지는 부분과 상태를 관리하는 부분으로 나눈다.\n프로그램의 유지보수에도 도움이 된다.\n","source":"_posts/Development.md","raw":"---\ntitle: Development\n---\n\n# Development\n\n개발 전반에 걸친 정보를 담아보자.\n\n## 선언형 프로그래밍\n\n프로그래밍 패러다임 중 하나입니다.\n\n선언형 프로그래밍은 정확하게 어떤 명령 혹은 단계들이 실행될지 묘사하지 않고, 프로그램에서 원하는 것 목표만을 기술합니다. **즉, 목표만 있을 뿐 어떻게 목표를 달성하는지 기술하지 않는 것입니다.**\n\n선언형 프로그래밍의 예로는 데이터베이스 Query language(SQL), Regular expression, 설정 파일, 함수형 프로그래밍 등이 있습니다.\n\n## 관심사의 분리\n\n컴퓨터 프로그램을 구별된 부분으로 분리시키는 디자인 원칙으로, 각 부문은 개개의 관심사를 해결합니다. 각 부문의 관심사를 분리하면 코드를 이해하고 보수 하기 훨씬 더 쉬워집니다. 기존의 웹 개발 방식은 관심사의 분리보단 마크업, 디자인, 로직을 분리하는 기술의 분리에 가까웠습니다. 반면 리액트는 컴포넌트별로 관심사를 분리하여 재사용성과 확장성을 높여서 개발을 더 쉽게 해줍니다.\n\n예를 들면 보여지는 부분과 상태를 관리하는 부분으로 나눈다.\n프로그램의 유지보수에도 도움이 된다.\n","slug":"Development","published":1,"date":"2021-04-12T10:23:14.334Z","updated":"2021-04-12T10:23:14.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpw0004bqwx1yf6f9zd","content":"<h1 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h1><p>개발 전반에 걸친 정보를 담아보자.</p>\n<h2 id=\"선언형-프로그래밍\"><a href=\"#선언형-프로그래밍\" class=\"headerlink\" title=\"선언형 프로그래밍\"></a>선언형 프로그래밍</h2><p>프로그래밍 패러다임 중 하나입니다.</p>\n<p>선언형 프로그래밍은 정확하게 어떤 명령 혹은 단계들이 실행될지 묘사하지 않고, 프로그램에서 원하는 것 목표만을 기술합니다. <strong>즉, 목표만 있을 뿐 어떻게 목표를 달성하는지 기술하지 않는 것입니다.</strong></p>\n<p>선언형 프로그래밍의 예로는 데이터베이스 Query language(SQL), Regular expression, 설정 파일, 함수형 프로그래밍 등이 있습니다.</p>\n<h2 id=\"관심사의-분리\"><a href=\"#관심사의-분리\" class=\"headerlink\" title=\"관심사의 분리\"></a>관심사의 분리</h2><p>컴퓨터 프로그램을 구별된 부분으로 분리시키는 디자인 원칙으로, 각 부문은 개개의 관심사를 해결합니다. 각 부문의 관심사를 분리하면 코드를 이해하고 보수 하기 훨씬 더 쉬워집니다. 기존의 웹 개발 방식은 관심사의 분리보단 마크업, 디자인, 로직을 분리하는 기술의 분리에 가까웠습니다. 반면 리액트는 컴포넌트별로 관심사를 분리하여 재사용성과 확장성을 높여서 개발을 더 쉽게 해줍니다.</p>\n<p>예를 들면 보여지는 부분과 상태를 관리하는 부분으로 나눈다.<br>프로그램의 유지보수에도 도움이 된다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h1><p>개발 전반에 걸친 정보를 담아보자.</p>\n<h2 id=\"선언형-프로그래밍\"><a href=\"#선언형-프로그래밍\" class=\"headerlink\" title=\"선언형 프로그래밍\"></a>선언형 프로그래밍</h2><p>프로그래밍 패러다임 중 하나입니다.</p>\n<p>선언형 프로그래밍은 정확하게 어떤 명령 혹은 단계들이 실행될지 묘사하지 않고, 프로그램에서 원하는 것 목표만을 기술합니다. <strong>즉, 목표만 있을 뿐 어떻게 목표를 달성하는지 기술하지 않는 것입니다.</strong></p>\n<p>선언형 프로그래밍의 예로는 데이터베이스 Query language(SQL), Regular expression, 설정 파일, 함수형 프로그래밍 등이 있습니다.</p>\n<h2 id=\"관심사의-분리\"><a href=\"#관심사의-분리\" class=\"headerlink\" title=\"관심사의 분리\"></a>관심사의 분리</h2><p>컴퓨터 프로그램을 구별된 부분으로 분리시키는 디자인 원칙으로, 각 부문은 개개의 관심사를 해결합니다. 각 부문의 관심사를 분리하면 코드를 이해하고 보수 하기 훨씬 더 쉬워집니다. 기존의 웹 개발 방식은 관심사의 분리보단 마크업, 디자인, 로직을 분리하는 기술의 분리에 가까웠습니다. 반면 리액트는 컴포넌트별로 관심사를 분리하여 재사용성과 확장성을 높여서 개발을 더 쉽게 해줍니다.</p>\n<p>예를 들면 보여지는 부분과 상태를 관리하는 부분으로 나눈다.<br>프로그램의 유지보수에도 도움이 된다.</p>\n"},{"title":"Eslint","_content":"\n# Eslint\n\n## 적용되고있는 rules를 한눈에 보고싶을때\n\n`npx eslint --print-config ./eslintrc.js`\n뒤엔 rc 파일 path 적으면됨\n","source":"_posts/Eslint.md","raw":"---\ntitle: Eslint\n---\n\n# Eslint\n\n## 적용되고있는 rules를 한눈에 보고싶을때\n\n`npx eslint --print-config ./eslintrc.js`\n뒤엔 rc 파일 path 적으면됨\n","slug":"Eslint","published":1,"date":"2021-04-12T10:23:14.334Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpx0005bqwxf7nd773h","content":"<h1 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h1><h2 id=\"적용되고있는-rules를-한눈에-보고싶을때\"><a href=\"#적용되고있는-rules를-한눈에-보고싶을때\" class=\"headerlink\" title=\"적용되고있는 rules를 한눈에 보고싶을때\"></a>적용되고있는 rules를 한눈에 보고싶을때</h2><p><code>npx eslint --print-config ./eslintrc.js</code><br>뒤엔 rc 파일 path 적으면됨</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Eslint\"><a href=\"#Eslint\" class=\"headerlink\" title=\"Eslint\"></a>Eslint</h1><h2 id=\"적용되고있는-rules를-한눈에-보고싶을때\"><a href=\"#적용되고있는-rules를-한눈에-보고싶을때\" class=\"headerlink\" title=\"적용되고있는 rules를 한눈에 보고싶을때\"></a>적용되고있는 rules를 한눈에 보고싶을때</h2><p><code>npx eslint --print-config ./eslintrc.js</code><br>뒤엔 rc 파일 path 적으면됨</p>\n"},{"title":"Hexo로 블로그 시작하기","date":"2018-10-12T16:52:47.000Z","_content":"\n## 1. Hexo\n\n* 기존에 `Jekyll`로 작업하던 깃헙 블로그를 Hexo로 바꿨다.\n* 따라서 새로 배운 `Hexo`의 명령어들을 정리해보려한다.\n* [이 분의 블로그 글](https://hyunseob.github.io/2016/02/23/start-hexo/)을 참고함 (잘 정리됨! 자주 참조하자!)\n\n## 설치\n\n기본적인 노드 설치 후, Hexo를 설치하자\n\n    $npm install -g hexo-cli\n\n그 다음 Hexo 디렉토리 스캐폴딩 작업을 하자. 나는 my-blog라는 디렉토리를 생성했다. (꼭 깃헙 repo와 이름이 같을 필요 없음)\n\n    $hexo init <my-blog>\n\n잘 생성 되었는지 로컬에서 확인해보자\n\n    $hexo serve\n\n## 포스팅\n\n매우 간단하다. (임의로 my-posting이라고 포스트명을 지었다)\n\n    $hexo new <my-posting>\n\ndraft 문서를 작성하고 싶으면\n\n    $hexo new draft <my-draft>\n\n이렇게 하면 각각 /source/_posts/ 와 /source/_drafts/ 에 my-posting.md 와 같은 파일이 생성된다.\n\n> 태그 플러그인 참조 : https://hexo.io/docs/tag-plugins.html\n\n* draft 문서를 포스팅 하려면, publish 명령어를 사용\n    * _drafts 디렉토리에 있던게 _posts 디렉토리로 이동함. 날짜/시간도 넣어진다고한다\n\n            $hexo publish <my-draft>\n\n## 디플로이\n\n우선 _config.yml에 내 github 정보를 입력!\n\n    deploy:\n        type: git\n        repo: https://github.com/Kihyun92/Kihyun92.github.io.git\n        branch: master\n\n그 다음, 정적 파일들을 생성해준다.\n\n    $hexo generate\n\n디플로이를 위한 플러그인 설치!\n\n    $npm install --save hexo-deployer-git\n\n디플로이!\n\n    $hexo deploy\n\n매우 간단하다!\n\n다만, 코드 관리를 다른 repo에서 해야하는게 단점이라고 하신거에 공감.\n\n이제 차근차근 블로그를 꾸며보자!\n","source":"_posts/Hexo-blog-start.md","raw":"---\ntitle: Hexo로 블로그 시작하기\ndate: 2018-10-13 01:52:47\ntags:\n    - til\n    - hexo\n---\n\n## 1. Hexo\n\n* 기존에 `Jekyll`로 작업하던 깃헙 블로그를 Hexo로 바꿨다.\n* 따라서 새로 배운 `Hexo`의 명령어들을 정리해보려한다.\n* [이 분의 블로그 글](https://hyunseob.github.io/2016/02/23/start-hexo/)을 참고함 (잘 정리됨! 자주 참조하자!)\n\n## 설치\n\n기본적인 노드 설치 후, Hexo를 설치하자\n\n    $npm install -g hexo-cli\n\n그 다음 Hexo 디렉토리 스캐폴딩 작업을 하자. 나는 my-blog라는 디렉토리를 생성했다. (꼭 깃헙 repo와 이름이 같을 필요 없음)\n\n    $hexo init <my-blog>\n\n잘 생성 되었는지 로컬에서 확인해보자\n\n    $hexo serve\n\n## 포스팅\n\n매우 간단하다. (임의로 my-posting이라고 포스트명을 지었다)\n\n    $hexo new <my-posting>\n\ndraft 문서를 작성하고 싶으면\n\n    $hexo new draft <my-draft>\n\n이렇게 하면 각각 /source/_posts/ 와 /source/_drafts/ 에 my-posting.md 와 같은 파일이 생성된다.\n\n> 태그 플러그인 참조 : https://hexo.io/docs/tag-plugins.html\n\n* draft 문서를 포스팅 하려면, publish 명령어를 사용\n    * _drafts 디렉토리에 있던게 _posts 디렉토리로 이동함. 날짜/시간도 넣어진다고한다\n\n            $hexo publish <my-draft>\n\n## 디플로이\n\n우선 _config.yml에 내 github 정보를 입력!\n\n    deploy:\n        type: git\n        repo: https://github.com/Kihyun92/Kihyun92.github.io.git\n        branch: master\n\n그 다음, 정적 파일들을 생성해준다.\n\n    $hexo generate\n\n디플로이를 위한 플러그인 설치!\n\n    $npm install --save hexo-deployer-git\n\n디플로이!\n\n    $hexo deploy\n\n매우 간단하다!\n\n다만, 코드 관리를 다른 repo에서 해야하는게 단점이라고 하신거에 공감.\n\n이제 차근차근 블로그를 꾸며보자!\n","slug":"Hexo-blog-start","published":1,"updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpx0006bqwxgqzzck3s","content":"<h2 id=\"1-Hexo\"><a href=\"#1-Hexo\" class=\"headerlink\" title=\"1. Hexo\"></a>1. Hexo</h2><ul>\n<li>기존에 <code>Jekyll</code>로 작업하던 깃헙 블로그를 Hexo로 바꿨다.</li>\n<li>따라서 새로 배운 <code>Hexo</code>의 명령어들을 정리해보려한다.</li>\n<li><a href=\"https://hyunseob.github.io/2016/02/23/start-hexo/\">이 분의 블로그 글</a>을 참고함 (잘 정리됨! 자주 참조하자!)</li>\n</ul>\n<h2 id=\"설치\"><a href=\"#설치\" class=\"headerlink\" title=\"설치\"></a>설치</h2><p>기본적인 노드 설치 후, Hexo를 설치하자</p>\n<pre><code>$npm install -g hexo-cli\n</code></pre><p>그 다음 Hexo 디렉토리 스캐폴딩 작업을 하자. 나는 my-blog라는 디렉토리를 생성했다. (꼭 깃헙 repo와 이름이 같을 필요 없음)</p>\n<pre><code>$hexo init &lt;my-blog&gt;\n</code></pre><p>잘 생성 되었는지 로컬에서 확인해보자</p>\n<pre><code>$hexo serve\n</code></pre><h2 id=\"포스팅\"><a href=\"#포스팅\" class=\"headerlink\" title=\"포스팅\"></a>포스팅</h2><p>매우 간단하다. (임의로 my-posting이라고 포스트명을 지었다)</p>\n<pre><code>$hexo new &lt;my-posting&gt;\n</code></pre><p>draft 문서를 작성하고 싶으면</p>\n<pre><code>$hexo new draft &lt;my-draft&gt;\n</code></pre><p>이렇게 하면 각각 /source/_posts/ 와 /source/_drafts/ 에 my-posting.md 와 같은 파일이 생성된다.</p>\n<blockquote>\n<p>태그 플러그인 참조 : <a href=\"https://hexo.io/docs/tag-plugins.html\">https://hexo.io/docs/tag-plugins.html</a></p>\n</blockquote>\n<ul>\n<li><p>draft 문서를 포스팅 하려면, publish 명령어를 사용</p>\n<ul>\n<li><p>_drafts 디렉토리에 있던게 _posts 디렉토리로 이동함. 날짜/시간도 넣어진다고한다</p>\n<pre><code>$hexo publish &lt;my-draft&gt;\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"디플로이\"><a href=\"#디플로이\" class=\"headerlink\" title=\"디플로이\"></a>디플로이</h2><p>우선 _config.yml에 내 github 정보를 입력!</p>\n<pre><code>deploy:\n    type: git\n    repo: https://github.com/Kihyun92/Kihyun92.github.io.git\n    branch: master\n</code></pre><p>그 다음, 정적 파일들을 생성해준다.</p>\n<pre><code>$hexo generate\n</code></pre><p>디플로이를 위한 플러그인 설치!</p>\n<pre><code>$npm install --save hexo-deployer-git\n</code></pre><p>디플로이!</p>\n<pre><code>$hexo deploy\n</code></pre><p>매우 간단하다!</p>\n<p>다만, 코드 관리를 다른 repo에서 해야하는게 단점이라고 하신거에 공감.</p>\n<p>이제 차근차근 블로그를 꾸며보자!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-Hexo\"><a href=\"#1-Hexo\" class=\"headerlink\" title=\"1. Hexo\"></a>1. Hexo</h2><ul>\n<li>기존에 <code>Jekyll</code>로 작업하던 깃헙 블로그를 Hexo로 바꿨다.</li>\n<li>따라서 새로 배운 <code>Hexo</code>의 명령어들을 정리해보려한다.</li>\n<li><a href=\"https://hyunseob.github.io/2016/02/23/start-hexo/\">이 분의 블로그 글</a>을 참고함 (잘 정리됨! 자주 참조하자!)</li>\n</ul>\n<h2 id=\"설치\"><a href=\"#설치\" class=\"headerlink\" title=\"설치\"></a>설치</h2><p>기본적인 노드 설치 후, Hexo를 설치하자</p>\n<pre><code>$npm install -g hexo-cli\n</code></pre><p>그 다음 Hexo 디렉토리 스캐폴딩 작업을 하자. 나는 my-blog라는 디렉토리를 생성했다. (꼭 깃헙 repo와 이름이 같을 필요 없음)</p>\n<pre><code>$hexo init &lt;my-blog&gt;\n</code></pre><p>잘 생성 되었는지 로컬에서 확인해보자</p>\n<pre><code>$hexo serve\n</code></pre><h2 id=\"포스팅\"><a href=\"#포스팅\" class=\"headerlink\" title=\"포스팅\"></a>포스팅</h2><p>매우 간단하다. (임의로 my-posting이라고 포스트명을 지었다)</p>\n<pre><code>$hexo new &lt;my-posting&gt;\n</code></pre><p>draft 문서를 작성하고 싶으면</p>\n<pre><code>$hexo new draft &lt;my-draft&gt;\n</code></pre><p>이렇게 하면 각각 /source/_posts/ 와 /source/_drafts/ 에 my-posting.md 와 같은 파일이 생성된다.</p>\n<blockquote>\n<p>태그 플러그인 참조 : <a href=\"https://hexo.io/docs/tag-plugins.html\">https://hexo.io/docs/tag-plugins.html</a></p>\n</blockquote>\n<ul>\n<li><p>draft 문서를 포스팅 하려면, publish 명령어를 사용</p>\n<ul>\n<li><p>_drafts 디렉토리에 있던게 _posts 디렉토리로 이동함. 날짜/시간도 넣어진다고한다</p>\n<pre><code>$hexo publish &lt;my-draft&gt;\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"디플로이\"><a href=\"#디플로이\" class=\"headerlink\" title=\"디플로이\"></a>디플로이</h2><p>우선 _config.yml에 내 github 정보를 입력!</p>\n<pre><code>deploy:\n    type: git\n    repo: https://github.com/Kihyun92/Kihyun92.github.io.git\n    branch: master\n</code></pre><p>그 다음, 정적 파일들을 생성해준다.</p>\n<pre><code>$hexo generate\n</code></pre><p>디플로이를 위한 플러그인 설치!</p>\n<pre><code>$npm install --save hexo-deployer-git\n</code></pre><p>디플로이!</p>\n<pre><code>$hexo deploy\n</code></pre><p>매우 간단하다!</p>\n<p>다만, 코드 관리를 다른 repo에서 해야하는게 단점이라고 하신거에 공감.</p>\n<p>이제 차근차근 블로그를 꾸며보자!</p>\n"},{"title":"Javascript Testing Introduction Tutorial","date":"2018-10-16T02:50:33.000Z","_content":"\n[Javascript test tutorial 영상](https://www.youtube.com/watch?v=r9HdJ8P6GQI&feature=push-sd&attr_tag=KRUQImvHMMCLBFNo%3A6)을 정리해보자.\n\n---\n\n## What is \"Testing\"?\n\n![](/images/javascript_test_capture1.png)\n\n- 테스트를 함으로써 Test -> Failure -> Modify & Fix -> Test 까지의 일련의 과정을 Automate & Simplify 할 수 있다!\n\n\n## Why Test?\n\n- Get an Error if you break code\n    - 일일이 까보지 않고, 즉시 모든 테스트 결과를 볼 수 있다!\n- Save time\n    - 매뉴얼대로 일일이 테스트 하지 않아도됨\n- Think about possible issues & bugs\n    - 테스트를 작성하면서 우리가 뭘 테스트 하고 싶은지\n    - 어떻게 올바른 테스트를 작성해야하는지\n- Integrate into build workflow\n- Break up complex ependencies\n- imporove your code\n\n\n## Different Kinds of Tests\n\n- Fully Isolated(순수 함수) -> Unit Tests\n\n- With Dependencies -> Integration Tests\n\n- Full Flow (UI 조작이 필요한 경우 or 앱 전체 동작을 테스팅) -> End-to-End(E2E) Tests\n\n> 아래로 갈수록 복잡도는 높아진다.\n\n> 올라갈수록 Frequency(테스트 개수는 늘어난다)\n\n## Testing Setup\n\n![](/images/javascript_test_capture2.png)\n\n---\n\n예제 코드를 통해 어떻게 하는지 알아보자.\n\n## Unit Tests\n- input parameter가 있고, return이 있는 순수함수\n- 실패하는 테스트를 짜면서 점점 케이스를 생각하고 늘려가자\n\n## Integration Test\n- 다른 함수에 의존성이 있는 함수의 경우\n- input param, return value가 없는 경우\n- DOM 조작하는 경우\n\n> 일단 원본 source를 수정해야함 -> test할 부분을 module화\n\n> 이제 이 모듈을 테스트!\n\n\n## e2e Test\n- 영상 29분 부터!\n\n\n","source":"_posts/Javascript-Testing-Introduction-Tutorial.md","raw":"---\ntitle: Javascript Testing Introduction Tutorial\ndate: 2018-10-16 11:50:33\ntags:\n    - javascript\n    - test\n---\n\n[Javascript test tutorial 영상](https://www.youtube.com/watch?v=r9HdJ8P6GQI&feature=push-sd&attr_tag=KRUQImvHMMCLBFNo%3A6)을 정리해보자.\n\n---\n\n## What is \"Testing\"?\n\n![](/images/javascript_test_capture1.png)\n\n- 테스트를 함으로써 Test -> Failure -> Modify & Fix -> Test 까지의 일련의 과정을 Automate & Simplify 할 수 있다!\n\n\n## Why Test?\n\n- Get an Error if you break code\n    - 일일이 까보지 않고, 즉시 모든 테스트 결과를 볼 수 있다!\n- Save time\n    - 매뉴얼대로 일일이 테스트 하지 않아도됨\n- Think about possible issues & bugs\n    - 테스트를 작성하면서 우리가 뭘 테스트 하고 싶은지\n    - 어떻게 올바른 테스트를 작성해야하는지\n- Integrate into build workflow\n- Break up complex ependencies\n- imporove your code\n\n\n## Different Kinds of Tests\n\n- Fully Isolated(순수 함수) -> Unit Tests\n\n- With Dependencies -> Integration Tests\n\n- Full Flow (UI 조작이 필요한 경우 or 앱 전체 동작을 테스팅) -> End-to-End(E2E) Tests\n\n> 아래로 갈수록 복잡도는 높아진다.\n\n> 올라갈수록 Frequency(테스트 개수는 늘어난다)\n\n## Testing Setup\n\n![](/images/javascript_test_capture2.png)\n\n---\n\n예제 코드를 통해 어떻게 하는지 알아보자.\n\n## Unit Tests\n- input parameter가 있고, return이 있는 순수함수\n- 실패하는 테스트를 짜면서 점점 케이스를 생각하고 늘려가자\n\n## Integration Test\n- 다른 함수에 의존성이 있는 함수의 경우\n- input param, return value가 없는 경우\n- DOM 조작하는 경우\n\n> 일단 원본 source를 수정해야함 -> test할 부분을 module화\n\n> 이제 이 모듈을 테스트!\n\n\n## e2e Test\n- 영상 29분 부터!\n\n\n","slug":"Javascript-Testing-Introduction-Tutorial","published":1,"updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpy0008bqwx4wrufp63","content":"<p><a href=\"https://www.youtube.com/watch?v=r9HdJ8P6GQI&amp;feature=push-sd&amp;attr_tag=KRUQImvHMMCLBFNo%3A6\">Javascript test tutorial 영상</a>을 정리해보자.</p>\n<hr>\n<h2 id=\"What-is-“Testing”\"><a href=\"#What-is-“Testing”\" class=\"headerlink\" title=\"What is “Testing”?\"></a>What is “Testing”?</h2><p><img src=\"/images/javascript_test_capture1.png\" alt=\"\"></p>\n<ul>\n<li>테스트를 함으로써 Test -&gt; Failure -&gt; Modify &amp; Fix -&gt; Test 까지의 일련의 과정을 Automate &amp; Simplify 할 수 있다!</li>\n</ul>\n<h2 id=\"Why-Test\"><a href=\"#Why-Test\" class=\"headerlink\" title=\"Why Test?\"></a>Why Test?</h2><ul>\n<li>Get an Error if you break code<ul>\n<li>일일이 까보지 않고, 즉시 모든 테스트 결과를 볼 수 있다!</li>\n</ul>\n</li>\n<li>Save time<ul>\n<li>매뉴얼대로 일일이 테스트 하지 않아도됨</li>\n</ul>\n</li>\n<li>Think about possible issues &amp; bugs<ul>\n<li>테스트를 작성하면서 우리가 뭘 테스트 하고 싶은지</li>\n<li>어떻게 올바른 테스트를 작성해야하는지</li>\n</ul>\n</li>\n<li>Integrate into build workflow</li>\n<li>Break up complex ependencies</li>\n<li>imporove your code</li>\n</ul>\n<h2 id=\"Different-Kinds-of-Tests\"><a href=\"#Different-Kinds-of-Tests\" class=\"headerlink\" title=\"Different Kinds of Tests\"></a>Different Kinds of Tests</h2><ul>\n<li><p>Fully Isolated(순수 함수) -&gt; Unit Tests</p>\n</li>\n<li><p>With Dependencies -&gt; Integration Tests</p>\n</li>\n<li><p>Full Flow (UI 조작이 필요한 경우 or 앱 전체 동작을 테스팅) -&gt; End-to-End(E2E) Tests</p>\n</li>\n</ul>\n<blockquote>\n<p>아래로 갈수록 복잡도는 높아진다.</p>\n</blockquote>\n<blockquote>\n<p>올라갈수록 Frequency(테스트 개수는 늘어난다)</p>\n</blockquote>\n<h2 id=\"Testing-Setup\"><a href=\"#Testing-Setup\" class=\"headerlink\" title=\"Testing Setup\"></a>Testing Setup</h2><p><img src=\"/images/javascript_test_capture2.png\" alt=\"\"></p>\n<hr>\n<p>예제 코드를 통해 어떻게 하는지 알아보자.</p>\n<h2 id=\"Unit-Tests\"><a href=\"#Unit-Tests\" class=\"headerlink\" title=\"Unit Tests\"></a>Unit Tests</h2><ul>\n<li>input parameter가 있고, return이 있는 순수함수</li>\n<li>실패하는 테스트를 짜면서 점점 케이스를 생각하고 늘려가자</li>\n</ul>\n<h2 id=\"Integration-Test\"><a href=\"#Integration-Test\" class=\"headerlink\" title=\"Integration Test\"></a>Integration Test</h2><ul>\n<li>다른 함수에 의존성이 있는 함수의 경우</li>\n<li>input param, return value가 없는 경우</li>\n<li>DOM 조작하는 경우</li>\n</ul>\n<blockquote>\n<p>일단 원본 source를 수정해야함 -&gt; test할 부분을 module화</p>\n</blockquote>\n<blockquote>\n<p>이제 이 모듈을 테스트!</p>\n</blockquote>\n<h2 id=\"e2e-Test\"><a href=\"#e2e-Test\" class=\"headerlink\" title=\"e2e Test\"></a>e2e Test</h2><ul>\n<li>영상 29분 부터!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.youtube.com/watch?v=r9HdJ8P6GQI&amp;feature=push-sd&amp;attr_tag=KRUQImvHMMCLBFNo%3A6\">Javascript test tutorial 영상</a>을 정리해보자.</p>\n<hr>\n<h2 id=\"What-is-“Testing”\"><a href=\"#What-is-“Testing”\" class=\"headerlink\" title=\"What is “Testing”?\"></a>What is “Testing”?</h2><p><img src=\"/images/javascript_test_capture1.png\" alt=\"\"></p>\n<ul>\n<li>테스트를 함으로써 Test -&gt; Failure -&gt; Modify &amp; Fix -&gt; Test 까지의 일련의 과정을 Automate &amp; Simplify 할 수 있다!</li>\n</ul>\n<h2 id=\"Why-Test\"><a href=\"#Why-Test\" class=\"headerlink\" title=\"Why Test?\"></a>Why Test?</h2><ul>\n<li>Get an Error if you break code<ul>\n<li>일일이 까보지 않고, 즉시 모든 테스트 결과를 볼 수 있다!</li>\n</ul>\n</li>\n<li>Save time<ul>\n<li>매뉴얼대로 일일이 테스트 하지 않아도됨</li>\n</ul>\n</li>\n<li>Think about possible issues &amp; bugs<ul>\n<li>테스트를 작성하면서 우리가 뭘 테스트 하고 싶은지</li>\n<li>어떻게 올바른 테스트를 작성해야하는지</li>\n</ul>\n</li>\n<li>Integrate into build workflow</li>\n<li>Break up complex ependencies</li>\n<li>imporove your code</li>\n</ul>\n<h2 id=\"Different-Kinds-of-Tests\"><a href=\"#Different-Kinds-of-Tests\" class=\"headerlink\" title=\"Different Kinds of Tests\"></a>Different Kinds of Tests</h2><ul>\n<li><p>Fully Isolated(순수 함수) -&gt; Unit Tests</p>\n</li>\n<li><p>With Dependencies -&gt; Integration Tests</p>\n</li>\n<li><p>Full Flow (UI 조작이 필요한 경우 or 앱 전체 동작을 테스팅) -&gt; End-to-End(E2E) Tests</p>\n</li>\n</ul>\n<blockquote>\n<p>아래로 갈수록 복잡도는 높아진다.</p>\n</blockquote>\n<blockquote>\n<p>올라갈수록 Frequency(테스트 개수는 늘어난다)</p>\n</blockquote>\n<h2 id=\"Testing-Setup\"><a href=\"#Testing-Setup\" class=\"headerlink\" title=\"Testing Setup\"></a>Testing Setup</h2><p><img src=\"/images/javascript_test_capture2.png\" alt=\"\"></p>\n<hr>\n<p>예제 코드를 통해 어떻게 하는지 알아보자.</p>\n<h2 id=\"Unit-Tests\"><a href=\"#Unit-Tests\" class=\"headerlink\" title=\"Unit Tests\"></a>Unit Tests</h2><ul>\n<li>input parameter가 있고, return이 있는 순수함수</li>\n<li>실패하는 테스트를 짜면서 점점 케이스를 생각하고 늘려가자</li>\n</ul>\n<h2 id=\"Integration-Test\"><a href=\"#Integration-Test\" class=\"headerlink\" title=\"Integration Test\"></a>Integration Test</h2><ul>\n<li>다른 함수에 의존성이 있는 함수의 경우</li>\n<li>input param, return value가 없는 경우</li>\n<li>DOM 조작하는 경우</li>\n</ul>\n<blockquote>\n<p>일단 원본 source를 수정해야함 -&gt; test할 부분을 module화</p>\n</blockquote>\n<blockquote>\n<p>이제 이 모듈을 테스트!</p>\n</blockquote>\n<h2 id=\"e2e-Test\"><a href=\"#e2e-Test\" class=\"headerlink\" title=\"e2e Test\"></a>e2e Test</h2><ul>\n<li>영상 29분 부터!</li>\n</ul>\n"},{"title":"Javascript","_content":"\n# Javascript\n\n## Object Literal lookups\n\nswitch문과 같은 조건문 대신에 사용하면 좋은 패턴이다!\n[참조](https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals)\n\n``` javascript\nfunction getDrink (type) {\n  var drinks = {\n    'coke': 'Coke',\n    'pepsi': 'Pepsi',\n    'lemonade': 'Lemonade',\n    'default': 'Default item'\n  };\n  return 'The drink I chose was ' + (drinks[type] || drinks['default']);\n}\n\nvar drink = getDrink('coke');\n```\n\n### default case 없이 사용할 경우\n\n``` javascript\nfunction getDrink (type) {\n  return 'The drink I chose was ' + {\n    'coke': 'Coke',\n    'pepsi': 'Pepsi',\n    'lemonade': 'Lemonade'\n  }[type];\n}\n```\n\n### 함수로 사용한 경우\n\n```javascript\nvar type = 'coke';\n\nvar drinks = {\n  'coke': function () {\n    return 'Coke';\n  },\n  'pepsi': function () {\n    return 'Pepsi';\n  },\n  'lemonade': function () {\n    return 'Lemonade';\n  }\n};\n\ndrinks[type]();\n```\n\n### basic solution\n\n```javascript\nfunction getDrink (type) {\n  var drink;\n  var drinks = {\n    'coke': function () {\n      drink = 'Coke';\n    },\n    'pepsi': function () {\n      drink = 'Pepsi';\n    },\n    'lemonade': function () {\n      drink = 'Lemonade';\n    },\n    'default': function () {\n      drink = 'Default item';\n    }\n  };\n\n  // invoke it\n  (drinks[type] || drinks['default'])();\n\n  // return a String with chosen drink\n  return 'The drink I chose was ' + drink;\n}\n\nvar drink = getDrink('coke');\n```\n\n### Typescript 참고\n\nhttps://github.com/microsoft/TypeScript/issues/35859\n\n## handler 네이밍\n\n참고하자.\n- https://jaketrent.com/post/naming-event-handlers-react/\n- https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers\n\n## RORO 패턴\n\n[참고](https://www.freecodecamp.org/news/elegant-patterns-in-modern-javascript-roro-be01e7669cbd/)\n\n## Date\n\n- ISO?\n  - ISO 8601은 날짜와 시간의 표기에 관한 국제 표준 규격이다.\n  - YYYY-DDD (확장 형식) 또는 YYYYDDD (기본 형식)으로 표기한다.\n  - 시간의 표기에는 쌍점을 쓴 hh:mm:ss (확장 형식) 또는 hhmmss (기본 형식)을 사용한다.\n  - 날짜와 시간을 함께 표기할 때에는, 날짜와 시간 사이에 T를 넣어 표기한다.\n  - 시간대를 표기할 때에는 Z또는 +/- 기호를 사용한다.\n    - UTC 시간대에서는 시각 뒤에 Z를 붙인다.\n    - `예) 1981-02-22T09:00Z 또는 19810222T0900Z : UTC 시간대에서의 1981년 2월 22일 오전 9시`\n    - UTC 외의 시간대에서는 시각 뒤에 +- hh:mm, +- hhmm, +- hh 를 덧붙여 쓴다.\n    - `예) 1981-02-22T09:00:00+09:00 : UTC+9 시간대에서의 1981년 2월 22일 오전 9시`\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n- UTC?\n  - 실제로 국제 전기 통신 연합은 통일된 약자를 원했지만,\n영어권의 사람들과 프랑스어권의 사람들은 각각 자신의 언어로 된 약자를 사용하길 원했다.\n영어권은 CUT(Coordinated Universal Time)을, 프랑스어권은 TUC(Temps Universel Coordonne)를 제안했으며,\n결국 두 언어 모두 C, T, U로 구성되어 있는 것에 착안해 UTC로 약어를 결정하기로 했다.\n\n뭐가 다른거지\n- https://ohgyun.com/416\n\n## 정규식 적용\n\n`정규식.test(텍스트);`\n\n```javascript\nexport const emailMatchRegex = new RegExp(\n  '^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$',\n  'i'\n);\n\nconst isEmailForamt = (text: string) => emailMatchRegex.test(text);\n```\n\n## 객체의 key 값에 원하는 변수값을 할당하고 싶은 경우\n\n```javascript\n  WeverseAdminRoles.map(role => {\n    return Object.assign(rolesObj, {[role]: roles.includes(role)});\n  })\n```\n\n-> [] 괄호를 사용하면 가능하다!\n\n## snakeToCamel\n\n``` javascript\nexport const snakeToCamel = (str: string) => str.toLowerCase().replace(/[-_]([a-z])/g, (_, group) => group.toUpperCase());\n```\n","source":"_posts/Javascript.md","raw":"---\ntitle: Javascript\n---\n\n# Javascript\n\n## Object Literal lookups\n\nswitch문과 같은 조건문 대신에 사용하면 좋은 패턴이다!\n[참조](https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals)\n\n``` javascript\nfunction getDrink (type) {\n  var drinks = {\n    'coke': 'Coke',\n    'pepsi': 'Pepsi',\n    'lemonade': 'Lemonade',\n    'default': 'Default item'\n  };\n  return 'The drink I chose was ' + (drinks[type] || drinks['default']);\n}\n\nvar drink = getDrink('coke');\n```\n\n### default case 없이 사용할 경우\n\n``` javascript\nfunction getDrink (type) {\n  return 'The drink I chose was ' + {\n    'coke': 'Coke',\n    'pepsi': 'Pepsi',\n    'lemonade': 'Lemonade'\n  }[type];\n}\n```\n\n### 함수로 사용한 경우\n\n```javascript\nvar type = 'coke';\n\nvar drinks = {\n  'coke': function () {\n    return 'Coke';\n  },\n  'pepsi': function () {\n    return 'Pepsi';\n  },\n  'lemonade': function () {\n    return 'Lemonade';\n  }\n};\n\ndrinks[type]();\n```\n\n### basic solution\n\n```javascript\nfunction getDrink (type) {\n  var drink;\n  var drinks = {\n    'coke': function () {\n      drink = 'Coke';\n    },\n    'pepsi': function () {\n      drink = 'Pepsi';\n    },\n    'lemonade': function () {\n      drink = 'Lemonade';\n    },\n    'default': function () {\n      drink = 'Default item';\n    }\n  };\n\n  // invoke it\n  (drinks[type] || drinks['default'])();\n\n  // return a String with chosen drink\n  return 'The drink I chose was ' + drink;\n}\n\nvar drink = getDrink('coke');\n```\n\n### Typescript 참고\n\nhttps://github.com/microsoft/TypeScript/issues/35859\n\n## handler 네이밍\n\n참고하자.\n- https://jaketrent.com/post/naming-event-handlers-react/\n- https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers\n\n## RORO 패턴\n\n[참고](https://www.freecodecamp.org/news/elegant-patterns-in-modern-javascript-roro-be01e7669cbd/)\n\n## Date\n\n- ISO?\n  - ISO 8601은 날짜와 시간의 표기에 관한 국제 표준 규격이다.\n  - YYYY-DDD (확장 형식) 또는 YYYYDDD (기본 형식)으로 표기한다.\n  - 시간의 표기에는 쌍점을 쓴 hh:mm:ss (확장 형식) 또는 hhmmss (기본 형식)을 사용한다.\n  - 날짜와 시간을 함께 표기할 때에는, 날짜와 시간 사이에 T를 넣어 표기한다.\n  - 시간대를 표기할 때에는 Z또는 +/- 기호를 사용한다.\n    - UTC 시간대에서는 시각 뒤에 Z를 붙인다.\n    - `예) 1981-02-22T09:00Z 또는 19810222T0900Z : UTC 시간대에서의 1981년 2월 22일 오전 9시`\n    - UTC 외의 시간대에서는 시각 뒤에 +- hh:mm, +- hhmm, +- hh 를 덧붙여 쓴다.\n    - `예) 1981-02-22T09:00:00+09:00 : UTC+9 시간대에서의 1981년 2월 22일 오전 9시`\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n- UTC?\n  - 실제로 국제 전기 통신 연합은 통일된 약자를 원했지만,\n영어권의 사람들과 프랑스어권의 사람들은 각각 자신의 언어로 된 약자를 사용하길 원했다.\n영어권은 CUT(Coordinated Universal Time)을, 프랑스어권은 TUC(Temps Universel Coordonne)를 제안했으며,\n결국 두 언어 모두 C, T, U로 구성되어 있는 것에 착안해 UTC로 약어를 결정하기로 했다.\n\n뭐가 다른거지\n- https://ohgyun.com/416\n\n## 정규식 적용\n\n`정규식.test(텍스트);`\n\n```javascript\nexport const emailMatchRegex = new RegExp(\n  '^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$',\n  'i'\n);\n\nconst isEmailForamt = (text: string) => emailMatchRegex.test(text);\n```\n\n## 객체의 key 값에 원하는 변수값을 할당하고 싶은 경우\n\n```javascript\n  WeverseAdminRoles.map(role => {\n    return Object.assign(rolesObj, {[role]: roles.includes(role)});\n  })\n```\n\n-> [] 괄호를 사용하면 가능하다!\n\n## snakeToCamel\n\n``` javascript\nexport const snakeToCamel = (str: string) => str.toLowerCase().replace(/[-_]([a-z])/g, (_, group) => group.toUpperCase());\n```\n","slug":"Javascript","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T13:17:34.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hpz0009bqwx73k87hrc","content":"<h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><h2 id=\"Object-Literal-lookups\"><a href=\"#Object-Literal-lookups\" class=\"headerlink\" title=\"Object Literal lookups\"></a>Object Literal lookups</h2><p>switch문과 같은 조건문 대신에 사용하면 좋은 패턴이다!<br><a href=\"https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\">참조</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"string\">&#x27;Lemonade&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;Default item&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"default-case-없이-사용할-경우\"><a href=\"#default-case-없이-사용할-경우\" class=\"headerlink\" title=\"default case 없이 사용할 경우\"></a>default case 없이 사용할 경우</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"string\">&#x27;Lemonade&#x27;</span></span><br><span class=\"line\">  &#125;[type];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"함수로-사용한-경우\"><a href=\"#함수로-사용한-경우\" class=\"headerlink\" title=\"함수로 사용한 경우\"></a>함수로 사용한 경우</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">drinks[type]();</span><br></pre></td></tr></table></figure>\n<h3 id=\"basic-solution\"><a href=\"#basic-solution\" class=\"headerlink\" title=\"basic solution\"></a>basic solution</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drink;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// invoke it</span></span><br><span class=\"line\">  (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return a String with chosen drink</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Typescript-참고\"><a href=\"#Typescript-참고\" class=\"headerlink\" title=\"Typescript 참고\"></a>Typescript 참고</h3><p><a href=\"https://github.com/microsoft/TypeScript/issues/35859\">https://github.com/microsoft/TypeScript/issues/35859</a></p>\n<h2 id=\"handler-네이밍\"><a href=\"#handler-네이밍\" class=\"headerlink\" title=\"handler 네이밍\"></a>handler 네이밍</h2><p>참고하자.</p>\n<ul>\n<li><a href=\"https://jaketrent.com/post/naming-event-handlers-react/\">https://jaketrent.com/post/naming-event-handlers-react/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers\">https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers</a></li>\n</ul>\n<h2 id=\"RORO-패턴\"><a href=\"#RORO-패턴\" class=\"headerlink\" title=\"RORO 패턴\"></a>RORO 패턴</h2><p><a href=\"https://www.freecodecamp.org/news/elegant-patterns-in-modern-javascript-roro-be01e7669cbd/\">참고</a></p>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><ul>\n<li><p>ISO?</p>\n<ul>\n<li>ISO 8601은 날짜와 시간의 표기에 관한 국제 표준 규격이다.</li>\n<li>YYYY-DDD (확장 형식) 또는 YYYYDDD (기본 형식)으로 표기한다.</li>\n<li>시간의 표기에는 쌍점을 쓴 hh:mm:ss (확장 형식) 또는 hhmmss (기본 형식)을 사용한다.</li>\n<li>날짜와 시간을 함께 표기할 때에는, 날짜와 시간 사이에 T를 넣어 표기한다.</li>\n<li>시간대를 표기할 때에는 Z또는 +/- 기호를 사용한다.<ul>\n<li>UTC 시간대에서는 시각 뒤에 Z를 붙인다.</li>\n<li><code>예) 1981-02-22T09:00Z 또는 19810222T0900Z : UTC 시간대에서의 1981년 2월 22일 오전 9시</code></li>\n<li>UTC 외의 시간대에서는 시각 뒤에 +- hh:mm, +- hhmm, +- hh 를 덧붙여 쓴다.</li>\n<li><code>예) 1981-02-22T09:00:00+09:00 : UTC+9 시간대에서의 1981년 2월 22일 오전 9시</code></li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString</a></li>\n</ul>\n</li>\n<li><p>UTC?</p>\n<ul>\n<li>실제로 국제 전기 통신 연합은 통일된 약자를 원했지만,<br>영어권의 사람들과 프랑스어권의 사람들은 각각 자신의 언어로 된 약자를 사용하길 원했다.<br>영어권은 CUT(Coordinated Universal Time)을, 프랑스어권은 TUC(Temps Universel Coordonne)를 제안했으며,<br>결국 두 언어 모두 C, T, U로 구성되어 있는 것에 착안해 UTC로 약어를 결정하기로 했다.</li>\n</ul>\n</li>\n</ul>\n<p>뭐가 다른거지</p>\n<ul>\n<li><a href=\"https://ohgyun.com/416\">https://ohgyun.com/416</a></li>\n</ul>\n<h2 id=\"정규식-적용\"><a href=\"#정규식-적용\" class=\"headerlink\" title=\"정규식 적용\"></a>정규식 적용</h2><p><code>정규식.test(텍스트);</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> emailMatchRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]&#123;2,3&#125;$&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;i&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isEmailForamt = <span class=\"function\">(<span class=\"params\">text: string</span>) =&gt;</span> emailMatchRegex.test(text);</span><br></pre></td></tr></table></figure>\n<h2 id=\"객체의-key-값에-원하는-변수값을-할당하고-싶은-경우\"><a href=\"#객체의-key-값에-원하는-변수값을-할당하고-싶은-경우\" class=\"headerlink\" title=\"객체의 key 값에 원하는 변수값을 할당하고 싶은 경우\"></a>객체의 key 값에 원하는 변수값을 할당하고 싶은 경우</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">WeverseAdminRoles.map(<span class=\"function\"><span class=\"params\">role</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(rolesObj, &#123;[role]: roles.includes(role)&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>-&gt; [] 괄호를 사용하면 가능하다!</p>\n<h2 id=\"snakeToCamel\"><a href=\"#snakeToCamel\" class=\"headerlink\" title=\"snakeToCamel\"></a>snakeToCamel</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> snakeToCamel = <span class=\"function\">(<span class=\"params\">str: string</span>) =&gt;</span> str.toLowerCase().replace(<span class=\"regexp\">/[-_]([a-z])/g</span>, <span class=\"function\">(<span class=\"params\">_, group</span>) =&gt;</span> group.toUpperCase());</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><h2 id=\"Object-Literal-lookups\"><a href=\"#Object-Literal-lookups\" class=\"headerlink\" title=\"Object Literal lookups\"></a>Object Literal lookups</h2><p>switch문과 같은 조건문 대신에 사용하면 좋은 패턴이다!<br><a href=\"https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\">참조</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"string\">&#x27;Lemonade&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"string\">&#x27;Default item&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"default-case-없이-사용할-경우\"><a href=\"#default-case-없이-사용할-경우\" class=\"headerlink\" title=\"default case 없이 사용할 경우\"></a>default case 없이 사용할 경우</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"string\">&#x27;Lemonade&#x27;</span></span><br><span class=\"line\">  &#125;[type];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"함수로-사용한-경우\"><a href=\"#함수로-사용한-경우\" class=\"headerlink\" title=\"함수로 사용한 경우\"></a>함수로 사용한 경우</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">drinks[type]();</span><br></pre></td></tr></table></figure>\n<h3 id=\"basic-solution\"><a href=\"#basic-solution\" class=\"headerlink\" title=\"basic solution\"></a>basic solution</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span> (<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drink;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;coke&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pepsi&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;lemonade&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;default&#x27;</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// invoke it</span></span><br><span class=\"line\">  (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return a String with chosen drink</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Typescript-참고\"><a href=\"#Typescript-참고\" class=\"headerlink\" title=\"Typescript 참고\"></a>Typescript 참고</h3><p><a href=\"https://github.com/microsoft/TypeScript/issues/35859\">https://github.com/microsoft/TypeScript/issues/35859</a></p>\n<h2 id=\"handler-네이밍\"><a href=\"#handler-네이밍\" class=\"headerlink\" title=\"handler 네이밍\"></a>handler 네이밍</h2><p>참고하자.</p>\n<ul>\n<li><a href=\"https://jaketrent.com/post/naming-event-handlers-react/\">https://jaketrent.com/post/naming-event-handlers-react/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers\">https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers</a></li>\n</ul>\n<h2 id=\"RORO-패턴\"><a href=\"#RORO-패턴\" class=\"headerlink\" title=\"RORO 패턴\"></a>RORO 패턴</h2><p><a href=\"https://www.freecodecamp.org/news/elegant-patterns-in-modern-javascript-roro-be01e7669cbd/\">참고</a></p>\n<h2 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h2><ul>\n<li><p>ISO?</p>\n<ul>\n<li>ISO 8601은 날짜와 시간의 표기에 관한 국제 표준 규격이다.</li>\n<li>YYYY-DDD (확장 형식) 또는 YYYYDDD (기본 형식)으로 표기한다.</li>\n<li>시간의 표기에는 쌍점을 쓴 hh:mm:ss (확장 형식) 또는 hhmmss (기본 형식)을 사용한다.</li>\n<li>날짜와 시간을 함께 표기할 때에는, 날짜와 시간 사이에 T를 넣어 표기한다.</li>\n<li>시간대를 표기할 때에는 Z또는 +/- 기호를 사용한다.<ul>\n<li>UTC 시간대에서는 시각 뒤에 Z를 붙인다.</li>\n<li><code>예) 1981-02-22T09:00Z 또는 19810222T0900Z : UTC 시간대에서의 1981년 2월 22일 오전 9시</code></li>\n<li>UTC 외의 시간대에서는 시각 뒤에 +- hh:mm, +- hhmm, +- hh 를 덧붙여 쓴다.</li>\n<li><code>예) 1981-02-22T09:00:00+09:00 : UTC+9 시간대에서의 1981년 2월 22일 오전 9시</code></li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString</a></li>\n</ul>\n</li>\n<li><p>UTC?</p>\n<ul>\n<li>실제로 국제 전기 통신 연합은 통일된 약자를 원했지만,<br>영어권의 사람들과 프랑스어권의 사람들은 각각 자신의 언어로 된 약자를 사용하길 원했다.<br>영어권은 CUT(Coordinated Universal Time)을, 프랑스어권은 TUC(Temps Universel Coordonne)를 제안했으며,<br>결국 두 언어 모두 C, T, U로 구성되어 있는 것에 착안해 UTC로 약어를 결정하기로 했다.</li>\n</ul>\n</li>\n</ul>\n<p>뭐가 다른거지</p>\n<ul>\n<li><a href=\"https://ohgyun.com/416\">https://ohgyun.com/416</a></li>\n</ul>\n<h2 id=\"정규식-적용\"><a href=\"#정규식-적용\" class=\"headerlink\" title=\"정규식 적용\"></a>정규식 적용</h2><p><code>정규식.test(텍스트);</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> emailMatchRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]&#123;2,3&#125;$&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;i&#x27;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isEmailForamt = <span class=\"function\">(<span class=\"params\">text: string</span>) =&gt;</span> emailMatchRegex.test(text);</span><br></pre></td></tr></table></figure>\n<h2 id=\"객체의-key-값에-원하는-변수값을-할당하고-싶은-경우\"><a href=\"#객체의-key-값에-원하는-변수값을-할당하고-싶은-경우\" class=\"headerlink\" title=\"객체의 key 값에 원하는 변수값을 할당하고 싶은 경우\"></a>객체의 key 값에 원하는 변수값을 할당하고 싶은 경우</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">WeverseAdminRoles.map(<span class=\"function\"><span class=\"params\">role</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(rolesObj, &#123;[role]: roles.includes(role)&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>-&gt; [] 괄호를 사용하면 가능하다!</p>\n<h2 id=\"snakeToCamel\"><a href=\"#snakeToCamel\" class=\"headerlink\" title=\"snakeToCamel\"></a>snakeToCamel</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> snakeToCamel = <span class=\"function\">(<span class=\"params\">str: string</span>) =&gt;</span> str.toLowerCase().replace(<span class=\"regexp\">/[-_]([a-z])/g</span>, <span class=\"function\">(<span class=\"params\">_, group</span>) =&gt;</span> group.toUpperCase());</span><br></pre></td></tr></table></figure>"},{"title":"React","_content":"\n# React\n\n## [React의 탄생 배경과 핵심 개념](https://soldonii.tistory.com/100)\n\n업무를 진행하면서 항상 고민할것\n\n- 컴포넌트를 얼마나 작은 단위로 쪼갤 것인지, 어떻게 재사용 가능한 컴포넌트를 만들 것인지\n- state는 가상 DOM 내에 여러 곳에 존재할 수 있는데, 이를 어디에 위치시킬지\n- state가 변경되었을 때, 어떤 부분이 re-rendering 되어야 하는지\n\n## React 가 렌더링을 수행하는 시점\n\n1. Props가 변경된 경우 → 원시값이 아닌 객체나 배열, `함수`의 경우, `얕은 비교`를 진행하기 때문에 매 랜더시 쓸데없는 얕은 평가를 진행함 → 불필요한 렌더링이 이루어질 수 있음\n    - children 또한 props이므로 ReactElement의 경우에도 비교 대상이다.\n2. State가 변경된 경우\n3. [forceUpdate()](https://reactjs.org/docs/react-component.html#forceupdate)를 싱행한 경우\n4. `부모 컴포넌트가 렌더링 된 경우`\n\n## hooks 정리\n\n- [useState](/useState)\n- [useEffect](/useEffect)\n- [useCallback](/useCallback)\n- [useRef](/useRef)\n- [useMemo](/useMemo)\n\n## 왜 함수형 컴포넌트인가?\n\n[참고](https://boxfoxs.tistory.com/395)\n\n## 클래스형 컴포넌트와 함수형 컴포넌트의 차이\n\n기존엔 라이프사이클 컨트롤 유무였지만, 함수형 컴포넌트에서도 hook(16.8 버전 이후)을 이용하면 된다.\n\n또한 클래스형 컴포넌트에는 props를 재사용 하기 때문에 의도와 다르게 동작하는 문제점이 있다.\n\n그외에도 가독성이 좋으며 테스트가 편하다.\n\n## React.FC를 왜 써야하는가에 대한 정리\n\n벨로퍼트님이 잘 정리해주셨다. [참고](https://velog.io/@velopert/create-typescript-react-component)\n\n그외에 함수형 컴포넌트 사용시 화살표 함수로 선언할지 아니면 function 키워드를 사용할지에 대해서도 정리되어있다.\n\n- React.FC를 사용하면 defaultProps를 사용해도 에러가 발생함.\n\n## Event handler convention\n\nhttps://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\n\n## useLayoutEffect\n\nDOM 관련된 effect를 컨트롤 할때는 사용하는걸 권장. DOM이 완전히 그려진 다음에 실행하는 effect.\n[참고](https://ko.reactjs.org/docs/hooks-reference.html#uselayouteffect)\n\n``` typescript\nuseLayoutEffect(() => {\n    if (postBodyRef.current && (postBodyRef.current.scrollHeight - 1 > postBodyRef.current.offsetHeight)) { // IE fix\n      setIsFolded(true);\n    }\n  }, [body]);\n```\n\n## Modal 구현할때\n\n[Portal](https://ko.reactjs.org/docs/portals.html) 이용하면 좋다!\n\n- https://velog.io/@velopert/react-portals\n","source":"_posts/React.md","raw":"---\ntitle: React\n---\n\n# React\n\n## [React의 탄생 배경과 핵심 개념](https://soldonii.tistory.com/100)\n\n업무를 진행하면서 항상 고민할것\n\n- 컴포넌트를 얼마나 작은 단위로 쪼갤 것인지, 어떻게 재사용 가능한 컴포넌트를 만들 것인지\n- state는 가상 DOM 내에 여러 곳에 존재할 수 있는데, 이를 어디에 위치시킬지\n- state가 변경되었을 때, 어떤 부분이 re-rendering 되어야 하는지\n\n## React 가 렌더링을 수행하는 시점\n\n1. Props가 변경된 경우 → 원시값이 아닌 객체나 배열, `함수`의 경우, `얕은 비교`를 진행하기 때문에 매 랜더시 쓸데없는 얕은 평가를 진행함 → 불필요한 렌더링이 이루어질 수 있음\n    - children 또한 props이므로 ReactElement의 경우에도 비교 대상이다.\n2. State가 변경된 경우\n3. [forceUpdate()](https://reactjs.org/docs/react-component.html#forceupdate)를 싱행한 경우\n4. `부모 컴포넌트가 렌더링 된 경우`\n\n## hooks 정리\n\n- [useState](/useState)\n- [useEffect](/useEffect)\n- [useCallback](/useCallback)\n- [useRef](/useRef)\n- [useMemo](/useMemo)\n\n## 왜 함수형 컴포넌트인가?\n\n[참고](https://boxfoxs.tistory.com/395)\n\n## 클래스형 컴포넌트와 함수형 컴포넌트의 차이\n\n기존엔 라이프사이클 컨트롤 유무였지만, 함수형 컴포넌트에서도 hook(16.8 버전 이후)을 이용하면 된다.\n\n또한 클래스형 컴포넌트에는 props를 재사용 하기 때문에 의도와 다르게 동작하는 문제점이 있다.\n\n그외에도 가독성이 좋으며 테스트가 편하다.\n\n## React.FC를 왜 써야하는가에 대한 정리\n\n벨로퍼트님이 잘 정리해주셨다. [참고](https://velog.io/@velopert/create-typescript-react-component)\n\n그외에 함수형 컴포넌트 사용시 화살표 함수로 선언할지 아니면 function 키워드를 사용할지에 대해서도 정리되어있다.\n\n- React.FC를 사용하면 defaultProps를 사용해도 에러가 발생함.\n\n## Event handler convention\n\nhttps://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\n\n## useLayoutEffect\n\nDOM 관련된 effect를 컨트롤 할때는 사용하는걸 권장. DOM이 완전히 그려진 다음에 실행하는 effect.\n[참고](https://ko.reactjs.org/docs/hooks-reference.html#uselayouteffect)\n\n``` typescript\nuseLayoutEffect(() => {\n    if (postBodyRef.current && (postBodyRef.current.scrollHeight - 1 > postBodyRef.current.offsetHeight)) { // IE fix\n      setIsFolded(true);\n    }\n  }, [body]);\n```\n\n## Modal 구현할때\n\n[Portal](https://ko.reactjs.org/docs/portals.html) 이용하면 좋다!\n\n- https://velog.io/@velopert/react-portals\n","slug":"React","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-21T16:29:23.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq0000bbqwx24uc7p21","content":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"React의-탄생-배경과-핵심-개념\"><a href=\"#React의-탄생-배경과-핵심-개념\" class=\"headerlink\" title=\"React의 탄생 배경과 핵심 개념\"></a><a href=\"https://soldonii.tistory.com/100\">React의 탄생 배경과 핵심 개념</a></h2><p>업무를 진행하면서 항상 고민할것</p>\n<ul>\n<li>컴포넌트를 얼마나 작은 단위로 쪼갤 것인지, 어떻게 재사용 가능한 컴포넌트를 만들 것인지</li>\n<li>state는 가상 DOM 내에 여러 곳에 존재할 수 있는데, 이를 어디에 위치시킬지</li>\n<li>state가 변경되었을 때, 어떤 부분이 re-rendering 되어야 하는지</li>\n</ul>\n<h2 id=\"React-가-렌더링을-수행하는-시점\"><a href=\"#React-가-렌더링을-수행하는-시점\" class=\"headerlink\" title=\"React 가 렌더링을 수행하는 시점\"></a>React 가 렌더링을 수행하는 시점</h2><ol>\n<li>Props가 변경된 경우 → 원시값이 아닌 객체나 배열, <code>함수</code>의 경우, <code>얕은 비교</code>를 진행하기 때문에 매 랜더시 쓸데없는 얕은 평가를 진행함 → 불필요한 렌더링이 이루어질 수 있음<ul>\n<li>children 또한 props이므로 ReactElement의 경우에도 비교 대상이다.</li>\n</ul>\n</li>\n<li>State가 변경된 경우</li>\n<li><a href=\"https://reactjs.org/docs/react-component.html#forceupdate\">forceUpdate()</a>를 싱행한 경우</li>\n<li><code>부모 컴포넌트가 렌더링 된 경우</code></li>\n</ol>\n<h2 id=\"hooks-정리\"><a href=\"#hooks-정리\" class=\"headerlink\" title=\"hooks 정리\"></a>hooks 정리</h2><ul>\n<li><a href=\"/useState\">useState</a></li>\n<li><a href=\"/useEffect\">useEffect</a></li>\n<li><a href=\"/useCallback\">useCallback</a></li>\n<li><a href=\"/useRef\">useRef</a></li>\n<li><a href=\"/useMemo\">useMemo</a></li>\n</ul>\n<h2 id=\"왜-함수형-컴포넌트인가\"><a href=\"#왜-함수형-컴포넌트인가\" class=\"headerlink\" title=\"왜 함수형 컴포넌트인가?\"></a>왜 함수형 컴포넌트인가?</h2><p><a href=\"https://boxfoxs.tistory.com/395\">참고</a></p>\n<h2 id=\"클래스형-컴포넌트와-함수형-컴포넌트의-차이\"><a href=\"#클래스형-컴포넌트와-함수형-컴포넌트의-차이\" class=\"headerlink\" title=\"클래스형 컴포넌트와 함수형 컴포넌트의 차이\"></a>클래스형 컴포넌트와 함수형 컴포넌트의 차이</h2><p>기존엔 라이프사이클 컨트롤 유무였지만, 함수형 컴포넌트에서도 hook(16.8 버전 이후)을 이용하면 된다.</p>\n<p>또한 클래스형 컴포넌트에는 props를 재사용 하기 때문에 의도와 다르게 동작하는 문제점이 있다.</p>\n<p>그외에도 가독성이 좋으며 테스트가 편하다.</p>\n<h2 id=\"React-FC를-왜-써야하는가에-대한-정리\"><a href=\"#React-FC를-왜-써야하는가에-대한-정리\" class=\"headerlink\" title=\"React.FC를 왜 써야하는가에 대한 정리\"></a>React.FC를 왜 써야하는가에 대한 정리</h2><p>벨로퍼트님이 잘 정리해주셨다. <a href=\"https://velog.io/@velopert/create-typescript-react-component\">참고</a></p>\n<p>그외에 함수형 컴포넌트 사용시 화살표 함수로 선언할지 아니면 function 키워드를 사용할지에 대해서도 정리되어있다.</p>\n<ul>\n<li>React.FC를 사용하면 defaultProps를 사용해도 에러가 발생함.</li>\n</ul>\n<h2 id=\"Event-handler-convention\"><a href=\"#Event-handler-convention\" class=\"headerlink\" title=\"Event handler convention\"></a>Event handler convention</h2><p><a href=\"https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\">https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364</a></p>\n<h2 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h2><p>DOM 관련된 effect를 컨트롤 할때는 사용하는걸 권장. DOM이 완전히 그려진 다음에 실행하는 effect.<br><a href=\"https://ko.reactjs.org/docs/hooks-reference.html#uselayouteffect\">참고</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">useLayoutEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postBodyRef.current &amp;&amp; (postBodyRef.current.scrollHeight - <span class=\"number\">1</span> &gt; postBodyRef.current.offsetHeight)) &#123; <span class=\"comment\">// IE fix</span></span><br><span class=\"line\">      setIsFolded(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [body]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modal-구현할때\"><a href=\"#Modal-구현할때\" class=\"headerlink\" title=\"Modal 구현할때\"></a>Modal 구현할때</h2><p><a href=\"https://ko.reactjs.org/docs/portals.html\">Portal</a> 이용하면 좋다!</p>\n<ul>\n<li><a href=\"https://velog.io/@velopert/react-portals\">https://velog.io/@velopert/react-portals</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"React의-탄생-배경과-핵심-개념\"><a href=\"#React의-탄생-배경과-핵심-개념\" class=\"headerlink\" title=\"React의 탄생 배경과 핵심 개념\"></a><a href=\"https://soldonii.tistory.com/100\">React의 탄생 배경과 핵심 개념</a></h2><p>업무를 진행하면서 항상 고민할것</p>\n<ul>\n<li>컴포넌트를 얼마나 작은 단위로 쪼갤 것인지, 어떻게 재사용 가능한 컴포넌트를 만들 것인지</li>\n<li>state는 가상 DOM 내에 여러 곳에 존재할 수 있는데, 이를 어디에 위치시킬지</li>\n<li>state가 변경되었을 때, 어떤 부분이 re-rendering 되어야 하는지</li>\n</ul>\n<h2 id=\"React-가-렌더링을-수행하는-시점\"><a href=\"#React-가-렌더링을-수행하는-시점\" class=\"headerlink\" title=\"React 가 렌더링을 수행하는 시점\"></a>React 가 렌더링을 수행하는 시점</h2><ol>\n<li>Props가 변경된 경우 → 원시값이 아닌 객체나 배열, <code>함수</code>의 경우, <code>얕은 비교</code>를 진행하기 때문에 매 랜더시 쓸데없는 얕은 평가를 진행함 → 불필요한 렌더링이 이루어질 수 있음<ul>\n<li>children 또한 props이므로 ReactElement의 경우에도 비교 대상이다.</li>\n</ul>\n</li>\n<li>State가 변경된 경우</li>\n<li><a href=\"https://reactjs.org/docs/react-component.html#forceupdate\">forceUpdate()</a>를 싱행한 경우</li>\n<li><code>부모 컴포넌트가 렌더링 된 경우</code></li>\n</ol>\n<h2 id=\"hooks-정리\"><a href=\"#hooks-정리\" class=\"headerlink\" title=\"hooks 정리\"></a>hooks 정리</h2><ul>\n<li><a href=\"/useState\">useState</a></li>\n<li><a href=\"/useEffect\">useEffect</a></li>\n<li><a href=\"/useCallback\">useCallback</a></li>\n<li><a href=\"/useRef\">useRef</a></li>\n<li><a href=\"/useMemo\">useMemo</a></li>\n</ul>\n<h2 id=\"왜-함수형-컴포넌트인가\"><a href=\"#왜-함수형-컴포넌트인가\" class=\"headerlink\" title=\"왜 함수형 컴포넌트인가?\"></a>왜 함수형 컴포넌트인가?</h2><p><a href=\"https://boxfoxs.tistory.com/395\">참고</a></p>\n<h2 id=\"클래스형-컴포넌트와-함수형-컴포넌트의-차이\"><a href=\"#클래스형-컴포넌트와-함수형-컴포넌트의-차이\" class=\"headerlink\" title=\"클래스형 컴포넌트와 함수형 컴포넌트의 차이\"></a>클래스형 컴포넌트와 함수형 컴포넌트의 차이</h2><p>기존엔 라이프사이클 컨트롤 유무였지만, 함수형 컴포넌트에서도 hook(16.8 버전 이후)을 이용하면 된다.</p>\n<p>또한 클래스형 컴포넌트에는 props를 재사용 하기 때문에 의도와 다르게 동작하는 문제점이 있다.</p>\n<p>그외에도 가독성이 좋으며 테스트가 편하다.</p>\n<h2 id=\"React-FC를-왜-써야하는가에-대한-정리\"><a href=\"#React-FC를-왜-써야하는가에-대한-정리\" class=\"headerlink\" title=\"React.FC를 왜 써야하는가에 대한 정리\"></a>React.FC를 왜 써야하는가에 대한 정리</h2><p>벨로퍼트님이 잘 정리해주셨다. <a href=\"https://velog.io/@velopert/create-typescript-react-component\">참고</a></p>\n<p>그외에 함수형 컴포넌트 사용시 화살표 함수로 선언할지 아니면 function 키워드를 사용할지에 대해서도 정리되어있다.</p>\n<ul>\n<li>React.FC를 사용하면 defaultProps를 사용해도 에러가 발생함.</li>\n</ul>\n<h2 id=\"Event-handler-convention\"><a href=\"#Event-handler-convention\" class=\"headerlink\" title=\"Event handler convention\"></a>Event handler convention</h2><p><a href=\"https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\">https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364</a></p>\n<h2 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h2><p>DOM 관련된 effect를 컨트롤 할때는 사용하는걸 권장. DOM이 완전히 그려진 다음에 실행하는 effect.<br><a href=\"https://ko.reactjs.org/docs/hooks-reference.html#uselayouteffect\">참고</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">useLayoutEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (postBodyRef.current &amp;&amp; (postBodyRef.current.scrollHeight - <span class=\"number\">1</span> &gt; postBodyRef.current.offsetHeight)) &#123; <span class=\"comment\">// IE fix</span></span><br><span class=\"line\">      setIsFolded(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, [body]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modal-구현할때\"><a href=\"#Modal-구현할때\" class=\"headerlink\" title=\"Modal 구현할때\"></a>Modal 구현할때</h2><p><a href=\"https://ko.reactjs.org/docs/portals.html\">Portal</a> 이용하면 좋다!</p>\n<ul>\n<li><a href=\"https://velog.io/@velopert/react-portals\">https://velog.io/@velopert/react-portals</a></li>\n</ul>\n"},{"title":"Redux","_content":"\n# Redux\n\n## reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!\n\n\n","source":"_posts/Redux.md","raw":"---\ntitle: Redux\n---\n\n# Redux\n\n## reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!\n\n\n","slug":"Redux","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq0000cbqwxdzjn7w0w","content":"<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><h2 id=\"reducer에서-push같은걸-사용해서-상태를-바꾸면-우리가-상태값이-바뀐걸-모르게됨-따라서-불변-객체로-사용하는게-리덕스에서의-기본\"><a href=\"#reducer에서-push같은걸-사용해서-상태를-바꾸면-우리가-상태값이-바뀐걸-모르게됨-따라서-불변-객체로-사용하는게-리덕스에서의-기본\" class=\"headerlink\" title=\"reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!\"></a>reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><h2 id=\"reducer에서-push같은걸-사용해서-상태를-바꾸면-우리가-상태값이-바뀐걸-모르게됨-따라서-불변-객체로-사용하는게-리덕스에서의-기본\"><a href=\"#reducer에서-push같은걸-사용해서-상태를-바꾸면-우리가-상태값이-바뀐걸-모르게됨-따라서-불변-객체로-사용하는게-리덕스에서의-기본\" class=\"headerlink\" title=\"reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!\"></a>reducer에서 push같은걸 사용해서 상태를 바꾸면 우리가 상태값이 바뀐걸 모르게됨. 따라서 불변 객체로 사용하는게 리덕스에서의 기본!</h2>"},{"title":"ReduxThunk","_content":"\n# Redux-thunk\n\nmiddle-ware\n\nRedux에서 비동기를 도와주는 역할\n\n`applyMiddleware(thunk)` 로 스토어에 추가\n\n- 함수를 return 하는 액션\n- api fetch\n","source":"_posts/ReduxThunk.md","raw":"---\ntitle: ReduxThunk\n---\n\n# Redux-thunk\n\nmiddle-ware\n\nRedux에서 비동기를 도와주는 역할\n\n`applyMiddleware(thunk)` 로 스토어에 추가\n\n- 함수를 return 하는 액션\n- api fetch\n","slug":"ReduxThunk","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq1000ebqwx6br1ffe6","content":"<h1 id=\"Redux-thunk\"><a href=\"#Redux-thunk\" class=\"headerlink\" title=\"Redux-thunk\"></a>Redux-thunk</h1><p>middle-ware</p>\n<p>Redux에서 비동기를 도와주는 역할</p>\n<p><code>applyMiddleware(thunk)</code> 로 스토어에 추가</p>\n<ul>\n<li>함수를 return 하는 액션</li>\n<li>api fetch</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Redux-thunk\"><a href=\"#Redux-thunk\" class=\"headerlink\" title=\"Redux-thunk\"></a>Redux-thunk</h1><p>middle-ware</p>\n<p>Redux에서 비동기를 도와주는 역할</p>\n<p><code>applyMiddleware(thunk)</code> 로 스토어에 추가</p>\n<ul>\n<li>함수를 return 하는 액션</li>\n<li>api fetch</li>\n</ul>\n"},{"title":"Router","_content":"\n# Router\n\n## historyApiFallback\n\n서버에 존재하지 않는 path를 입력시 `Cannot GET /something`과 같은 에러가 나는데 원인은 서버쪽 라우터에서 요청에 맞는 패스가 없기 때문에 발생\n\nwebpack-dev-server에 추가해서 해결가능하다.\n\n``` javascript\n  devServer: {\n    historyApiFallback: {\n      index: 'index.html',\n    },\n  },\n```\n","source":"_posts/Router.md","raw":"---\ntitle: Router\n---\n\n# Router\n\n## historyApiFallback\n\n서버에 존재하지 않는 path를 입력시 `Cannot GET /something`과 같은 에러가 나는데 원인은 서버쪽 라우터에서 요청에 맞는 패스가 없기 때문에 발생\n\nwebpack-dev-server에 추가해서 해결가능하다.\n\n``` javascript\n  devServer: {\n    historyApiFallback: {\n      index: 'index.html',\n    },\n  },\n```\n","slug":"Router","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq1000gbqwxg22p7zsl","content":"<h1 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h1><h2 id=\"historyApiFallback\"><a href=\"#historyApiFallback\" class=\"headerlink\" title=\"historyApiFallback\"></a>historyApiFallback</h2><p>서버에 존재하지 않는 path를 입력시 <code>Cannot GET /something</code>과 같은 에러가 나는데 원인은 서버쪽 라우터에서 요청에 맞는 패스가 없기 때문에 발생</p>\n<p>webpack-dev-server에 추가해서 해결가능하다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  historyApiFallback: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h1><h2 id=\"historyApiFallback\"><a href=\"#historyApiFallback\" class=\"headerlink\" title=\"historyApiFallback\"></a>historyApiFallback</h2><p>서버에 존재하지 않는 path를 입력시 <code>Cannot GET /something</code>과 같은 에러가 나는데 원인은 서버쪽 라우터에서 요청에 맞는 패스가 없기 때문에 발생</p>\n<p>webpack-dev-server에 추가해서 해결가능하다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  historyApiFallback: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>"},{"title":"RxJS Quick Start, 책 정리","date":"2019-03-07T16:52:47.000Z","_content":"\n# RxJS Quick Start, 책 정리\n\n## RxJS를 시작하기 전에\n\n- 구현  자체에만 초점을 맞추는게 아니라, 유지보수도 생각해야함\n- 결과물(프레임워크)를 잘 사용하는 것보다 그 기술의 결과물이 어떤 고민의 산물인지 아는 것이 중요함.\n\n### 1.1 웹 환경의 변화\n\n- Ajax\n  - 이전에는 서버 데이터를 받기위해 매번 브라우저 페이지를 새로 요청해야했었는데,\n    - Ajax 도입으로 새로운 페이지 요청없이 데이터를 가져올 수 있게 되고, 화면에 바로 반영할 수 있게 됨\n- SPA\n- Web Storage, Web Worker -> 브라우저에서 지원\n\n### 1.2 웹 개발 복잡도 증가\n\n- 다양한 기능들이 하나의 페이지에 존재하게 됨\n  - 서로 영향을 주고, 복잡하게 얽힘\n\n### 1.3 웹 애플리케이션은 상태 머신이다.\n\n- input과 기존 state와 logic에 따른 state 변경이 이루어짐\n- 웹 애플리케이션은 이러한 기능들의 집합임 -> 웹애플리케이션도 하나의 큰 상태머신이다.\n\n### 1.4 웹 애플리케이션 오류가 발생하는 경우\n\n- 프로그램 오류 : 유저의 입력에 따라 프로그램이 예상하는 결과를 얻지 못하는 것\n- 웹애플리케이션을 하나의 state machine으로 본다면, 이를 구성하는 크고 작은 단위인 클래스 또는 컴포넌트의 상태 변화에 따라 웹 애플리케이션의 상태가 결정됨\n  - 각 구성 요소의 상태를 어떻게 관리하느냐가 중요\n- 프로그램에서 오류가 나타나는 경우\n  - 입력된 값이나 타입을 잘못 전달한 경우\n  - 입력된 값이 명확하지 않은 경우\n  - 입력된 값을 준비되지 않은 상태에서 전달할 경우\n  - 의존 관계에 있는 구성요소들의 상태 변화를 함께 전달하지 않아서 발생한 경우\n  - 구성요소 간의 호출 순서에 의존도가 있는 경우에 호출 순서가 틀린 경우\n  - 조건문에 의한 로직처리를 잘못한 경우\n  - 로직의 연산을 잘못한 경우\n  - 등등\n- 하지만 웹 애플리케이션은 크게 세가지 요소에서 오류가 발생할 수 있음\n  1. 입력 오류\n     - 입력값의 결과가 외부로부터 전달받는 경우\n  2. 상태 오류\n     - 상태 변화를 정확하게 전달하지 못한 경우\n       - 컴포넌트 간에 의존도가 있는 경우\n       - 호출 순서에 의존도가 있는 경우\n  3. 로직 오류\n\n### 1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?\n\n- RxJS(ReactiveX for Javascript): Microsoft가 만든 라이브러리\n- 입력오류, 상태오류, 로직 오류로 발생하는 문제를 효과적으로 처리하기 위한 고민의 산출물\n  - 오류가 발생하지 않는 애플리케이션을 만들기 위해 일관된 방식으로 안전하게 데이터 흐름을 처리하도록 도와주는 라이브러리\n- 상태 전파를 위한 리엑티브 프로그래밍 + 로직 오류를 방지하기 위한 함수형 프로그래밍","source":"_posts/RxJS-정리1.md","raw":"---\ntitle: RxJS Quick Start, 책 정리\ndate: 2019-03-08 01:52:47\ncategories:\n    - RxJS\ntags:\n    - RxJ\n---\n\n# RxJS Quick Start, 책 정리\n\n## RxJS를 시작하기 전에\n\n- 구현  자체에만 초점을 맞추는게 아니라, 유지보수도 생각해야함\n- 결과물(프레임워크)를 잘 사용하는 것보다 그 기술의 결과물이 어떤 고민의 산물인지 아는 것이 중요함.\n\n### 1.1 웹 환경의 변화\n\n- Ajax\n  - 이전에는 서버 데이터를 받기위해 매번 브라우저 페이지를 새로 요청해야했었는데,\n    - Ajax 도입으로 새로운 페이지 요청없이 데이터를 가져올 수 있게 되고, 화면에 바로 반영할 수 있게 됨\n- SPA\n- Web Storage, Web Worker -> 브라우저에서 지원\n\n### 1.2 웹 개발 복잡도 증가\n\n- 다양한 기능들이 하나의 페이지에 존재하게 됨\n  - 서로 영향을 주고, 복잡하게 얽힘\n\n### 1.3 웹 애플리케이션은 상태 머신이다.\n\n- input과 기존 state와 logic에 따른 state 변경이 이루어짐\n- 웹 애플리케이션은 이러한 기능들의 집합임 -> 웹애플리케이션도 하나의 큰 상태머신이다.\n\n### 1.4 웹 애플리케이션 오류가 발생하는 경우\n\n- 프로그램 오류 : 유저의 입력에 따라 프로그램이 예상하는 결과를 얻지 못하는 것\n- 웹애플리케이션을 하나의 state machine으로 본다면, 이를 구성하는 크고 작은 단위인 클래스 또는 컴포넌트의 상태 변화에 따라 웹 애플리케이션의 상태가 결정됨\n  - 각 구성 요소의 상태를 어떻게 관리하느냐가 중요\n- 프로그램에서 오류가 나타나는 경우\n  - 입력된 값이나 타입을 잘못 전달한 경우\n  - 입력된 값이 명확하지 않은 경우\n  - 입력된 값을 준비되지 않은 상태에서 전달할 경우\n  - 의존 관계에 있는 구성요소들의 상태 변화를 함께 전달하지 않아서 발생한 경우\n  - 구성요소 간의 호출 순서에 의존도가 있는 경우에 호출 순서가 틀린 경우\n  - 조건문에 의한 로직처리를 잘못한 경우\n  - 로직의 연산을 잘못한 경우\n  - 등등\n- 하지만 웹 애플리케이션은 크게 세가지 요소에서 오류가 발생할 수 있음\n  1. 입력 오류\n     - 입력값의 결과가 외부로부터 전달받는 경우\n  2. 상태 오류\n     - 상태 변화를 정확하게 전달하지 못한 경우\n       - 컴포넌트 간에 의존도가 있는 경우\n       - 호출 순서에 의존도가 있는 경우\n  3. 로직 오류\n\n### 1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?\n\n- RxJS(ReactiveX for Javascript): Microsoft가 만든 라이브러리\n- 입력오류, 상태오류, 로직 오류로 발생하는 문제를 효과적으로 처리하기 위한 고민의 산출물\n  - 오류가 발생하지 않는 애플리케이션을 만들기 위해 일관된 방식으로 안전하게 데이터 흐름을 처리하도록 도와주는 라이브러리\n- 상태 전파를 위한 리엑티브 프로그래밍 + 로직 오류를 방지하기 위한 함수형 프로그래밍","slug":"RxJS-정리1","published":1,"updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq2000jbqwxfa4yfti7","content":"<h1 id=\"RxJS-Quick-Start-책-정리\"><a href=\"#RxJS-Quick-Start-책-정리\" class=\"headerlink\" title=\"RxJS Quick Start, 책 정리\"></a>RxJS Quick Start, 책 정리</h1><h2 id=\"RxJS를-시작하기-전에\"><a href=\"#RxJS를-시작하기-전에\" class=\"headerlink\" title=\"RxJS를 시작하기 전에\"></a>RxJS를 시작하기 전에</h2><ul>\n<li>구현  자체에만 초점을 맞추는게 아니라, 유지보수도 생각해야함</li>\n<li>결과물(프레임워크)를 잘 사용하는 것보다 그 기술의 결과물이 어떤 고민의 산물인지 아는 것이 중요함.</li>\n</ul>\n<h3 id=\"1-1-웹-환경의-변화\"><a href=\"#1-1-웹-환경의-변화\" class=\"headerlink\" title=\"1.1 웹 환경의 변화\"></a>1.1 웹 환경의 변화</h3><ul>\n<li>Ajax<ul>\n<li>이전에는 서버 데이터를 받기위해 매번 브라우저 페이지를 새로 요청해야했었는데,<ul>\n<li>Ajax 도입으로 새로운 페이지 요청없이 데이터를 가져올 수 있게 되고, 화면에 바로 반영할 수 있게 됨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SPA</li>\n<li>Web Storage, Web Worker -&gt; 브라우저에서 지원</li>\n</ul>\n<h3 id=\"1-2-웹-개발-복잡도-증가\"><a href=\"#1-2-웹-개발-복잡도-증가\" class=\"headerlink\" title=\"1.2 웹 개발 복잡도 증가\"></a>1.2 웹 개발 복잡도 증가</h3><ul>\n<li>다양한 기능들이 하나의 페이지에 존재하게 됨<ul>\n<li>서로 영향을 주고, 복잡하게 얽힘</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-웹-애플리케이션은-상태-머신이다\"><a href=\"#1-3-웹-애플리케이션은-상태-머신이다\" class=\"headerlink\" title=\"1.3 웹 애플리케이션은 상태 머신이다.\"></a>1.3 웹 애플리케이션은 상태 머신이다.</h3><ul>\n<li>input과 기존 state와 logic에 따른 state 변경이 이루어짐</li>\n<li>웹 애플리케이션은 이러한 기능들의 집합임 -&gt; 웹애플리케이션도 하나의 큰 상태머신이다.</li>\n</ul>\n<h3 id=\"1-4-웹-애플리케이션-오류가-발생하는-경우\"><a href=\"#1-4-웹-애플리케이션-오류가-발생하는-경우\" class=\"headerlink\" title=\"1.4 웹 애플리케이션 오류가 발생하는 경우\"></a>1.4 웹 애플리케이션 오류가 발생하는 경우</h3><ul>\n<li>프로그램 오류 : 유저의 입력에 따라 프로그램이 예상하는 결과를 얻지 못하는 것</li>\n<li>웹애플리케이션을 하나의 state machine으로 본다면, 이를 구성하는 크고 작은 단위인 클래스 또는 컴포넌트의 상태 변화에 따라 웹 애플리케이션의 상태가 결정됨<ul>\n<li>각 구성 요소의 상태를 어떻게 관리하느냐가 중요</li>\n</ul>\n</li>\n<li>프로그램에서 오류가 나타나는 경우<ul>\n<li>입력된 값이나 타입을 잘못 전달한 경우</li>\n<li>입력된 값이 명확하지 않은 경우</li>\n<li>입력된 값을 준비되지 않은 상태에서 전달할 경우</li>\n<li>의존 관계에 있는 구성요소들의 상태 변화를 함께 전달하지 않아서 발생한 경우</li>\n<li>구성요소 간의 호출 순서에 의존도가 있는 경우에 호출 순서가 틀린 경우</li>\n<li>조건문에 의한 로직처리를 잘못한 경우</li>\n<li>로직의 연산을 잘못한 경우</li>\n<li>등등</li>\n</ul>\n</li>\n<li>하지만 웹 애플리케이션은 크게 세가지 요소에서 오류가 발생할 수 있음<ol>\n<li>입력 오류<ul>\n<li>입력값의 결과가 외부로부터 전달받는 경우</li>\n</ul>\n</li>\n<li>상태 오류<ul>\n<li>상태 변화를 정확하게 전달하지 못한 경우<ul>\n<li>컴포넌트 간에 의존도가 있는 경우</li>\n<li>호출 순서에 의존도가 있는 경우</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>로직 오류</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-5-RxJS는-무엇인가-그리고-웹-애플리케이션과-무슨-관련이-있나\"><a href=\"#1-5-RxJS는-무엇인가-그리고-웹-애플리케이션과-무슨-관련이-있나\" class=\"headerlink\" title=\"1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?\"></a>1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?</h3><ul>\n<li>RxJS(ReactiveX for Javascript): Microsoft가 만든 라이브러리</li>\n<li>입력오류, 상태오류, 로직 오류로 발생하는 문제를 효과적으로 처리하기 위한 고민의 산출물<ul>\n<li>오류가 발생하지 않는 애플리케이션을 만들기 위해 일관된 방식으로 안전하게 데이터 흐름을 처리하도록 도와주는 라이브러리</li>\n</ul>\n</li>\n<li>상태 전파를 위한 리엑티브 프로그래밍 + 로직 오류를 방지하기 위한 함수형 프로그래밍</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RxJS-Quick-Start-책-정리\"><a href=\"#RxJS-Quick-Start-책-정리\" class=\"headerlink\" title=\"RxJS Quick Start, 책 정리\"></a>RxJS Quick Start, 책 정리</h1><h2 id=\"RxJS를-시작하기-전에\"><a href=\"#RxJS를-시작하기-전에\" class=\"headerlink\" title=\"RxJS를 시작하기 전에\"></a>RxJS를 시작하기 전에</h2><ul>\n<li>구현  자체에만 초점을 맞추는게 아니라, 유지보수도 생각해야함</li>\n<li>결과물(프레임워크)를 잘 사용하는 것보다 그 기술의 결과물이 어떤 고민의 산물인지 아는 것이 중요함.</li>\n</ul>\n<h3 id=\"1-1-웹-환경의-변화\"><a href=\"#1-1-웹-환경의-변화\" class=\"headerlink\" title=\"1.1 웹 환경의 변화\"></a>1.1 웹 환경의 변화</h3><ul>\n<li>Ajax<ul>\n<li>이전에는 서버 데이터를 받기위해 매번 브라우저 페이지를 새로 요청해야했었는데,<ul>\n<li>Ajax 도입으로 새로운 페이지 요청없이 데이터를 가져올 수 있게 되고, 화면에 바로 반영할 수 있게 됨</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SPA</li>\n<li>Web Storage, Web Worker -&gt; 브라우저에서 지원</li>\n</ul>\n<h3 id=\"1-2-웹-개발-복잡도-증가\"><a href=\"#1-2-웹-개발-복잡도-증가\" class=\"headerlink\" title=\"1.2 웹 개발 복잡도 증가\"></a>1.2 웹 개발 복잡도 증가</h3><ul>\n<li>다양한 기능들이 하나의 페이지에 존재하게 됨<ul>\n<li>서로 영향을 주고, 복잡하게 얽힘</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-웹-애플리케이션은-상태-머신이다\"><a href=\"#1-3-웹-애플리케이션은-상태-머신이다\" class=\"headerlink\" title=\"1.3 웹 애플리케이션은 상태 머신이다.\"></a>1.3 웹 애플리케이션은 상태 머신이다.</h3><ul>\n<li>input과 기존 state와 logic에 따른 state 변경이 이루어짐</li>\n<li>웹 애플리케이션은 이러한 기능들의 집합임 -&gt; 웹애플리케이션도 하나의 큰 상태머신이다.</li>\n</ul>\n<h3 id=\"1-4-웹-애플리케이션-오류가-발생하는-경우\"><a href=\"#1-4-웹-애플리케이션-오류가-발생하는-경우\" class=\"headerlink\" title=\"1.4 웹 애플리케이션 오류가 발생하는 경우\"></a>1.4 웹 애플리케이션 오류가 발생하는 경우</h3><ul>\n<li>프로그램 오류 : 유저의 입력에 따라 프로그램이 예상하는 결과를 얻지 못하는 것</li>\n<li>웹애플리케이션을 하나의 state machine으로 본다면, 이를 구성하는 크고 작은 단위인 클래스 또는 컴포넌트의 상태 변화에 따라 웹 애플리케이션의 상태가 결정됨<ul>\n<li>각 구성 요소의 상태를 어떻게 관리하느냐가 중요</li>\n</ul>\n</li>\n<li>프로그램에서 오류가 나타나는 경우<ul>\n<li>입력된 값이나 타입을 잘못 전달한 경우</li>\n<li>입력된 값이 명확하지 않은 경우</li>\n<li>입력된 값을 준비되지 않은 상태에서 전달할 경우</li>\n<li>의존 관계에 있는 구성요소들의 상태 변화를 함께 전달하지 않아서 발생한 경우</li>\n<li>구성요소 간의 호출 순서에 의존도가 있는 경우에 호출 순서가 틀린 경우</li>\n<li>조건문에 의한 로직처리를 잘못한 경우</li>\n<li>로직의 연산을 잘못한 경우</li>\n<li>등등</li>\n</ul>\n</li>\n<li>하지만 웹 애플리케이션은 크게 세가지 요소에서 오류가 발생할 수 있음<ol>\n<li>입력 오류<ul>\n<li>입력값의 결과가 외부로부터 전달받는 경우</li>\n</ul>\n</li>\n<li>상태 오류<ul>\n<li>상태 변화를 정확하게 전달하지 못한 경우<ul>\n<li>컴포넌트 간에 의존도가 있는 경우</li>\n<li>호출 순서에 의존도가 있는 경우</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>로직 오류</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"1-5-RxJS는-무엇인가-그리고-웹-애플리케이션과-무슨-관련이-있나\"><a href=\"#1-5-RxJS는-무엇인가-그리고-웹-애플리케이션과-무슨-관련이-있나\" class=\"headerlink\" title=\"1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?\"></a>1.5 RxJS는 무엇인가? 그리고 웹 애플리케이션과 무슨 관련이 있나?</h3><ul>\n<li>RxJS(ReactiveX for Javascript): Microsoft가 만든 라이브러리</li>\n<li>입력오류, 상태오류, 로직 오류로 발생하는 문제를 효과적으로 처리하기 위한 고민의 산출물<ul>\n<li>오류가 발생하지 않는 애플리케이션을 만들기 위해 일관된 방식으로 안전하게 데이터 흐름을 처리하도록 도와주는 라이브러리</li>\n</ul>\n</li>\n<li>상태 전파를 위한 리엑티브 프로그래밍 + 로직 오류를 방지하기 위한 함수형 프로그래밍</li>\n</ul>\n"},{"title":"RxJS Quick Start, 책 정리 (71~109p)","date":"2019-03-07T16:52:47.000Z","_content":"\n## Chap3. RxJS가 해결하려고 했던 문제 3 : ***로직 오류***\n\n### 1.1 웹 애플리케이션의 로직\n\n- 웹 애플리케이션은 전달 받은 입력값을 로직을 통해 새로운 결과를 반환하거나 표현함\n- 사용자 정보를 표현하는 UI를 작성하는 예제\n  - 데이터를 추출하고 변환 하는 작업\n    - 반복문\n    - 분기문\n    - 변수\n\n### 1.2 로직의 복잡성 그리고 오류\n\n- 반복문과 분기문, 변수는 코드의 복잡도를 높이고 가독성을 떨어트려 오류 발생 빈도를 높임\n\n### 1.2.1 반복문과 분기문\n\n- 로직의 복잡성 줄이는 방법\n  - 기능별로 쪼개기\n    - 기능을 추상화할 수 있음\n      - 로직의 복잡성이 감소!\n\n### 1.2.2 변수는 오류의 시작\n\n- 브라우저 환경의 자바스크립트는 싱글 스레드 구조이기 때문에 멀티 스레드 사용으로 인한 동시성 문제는 발생하지 않음\n- 하지만 DOM에 등록된 이벤트 핸들러에 의해 변수의 값이 변경될 수 있음\n- 또는 비동기로 인해 변수의 값이 변경가능함\n\n### 1.3 자바스크립트의 솔루션\n\n- 함수형 프로그래밍!\n  - 함수는 일급 객체임을 이용\n\n### 1.3.1 로직의 분리\n\n- 이전 예제에서 logic, makeHtml 함수 생성\n  - 핵심 로직(process 함수)과 함수를 분리\n\n### 1.3.2 반복문, 분기문, 그리고 변수와의 이별\n\n- **고차함수 (higher-order function)**\n\n  - 다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수\n\n  - 고차 함수는 변경되는 주요 부분을 함수로 제공\n\n    - 이로인해 동일한 패턴 내에 존재하는 문제를 해결\n\n  - 함수의 합성, 변형과 같은 작업을 쉽게 할수 있게 해줌\n\n    - 커링(currying), 메모이제이션(memoization) 기법\n\n  - ``` javascript\n    const twice = (f, v) => f(f(v));\n    const fn - v => v + 3;\n    console.log(twice(fn, 7));  // 13\n    ```\n\n- 고차 함수를 이용한 process 함수 개선\n\n  - if문 -> filter로 변환\n  - map을 이용하여 값을 변환\n  - reduce를 이용하여 축적된 데이터를 반환\n\n- 순수함수\n\n  - 같은 입력이 주어지면 항상 같은 출력을 반환하는 함수\n\n-----\n\n### 1.4 RxJS는 어떻게 개선하였나?\n\n### 1.4.1 RxJS가 제공하는 오퍼레이터\n\n- RxJS에서도 ES5의 고차함수와 같은 operator를 제공함 ([RxJS 공홈 참고](http://reactivex.io/rxjs/manual/overview.html#categories-of-operators))\n- 오퍼레이터를 이용하면 Observable을 생성할 수도 있고, 전달된 데이터를 변환하거나 추출할 수 있음\n  - Observable의 합성과 분리도 가능\n  - 오퍼레이터를 많이 알면 좋지만, 이게 장벽이 될수도..\n    - 오퍼레이터들은 함수형 프로그래밍에 근간\n\n### 1.4.2 불변 객체 Observable\n\n- RxJS의 오퍼레이터는 항상 새로운 Observable을 반환함\n  - 이 Observable은 불변 객체임(immutable object)\n    - 불변 객체 : 생성 후 상태를 바꿀 수 없는 객체\n    - 불변 객체를 사용하면 프로그램의 복잡도가 줄어듬\n- Array와 다른점\n  - Array는 새로운 Array 객체 생성 작업만 함\n  - Observable은 새로운 Observable을 만들고, 그 Observable이 오퍼레이터를 호출한 원래의 Observable을 내부적으로 subscribe 함\n    - 즉, 링크드 리스트 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 오퍼레이터로 연결함\n    - 따라서 source 부터 전달된 데이터, 에러, 종료 여부가 Observable의 오퍼레이터들을 통해 전달되거나 변형되어 구독한 Observer에게 전달할 수 있음\n\n## 부록2 : 함수형 프로그래밍(functional programming)\n\n### 1.1 함수형 프로그래밍이란?\n\n> 함수형 프로그래밍은 자료처리를 ***수학적 함수의 계산***으로 취급하고 ***상태 변경과 가변 데이터를 피하려는*** 프로그래밍 패러다임이다\n\n### 1.2 수학적 함수의 계산\n\n- 함수형 프로그래밍은 수학적인 계산을 이용하여 반복문이나 조건문과 같은 로직의 복잡성을 쉽게 풀고자 하는게 목적임\n\n### 1.3 상태변경과 가변 데이터를 피하려는\n\n- 함수형 프로그래밍의 또다른 목적은 상태 변경을 피하려는 것\n- 변수를 모든 오류의 근본 원인으로 치부함\n\n### 1.4 순수함수, 상태가 없다\n\n- 순수함수?\n  - 같은 입력이 주어지면, 항상 같은 출력을 반환\n  - side effect를 발생시키지 않음\n  - 외부의 가변(mutable) 데이터에 의존하지 않음\n\n### 1.5 RxJS에 녹아있는 함수형 프로그래밍\n\n- 상태를 어떻게 전파할건지에 대한 해결 -> 리엑티브 프로그래밍 패러다임\n- 복잡한 문제를 외부 상태 변경 없이 효과적으로 해결 -> 함수형 프로그래밍 패러다임\n  - RxJS의 Observable은 오퍼레이터를 제공\n  - 이로 인해 생성된 Observable은 불변 객체(immutable object)를 반환\n  - 오퍼레이터의 인자로 순수 함수를 받음으로써 부원인과 부작용 제거\n  - 이로인해 코드는 동시성 문제에서 자유롭고, 테스트 또한 용이해지고, 로직 또한 단순해짐\n\n-----\n\n# 2부\n\n## Chap 1. RxJS란 무엇인가?\n\n### 1.1 RxJS란?\n\n> Observable을 사용하여 비동기및 이벤트 기반 프로그램을 작성하기 위한 라이브러리\n\n### 1.2 RxJS 시작하기\n\n### 1.2.1 RxJS 첫번째 예제\n\n- 페이지를 클릭시, event.currentTarget 정보를 콘솔로 출력해보자\n\n  - 이벤트 핸들러를 만들고, 그 핸들러를 addEventListener에 등록\n\n  - ``` javascript\n    const eventHandler = event => {\n        console.log(event.currentTarget);\n    };\n    document.addEventListener(\"click\", eventHandler);\n    ```\n\n- 동일한 기능을 RxJS로 구현\n\n  - 이벤트를 Observable로 변환하는 fromEvent 함수를 제공함\n\n  - ``` javascript\n    const { fromEvent } = rxjs;\n    cosnt click$ = fromEvent(document, \"click\"); // observable\n    const observer = event => {\n        console.log(event.currentTarget);\n    };\n    click$.subscribe(observer);\n    ```\n\n  - 이벤트 핸들러 만드는 것과 같이 observer를 만듬\n\n  - addEventListener를 통해 이벤트 핸들러를 등록하는것과 같이, observer를 Observable에 구독(subscribe)함\n\n### 1.2.2 RxJS 첫번째 예제 개선하기\n\n- 앞 예제에서 실제 필요한 정보는 click 때의 currentTarget 정보임\n\n  > **pluck(properties: ...string): Observable**\n  >\n  > pluck은 '~을 뽑다'는 의미. 추출할 속성들을 '문자열'로 지정할 수 있음\n\n- RxJS에서 오퍼레이터를 적용하기 위해 반드시 `pipe` 오퍼레이터를 통해 적용해야함\n\n- pipe 오퍼레이터는 파라미터로 전달된 오퍼레이터들이 적용된 새로운 Observable 인스턴스를 반환함\n\n- pipe 오퍼레이터는 Observable 인스턴스의 메소드로 존재함\n\n  > **pipe(operations: …): Observable**\n  >\n  > 처리되어야 할 작업(operator)들을 순차적으로 받아서 처리함\n\n\n\n- 도트체이닝 방식과 pipe 오퍼레이터 방식\n\n  - 도트 체이닝(dot chaining)\n    - 메소드 호출방식처럼 .을 찍어서 동작\n    - 문제점\n      - 도트 체이닝을 구성하기 위해선 Observable 객체가 모든 오퍼레이터를 가지고 있어야함\n      - 불필요한 오퍼레이터를 모두 가지고 있어야 하기 때문에, 파일 사이즈가 증가됨\n  - pipe 오퍼레이터 방식\n    - 웹팩이나 rollup을 통해 트리셰이킹(사용하지 않는 모듈을 번들링할 때 제거하는 기능)이 가능\n    - 함수형태로만 오퍼레이터가 만들어지므로 Observable과의 결합도를 떨어트려 쉽게 사용자 오퍼레이터를 작성 가능\n\n- pluck 오퍼레이터를 이용하여 코드 리펙토링\n\n  - ``` javascript\n    const { fromEvent } = rxjs;\n    const { pluck } = rxjs.operators;\n    const currentTarget$ = fromEvent(document, \"click\")\n    \t.pipe(\n        \tpluck(\"currenttarget\")\n        );\t// Observable\n    const observer = currentTarget => {\n        constsole.log(currentTarget);\n    };\n    currentTarget$.subscribe(observer);\n    ```\n\n  - click이 발생하면 currentTarget$은 event 객체의 currentTarget을 전달\n\n  - observer는 currentTarget을 구독함으로써 해당 데이터를 전달 받을 수 있음\n\n### 1.2.3 RxJS 두번째 예제\n\n- 예제: 사용자 정보를 가지는 배열에서 '촉'나라 사람만 추출\n\n  - ``` javascript\n    const user = [{\n        name: \"유비\",\n        birthYear: 161,\n        nationality: \"촉\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    },{\n        name: \"관우\",\n        birthYear: 160,\n        nationality: \"촉\"\n    },{\n        name: \"장비\",\n        birthYear: 168,\n        nationality: \"촉\"\n    },{\n        name: \"조조\",\n        birthYear: 155,\n        nationality: \"위\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    }].filter(user => user.nationality === \"촉\");\n    const log = user => console.log(user);\n    users.forEach(log);\n    ```\n\n- 위 코드와 동일한 기능을 RxJS로 작성\n\n  - from 메소드\n\n    - Array를 Observable로 변환\n\n  - ``` javascript\n    const { from } = rxjs;\n    const { filter } = rxjs.operators;\n\n    const users$ = from([{\n        name: \"유비\",\n        birthYear: 161,\n        nationality: \"촉\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    },{\n        name: \"관우\",\n        birthYear: 160,\n        nationality: \"촉\"\n    },{\n        name: \"장비\",\n        birthYear: 168,\n        nationality: \"촉\"\n    },{\n        name: \"조조\",\n        birthYear: 155,\n        nationality: \"위\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    }]).pipe(\n    \tfilter(user => user.nationality === \"촉\")\n    )\n    const observer = user => console.log(user);\n    user$.subscribe(observer);\n    ```\n\n  - observer에서 로그 출력\n\n  - forEach를 통해 log 함수를 호출하는 것같이, observer를 Observable에 subscribe함\n\n  - Array 객체를 observable로 변화하고, pipe를 통해 filter 오퍼레이터 적용\n\n    > 두 예제를 통한 결과: 비동기 방식, 동기 방식 모두 동일한 형태로 개발 가능하다!\n\n### 1.3 RxJS 4대 천왕\n\n- RxJS에서의 중요한 개념들\n  - Observable\n  - Operator\n  - Observer\n  - Subscription\n  - Subject\n  - Scheduler\n\n### 1.3.1 Observable\n\n> 시간을 축으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체\n\n### 1.3.2 Operator\n\n> Observable을 생성하고 조작하는 함수\n>\n> 오퍼레이터는 현재의 Observable 인스턴스를 기반으로 항상 새로운 Observable 인스턴스를 반환함\n\n### 1.3.3 Observer\n\n>  Observable에 의해 전달된 데이터를 소비하는 주체\n>\n> next, error, complete 함수를 가진 객체를 가리킴\n\n### 1.3.4 Subscription\n\n> Observable.prototype.subscribe의 반환값\n>\n> 자원의 해제를 담당 -> unsubscribe메소드를 통해\n\n### 1.4 RxJS 개발 방법\n\n1. 데이터 소스를 Observable로 변경\n2. 오퍼레이터를 통해 데이터를 변경하거나 추출. 또는 여러 Observable을 하나의 Observable로 합치거나, 하나의 Observable을 여러개의 Observable로 만든다\n3. 원하는 데이터를 받아 처리하는 observer 만들기\n4. Observable의 subscribe를 통해 Observer를 등록\n5. Observable 구독을 정지하고 자원을 해지\n\n","source":"_posts/RxJS-정리3.md","raw":"---\ntitle: RxJS Quick Start, 책 정리 (71~109p)\ndate: 2019-03-08 01:52:47\ncategories:\n    - RxJS\ntags:\n    - RxJS\n---\n\n## Chap3. RxJS가 해결하려고 했던 문제 3 : ***로직 오류***\n\n### 1.1 웹 애플리케이션의 로직\n\n- 웹 애플리케이션은 전달 받은 입력값을 로직을 통해 새로운 결과를 반환하거나 표현함\n- 사용자 정보를 표현하는 UI를 작성하는 예제\n  - 데이터를 추출하고 변환 하는 작업\n    - 반복문\n    - 분기문\n    - 변수\n\n### 1.2 로직의 복잡성 그리고 오류\n\n- 반복문과 분기문, 변수는 코드의 복잡도를 높이고 가독성을 떨어트려 오류 발생 빈도를 높임\n\n### 1.2.1 반복문과 분기문\n\n- 로직의 복잡성 줄이는 방법\n  - 기능별로 쪼개기\n    - 기능을 추상화할 수 있음\n      - 로직의 복잡성이 감소!\n\n### 1.2.2 변수는 오류의 시작\n\n- 브라우저 환경의 자바스크립트는 싱글 스레드 구조이기 때문에 멀티 스레드 사용으로 인한 동시성 문제는 발생하지 않음\n- 하지만 DOM에 등록된 이벤트 핸들러에 의해 변수의 값이 변경될 수 있음\n- 또는 비동기로 인해 변수의 값이 변경가능함\n\n### 1.3 자바스크립트의 솔루션\n\n- 함수형 프로그래밍!\n  - 함수는 일급 객체임을 이용\n\n### 1.3.1 로직의 분리\n\n- 이전 예제에서 logic, makeHtml 함수 생성\n  - 핵심 로직(process 함수)과 함수를 분리\n\n### 1.3.2 반복문, 분기문, 그리고 변수와의 이별\n\n- **고차함수 (higher-order function)**\n\n  - 다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수\n\n  - 고차 함수는 변경되는 주요 부분을 함수로 제공\n\n    - 이로인해 동일한 패턴 내에 존재하는 문제를 해결\n\n  - 함수의 합성, 변형과 같은 작업을 쉽게 할수 있게 해줌\n\n    - 커링(currying), 메모이제이션(memoization) 기법\n\n  - ``` javascript\n    const twice = (f, v) => f(f(v));\n    const fn - v => v + 3;\n    console.log(twice(fn, 7));  // 13\n    ```\n\n- 고차 함수를 이용한 process 함수 개선\n\n  - if문 -> filter로 변환\n  - map을 이용하여 값을 변환\n  - reduce를 이용하여 축적된 데이터를 반환\n\n- 순수함수\n\n  - 같은 입력이 주어지면 항상 같은 출력을 반환하는 함수\n\n-----\n\n### 1.4 RxJS는 어떻게 개선하였나?\n\n### 1.4.1 RxJS가 제공하는 오퍼레이터\n\n- RxJS에서도 ES5의 고차함수와 같은 operator를 제공함 ([RxJS 공홈 참고](http://reactivex.io/rxjs/manual/overview.html#categories-of-operators))\n- 오퍼레이터를 이용하면 Observable을 생성할 수도 있고, 전달된 데이터를 변환하거나 추출할 수 있음\n  - Observable의 합성과 분리도 가능\n  - 오퍼레이터를 많이 알면 좋지만, 이게 장벽이 될수도..\n    - 오퍼레이터들은 함수형 프로그래밍에 근간\n\n### 1.4.2 불변 객체 Observable\n\n- RxJS의 오퍼레이터는 항상 새로운 Observable을 반환함\n  - 이 Observable은 불변 객체임(immutable object)\n    - 불변 객체 : 생성 후 상태를 바꿀 수 없는 객체\n    - 불변 객체를 사용하면 프로그램의 복잡도가 줄어듬\n- Array와 다른점\n  - Array는 새로운 Array 객체 생성 작업만 함\n  - Observable은 새로운 Observable을 만들고, 그 Observable이 오퍼레이터를 호출한 원래의 Observable을 내부적으로 subscribe 함\n    - 즉, 링크드 리스트 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 오퍼레이터로 연결함\n    - 따라서 source 부터 전달된 데이터, 에러, 종료 여부가 Observable의 오퍼레이터들을 통해 전달되거나 변형되어 구독한 Observer에게 전달할 수 있음\n\n## 부록2 : 함수형 프로그래밍(functional programming)\n\n### 1.1 함수형 프로그래밍이란?\n\n> 함수형 프로그래밍은 자료처리를 ***수학적 함수의 계산***으로 취급하고 ***상태 변경과 가변 데이터를 피하려는*** 프로그래밍 패러다임이다\n\n### 1.2 수학적 함수의 계산\n\n- 함수형 프로그래밍은 수학적인 계산을 이용하여 반복문이나 조건문과 같은 로직의 복잡성을 쉽게 풀고자 하는게 목적임\n\n### 1.3 상태변경과 가변 데이터를 피하려는\n\n- 함수형 프로그래밍의 또다른 목적은 상태 변경을 피하려는 것\n- 변수를 모든 오류의 근본 원인으로 치부함\n\n### 1.4 순수함수, 상태가 없다\n\n- 순수함수?\n  - 같은 입력이 주어지면, 항상 같은 출력을 반환\n  - side effect를 발생시키지 않음\n  - 외부의 가변(mutable) 데이터에 의존하지 않음\n\n### 1.5 RxJS에 녹아있는 함수형 프로그래밍\n\n- 상태를 어떻게 전파할건지에 대한 해결 -> 리엑티브 프로그래밍 패러다임\n- 복잡한 문제를 외부 상태 변경 없이 효과적으로 해결 -> 함수형 프로그래밍 패러다임\n  - RxJS의 Observable은 오퍼레이터를 제공\n  - 이로 인해 생성된 Observable은 불변 객체(immutable object)를 반환\n  - 오퍼레이터의 인자로 순수 함수를 받음으로써 부원인과 부작용 제거\n  - 이로인해 코드는 동시성 문제에서 자유롭고, 테스트 또한 용이해지고, 로직 또한 단순해짐\n\n-----\n\n# 2부\n\n## Chap 1. RxJS란 무엇인가?\n\n### 1.1 RxJS란?\n\n> Observable을 사용하여 비동기및 이벤트 기반 프로그램을 작성하기 위한 라이브러리\n\n### 1.2 RxJS 시작하기\n\n### 1.2.1 RxJS 첫번째 예제\n\n- 페이지를 클릭시, event.currentTarget 정보를 콘솔로 출력해보자\n\n  - 이벤트 핸들러를 만들고, 그 핸들러를 addEventListener에 등록\n\n  - ``` javascript\n    const eventHandler = event => {\n        console.log(event.currentTarget);\n    };\n    document.addEventListener(\"click\", eventHandler);\n    ```\n\n- 동일한 기능을 RxJS로 구현\n\n  - 이벤트를 Observable로 변환하는 fromEvent 함수를 제공함\n\n  - ``` javascript\n    const { fromEvent } = rxjs;\n    cosnt click$ = fromEvent(document, \"click\"); // observable\n    const observer = event => {\n        console.log(event.currentTarget);\n    };\n    click$.subscribe(observer);\n    ```\n\n  - 이벤트 핸들러 만드는 것과 같이 observer를 만듬\n\n  - addEventListener를 통해 이벤트 핸들러를 등록하는것과 같이, observer를 Observable에 구독(subscribe)함\n\n### 1.2.2 RxJS 첫번째 예제 개선하기\n\n- 앞 예제에서 실제 필요한 정보는 click 때의 currentTarget 정보임\n\n  > **pluck(properties: ...string): Observable**\n  >\n  > pluck은 '~을 뽑다'는 의미. 추출할 속성들을 '문자열'로 지정할 수 있음\n\n- RxJS에서 오퍼레이터를 적용하기 위해 반드시 `pipe` 오퍼레이터를 통해 적용해야함\n\n- pipe 오퍼레이터는 파라미터로 전달된 오퍼레이터들이 적용된 새로운 Observable 인스턴스를 반환함\n\n- pipe 오퍼레이터는 Observable 인스턴스의 메소드로 존재함\n\n  > **pipe(operations: …): Observable**\n  >\n  > 처리되어야 할 작업(operator)들을 순차적으로 받아서 처리함\n\n\n\n- 도트체이닝 방식과 pipe 오퍼레이터 방식\n\n  - 도트 체이닝(dot chaining)\n    - 메소드 호출방식처럼 .을 찍어서 동작\n    - 문제점\n      - 도트 체이닝을 구성하기 위해선 Observable 객체가 모든 오퍼레이터를 가지고 있어야함\n      - 불필요한 오퍼레이터를 모두 가지고 있어야 하기 때문에, 파일 사이즈가 증가됨\n  - pipe 오퍼레이터 방식\n    - 웹팩이나 rollup을 통해 트리셰이킹(사용하지 않는 모듈을 번들링할 때 제거하는 기능)이 가능\n    - 함수형태로만 오퍼레이터가 만들어지므로 Observable과의 결합도를 떨어트려 쉽게 사용자 오퍼레이터를 작성 가능\n\n- pluck 오퍼레이터를 이용하여 코드 리펙토링\n\n  - ``` javascript\n    const { fromEvent } = rxjs;\n    const { pluck } = rxjs.operators;\n    const currentTarget$ = fromEvent(document, \"click\")\n    \t.pipe(\n        \tpluck(\"currenttarget\")\n        );\t// Observable\n    const observer = currentTarget => {\n        constsole.log(currentTarget);\n    };\n    currentTarget$.subscribe(observer);\n    ```\n\n  - click이 발생하면 currentTarget$은 event 객체의 currentTarget을 전달\n\n  - observer는 currentTarget을 구독함으로써 해당 데이터를 전달 받을 수 있음\n\n### 1.2.3 RxJS 두번째 예제\n\n- 예제: 사용자 정보를 가지는 배열에서 '촉'나라 사람만 추출\n\n  - ``` javascript\n    const user = [{\n        name: \"유비\",\n        birthYear: 161,\n        nationality: \"촉\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    },{\n        name: \"관우\",\n        birthYear: 160,\n        nationality: \"촉\"\n    },{\n        name: \"장비\",\n        birthYear: 168,\n        nationality: \"촉\"\n    },{\n        name: \"조조\",\n        birthYear: 155,\n        nationality: \"위\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    }].filter(user => user.nationality === \"촉\");\n    const log = user => console.log(user);\n    users.forEach(log);\n    ```\n\n- 위 코드와 동일한 기능을 RxJS로 작성\n\n  - from 메소드\n\n    - Array를 Observable로 변환\n\n  - ``` javascript\n    const { from } = rxjs;\n    const { filter } = rxjs.operators;\n\n    const users$ = from([{\n        name: \"유비\",\n        birthYear: 161,\n        nationality: \"촉\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    },{\n        name: \"관우\",\n        birthYear: 160,\n        nationality: \"촉\"\n    },{\n        name: \"장비\",\n        birthYear: 168,\n        nationality: \"촉\"\n    },{\n        name: \"조조\",\n        birthYear: 155,\n        nationality: \"위\"\n    },{\n        name: \"손권\",\n        birthYear: 182,\n        nationality: \"오\"\n    }]).pipe(\n    \tfilter(user => user.nationality === \"촉\")\n    )\n    const observer = user => console.log(user);\n    user$.subscribe(observer);\n    ```\n\n  - observer에서 로그 출력\n\n  - forEach를 통해 log 함수를 호출하는 것같이, observer를 Observable에 subscribe함\n\n  - Array 객체를 observable로 변화하고, pipe를 통해 filter 오퍼레이터 적용\n\n    > 두 예제를 통한 결과: 비동기 방식, 동기 방식 모두 동일한 형태로 개발 가능하다!\n\n### 1.3 RxJS 4대 천왕\n\n- RxJS에서의 중요한 개념들\n  - Observable\n  - Operator\n  - Observer\n  - Subscription\n  - Subject\n  - Scheduler\n\n### 1.3.1 Observable\n\n> 시간을 축으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체\n\n### 1.3.2 Operator\n\n> Observable을 생성하고 조작하는 함수\n>\n> 오퍼레이터는 현재의 Observable 인스턴스를 기반으로 항상 새로운 Observable 인스턴스를 반환함\n\n### 1.3.3 Observer\n\n>  Observable에 의해 전달된 데이터를 소비하는 주체\n>\n> next, error, complete 함수를 가진 객체를 가리킴\n\n### 1.3.4 Subscription\n\n> Observable.prototype.subscribe의 반환값\n>\n> 자원의 해제를 담당 -> unsubscribe메소드를 통해\n\n### 1.4 RxJS 개발 방법\n\n1. 데이터 소스를 Observable로 변경\n2. 오퍼레이터를 통해 데이터를 변경하거나 추출. 또는 여러 Observable을 하나의 Observable로 합치거나, 하나의 Observable을 여러개의 Observable로 만든다\n3. 원하는 데이터를 받아 처리하는 observer 만들기\n4. Observable의 subscribe를 통해 Observer를 등록\n5. Observable 구독을 정지하고 자원을 해지\n\n","slug":"RxJS-정리3","published":1,"updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq3000lbqwx4uqz6egs","content":"<h2 id=\"Chap3-RxJS가-해결하려고-했던-문제-3-로직-오류\"><a href=\"#Chap3-RxJS가-해결하려고-했던-문제-3-로직-오류\" class=\"headerlink\" title=\"Chap3. RxJS가 해결하려고 했던 문제 3 : 로직 오류\"></a>Chap3. RxJS가 해결하려고 했던 문제 3 : <strong><em>로직 오류</em></strong></h2><h3 id=\"1-1-웹-애플리케이션의-로직\"><a href=\"#1-1-웹-애플리케이션의-로직\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 로직\"></a>1.1 웹 애플리케이션의 로직</h3><ul>\n<li>웹 애플리케이션은 전달 받은 입력값을 로직을 통해 새로운 결과를 반환하거나 표현함</li>\n<li>사용자 정보를 표현하는 UI를 작성하는 예제<ul>\n<li>데이터를 추출하고 변환 하는 작업<ul>\n<li>반복문</li>\n<li>분기문</li>\n<li>변수</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-로직의-복잡성-그리고-오류\"><a href=\"#1-2-로직의-복잡성-그리고-오류\" class=\"headerlink\" title=\"1.2 로직의 복잡성 그리고 오류\"></a>1.2 로직의 복잡성 그리고 오류</h3><ul>\n<li>반복문과 분기문, 변수는 코드의 복잡도를 높이고 가독성을 떨어트려 오류 발생 빈도를 높임</li>\n</ul>\n<h3 id=\"1-2-1-반복문과-분기문\"><a href=\"#1-2-1-반복문과-분기문\" class=\"headerlink\" title=\"1.2.1 반복문과 분기문\"></a>1.2.1 반복문과 분기문</h3><ul>\n<li>로직의 복잡성 줄이는 방법<ul>\n<li>기능별로 쪼개기<ul>\n<li>기능을 추상화할 수 있음<ul>\n<li>로직의 복잡성이 감소!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-2-변수는-오류의-시작\"><a href=\"#1-2-2-변수는-오류의-시작\" class=\"headerlink\" title=\"1.2.2 변수는 오류의 시작\"></a>1.2.2 변수는 오류의 시작</h3><ul>\n<li>브라우저 환경의 자바스크립트는 싱글 스레드 구조이기 때문에 멀티 스레드 사용으로 인한 동시성 문제는 발생하지 않음</li>\n<li>하지만 DOM에 등록된 이벤트 핸들러에 의해 변수의 값이 변경될 수 있음</li>\n<li>또는 비동기로 인해 변수의 값이 변경가능함</li>\n</ul>\n<h3 id=\"1-3-자바스크립트의-솔루션\"><a href=\"#1-3-자바스크립트의-솔루션\" class=\"headerlink\" title=\"1.3 자바스크립트의 솔루션\"></a>1.3 자바스크립트의 솔루션</h3><ul>\n<li>함수형 프로그래밍!<ul>\n<li>함수는 일급 객체임을 이용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-1-로직의-분리\"><a href=\"#1-3-1-로직의-분리\" class=\"headerlink\" title=\"1.3.1 로직의 분리\"></a>1.3.1 로직의 분리</h3><ul>\n<li>이전 예제에서 logic, makeHtml 함수 생성<ul>\n<li>핵심 로직(process 함수)과 함수를 분리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-2-반복문-분기문-그리고-변수와의-이별\"><a href=\"#1-3-2-반복문-분기문-그리고-변수와의-이별\" class=\"headerlink\" title=\"1.3.2 반복문, 분기문, 그리고 변수와의 이별\"></a>1.3.2 반복문, 분기문, 그리고 변수와의 이별</h3><ul>\n<li><p><strong>고차함수 (higher-order function)</strong></p>\n<ul>\n<li><p>다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수</p>\n</li>\n<li><p>고차 함수는 변경되는 주요 부분을 함수로 제공</p>\n<ul>\n<li>이로인해 동일한 패턴 내에 존재하는 문제를 해결</li>\n</ul>\n</li>\n<li><p>함수의 합성, 변형과 같은 작업을 쉽게 할수 있게 해줌</p>\n<ul>\n<li>커링(currying), 메모이제이션(memoization) 기법</li>\n</ul>\n</li>\n<li><p><code>`</code> javascript<br>const twice = (f, v) =&gt; f(f(v));<br>const fn - v =&gt; v + 3;<br>console.log(twice(fn, 7));  // 13</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 고차 함수를 이용한 process 함수 개선</span><br><span class=\"line\"></span><br><span class=\"line\">  - if문 -&gt; filter로 변환</span><br><span class=\"line\">  - map을 이용하여 값을 변환</span><br><span class=\"line\">  - reduce를 이용하여 축적된 데이터를 반환</span><br><span class=\"line\"></span><br><span class=\"line\">- 순수함수</span><br><span class=\"line\"></span><br><span class=\"line\">  - 같은 입력이 주어지면 항상 같은 출력을 반환하는 함수</span><br><span class=\"line\"></span><br><span class=\"line\">-----</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4 RxJS는 어떻게 개선하였나?</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4.1 RxJS가 제공하는 오퍼레이터</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS에서도 ES5의 고차함수와 같은 operator를 제공함 ([RxJS 공홈 참고](http:&#x2F;&#x2F;reactivex.io&#x2F;rxjs&#x2F;manual&#x2F;overview.html#categories-of-operators))</span><br><span class=\"line\">- 오퍼레이터를 이용하면 Observable을 생성할 수도 있고, 전달된 데이터를 변환하거나 추출할 수 있음</span><br><span class=\"line\">  - Observable의 합성과 분리도 가능</span><br><span class=\"line\">  - 오퍼레이터를 많이 알면 좋지만, 이게 장벽이 될수도..</span><br><span class=\"line\">    - 오퍼레이터들은 함수형 프로그래밍에 근간</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4.2 불변 객체 Observable</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS의 오퍼레이터는 항상 새로운 Observable을 반환함</span><br><span class=\"line\">  - 이 Observable은 불변 객체임(immutable object)</span><br><span class=\"line\">    - 불변 객체 : 생성 후 상태를 바꿀 수 없는 객체</span><br><span class=\"line\">    - 불변 객체를 사용하면 프로그램의 복잡도가 줄어듬</span><br><span class=\"line\">- Array와 다른점</span><br><span class=\"line\">  - Array는 새로운 Array 객체 생성 작업만 함</span><br><span class=\"line\">  - Observable은 새로운 Observable을 만들고, 그 Observable이 오퍼레이터를 호출한 원래의 Observable을 내부적으로 subscribe 함</span><br><span class=\"line\">    - 즉, 링크드 리스트 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 오퍼레이터로 연결함</span><br><span class=\"line\">    - 따라서 source 부터 전달된 데이터, 에러, 종료 여부가 Observable의 오퍼레이터들을 통해 전달되거나 변형되어 구독한 Observer에게 전달할 수 있음</span><br><span class=\"line\"></span><br><span class=\"line\">## 부록2 : 함수형 프로그래밍(functional programming)</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.1 함수형 프로그래밍이란?</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 함수형 프로그래밍은 자료처리를 ***수학적 함수의 계산***으로 취급하고 ***상태 변경과 가변 데이터를 피하려는*** 프로그래밍 패러다임이다</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2 수학적 함수의 계산</span><br><span class=\"line\"></span><br><span class=\"line\">- 함수형 프로그래밍은 수학적인 계산을 이용하여 반복문이나 조건문과 같은 로직의 복잡성을 쉽게 풀고자 하는게 목적임</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.3 상태변경과 가변 데이터를 피하려는</span><br><span class=\"line\"></span><br><span class=\"line\">- 함수형 프로그래밍의 또다른 목적은 상태 변경을 피하려는 것</span><br><span class=\"line\">- 변수를 모든 오류의 근본 원인으로 치부함</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4 순수함수, 상태가 없다</span><br><span class=\"line\"></span><br><span class=\"line\">- 순수함수?</span><br><span class=\"line\">  - 같은 입력이 주어지면, 항상 같은 출력을 반환</span><br><span class=\"line\">  - side effect를 발생시키지 않음</span><br><span class=\"line\">  - 외부의 가변(mutable) 데이터에 의존하지 않음</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.5 RxJS에 녹아있는 함수형 프로그래밍</span><br><span class=\"line\"></span><br><span class=\"line\">- 상태를 어떻게 전파할건지에 대한 해결 -&gt; 리엑티브 프로그래밍 패러다임</span><br><span class=\"line\">- 복잡한 문제를 외부 상태 변경 없이 효과적으로 해결 -&gt; 함수형 프로그래밍 패러다임</span><br><span class=\"line\">  - RxJS의 Observable은 오퍼레이터를 제공</span><br><span class=\"line\">  - 이로 인해 생성된 Observable은 불변 객체(immutable object)를 반환</span><br><span class=\"line\">  - 오퍼레이터의 인자로 순수 함수를 받음으로써 부원인과 부작용 제거</span><br><span class=\"line\">  - 이로인해 코드는 동시성 문제에서 자유롭고, 테스트 또한 용이해지고, 로직 또한 단순해짐</span><br><span class=\"line\"></span><br><span class=\"line\">-----</span><br><span class=\"line\"></span><br><span class=\"line\"># 2부</span><br><span class=\"line\"></span><br><span class=\"line\">## Chap 1. RxJS란 무엇인가?</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.1 RxJS란?</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Observable을 사용하여 비동기및 이벤트 기반 프로그램을 작성하기 위한 라이브러리</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2 RxJS 시작하기</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2.1 RxJS 첫번째 예제</span><br><span class=\"line\"></span><br><span class=\"line\">- 페이지를 클릭시, event.currentTarget 정보를 콘솔로 출력해보자</span><br><span class=\"line\"></span><br><span class=\"line\">  - 이벤트 핸들러를 만들고, 그 핸들러를 addEventListener에 등록</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const eventHandler &#x3D; event &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(event.currentTarget);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;, eventHandler);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동일한 기능을 RxJS로 구현</p>\n<ul>\n<li><p>이벤트를 Observable로 변환하는 fromEvent 함수를 제공함</p>\n</li>\n<li><p><code>`</code> javascript<br>const { fromEvent } = rxjs;<br>cosnt click$ = fromEvent(document, “click”); // observable<br>const observer = event =&gt; {</p>\n<pre><code>console.log(event.currentTarget);\n</code></pre><p>};<br>click$.subscribe(observer);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 이벤트 핸들러 만드는 것과 같이 observer를 만듬</span><br><span class=\"line\"></span><br><span class=\"line\">  - addEventListener를 통해 이벤트 핸들러를 등록하는것과 같이, observer를 Observable에 구독(subscribe)함</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2.2 RxJS 첫번째 예제 개선하기</span><br><span class=\"line\"></span><br><span class=\"line\">- 앞 예제에서 실제 필요한 정보는 click 때의 currentTarget 정보임</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; **pluck(properties: ...string): Observable**</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &gt; pluck은 &#39;~을 뽑다&#39;는 의미. 추출할 속성들을 &#39;문자열&#39;로 지정할 수 있음</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS에서 오퍼레이터를 적용하기 위해 반드시 &#96;pipe&#96; 오퍼레이터를 통해 적용해야함</span><br><span class=\"line\"></span><br><span class=\"line\">- pipe 오퍼레이터는 파라미터로 전달된 오퍼레이터들이 적용된 새로운 Observable 인스턴스를 반환함</span><br><span class=\"line\"></span><br><span class=\"line\">- pipe 오퍼레이터는 Observable 인스턴스의 메소드로 존재함</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; **pipe(operations: …): Observable**</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &gt; 처리되어야 할 작업(operator)들을 순차적으로 받아서 처리함</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- 도트체이닝 방식과 pipe 오퍼레이터 방식</span><br><span class=\"line\"></span><br><span class=\"line\">  - 도트 체이닝(dot chaining)</span><br><span class=\"line\">    - 메소드 호출방식처럼 .을 찍어서 동작</span><br><span class=\"line\">    - 문제점</span><br><span class=\"line\">      - 도트 체이닝을 구성하기 위해선 Observable 객체가 모든 오퍼레이터를 가지고 있어야함</span><br><span class=\"line\">      - 불필요한 오퍼레이터를 모두 가지고 있어야 하기 때문에, 파일 사이즈가 증가됨</span><br><span class=\"line\">  - pipe 오퍼레이터 방식</span><br><span class=\"line\">    - 웹팩이나 rollup을 통해 트리셰이킹(사용하지 않는 모듈을 번들링할 때 제거하는 기능)이 가능</span><br><span class=\"line\">    - 함수형태로만 오퍼레이터가 만들어지므로 Observable과의 결합도를 떨어트려 쉽게 사용자 오퍼레이터를 작성 가능</span><br><span class=\"line\"></span><br><span class=\"line\">- pluck 오퍼레이터를 이용하여 코드 리펙토링</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const &#123; fromEvent &#125; &#x3D; rxjs;</span><br><span class=\"line\">    const &#123; pluck &#125; &#x3D; rxjs.operators;</span><br><span class=\"line\">    const currentTarget$ &#x3D; fromEvent(document, &quot;click&quot;)</span><br><span class=\"line\">    \t.pipe(</span><br><span class=\"line\">        \tpluck(&quot;currenttarget&quot;)</span><br><span class=\"line\">        );\t&#x2F;&#x2F; Observable</span><br><span class=\"line\">    const observer &#x3D; currentTarget &#x3D;&gt; &#123;</span><br><span class=\"line\">        constsole.log(currentTarget);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    currentTarget$.subscribe(observer);</span><br></pre></td></tr></table></figure></li>\n<li><p>click이 발생하면 currentTarget$은 event 객체의 currentTarget을 전달</p>\n</li>\n<li><p>observer는 currentTarget을 구독함으로써 해당 데이터를 전달 받을 수 있음</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-3-RxJS-두번째-예제\"><a href=\"#1-2-3-RxJS-두번째-예제\" class=\"headerlink\" title=\"1.2.3 RxJS 두번째 예제\"></a>1.2.3 RxJS 두번째 예제</h3><ul>\n<li><p>예제: 사용자 정보를 가지는 배열에서 ‘촉’나라 사람만 추출</p>\n<ul>\n<li><code>`</code> javascript<br>const user = [{<pre><code>name: &quot;유비&quot;,\nbirthYear: 161,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;손권&quot;,\nbirthYear: 182,\nnationality: &quot;오&quot;\n</code></pre>},{<pre><code>name: &quot;관우&quot;,\nbirthYear: 160,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;장비&quot;,\nbirthYear: 168,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;조조&quot;,\nbirthYear: 155,\nnationality: &quot;위&quot;\n</code></pre>},{<pre><code>name: &quot;손권&quot;,\nbirthYear: 182,\nnationality: &quot;오&quot;\n</code></pre>}].filter(user =&gt; user.nationality === “촉”);<br>const log = user =&gt; console.log(user);<br>users.forEach(log);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 위 코드와 동일한 기능을 RxJS로 작성</span><br><span class=\"line\"></span><br><span class=\"line\">  - from 메소드</span><br><span class=\"line\"></span><br><span class=\"line\">    - Array를 Observable로 변환</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const &#123; from &#125; &#x3D; rxjs;</span><br><span class=\"line\">    const &#123; filter &#125; &#x3D; rxjs.operators;</span><br><span class=\"line\"></span><br><span class=\"line\">    const users$ &#x3D; from([&#123;</span><br><span class=\"line\">        name: &quot;유비&quot;,</span><br><span class=\"line\">        birthYear: 161,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;손권&quot;,</span><br><span class=\"line\">        birthYear: 182,</span><br><span class=\"line\">        nationality: &quot;오&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;관우&quot;,</span><br><span class=\"line\">        birthYear: 160,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;장비&quot;,</span><br><span class=\"line\">        birthYear: 168,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;조조&quot;,</span><br><span class=\"line\">        birthYear: 155,</span><br><span class=\"line\">        nationality: &quot;위&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;손권&quot;,</span><br><span class=\"line\">        birthYear: 182,</span><br><span class=\"line\">        nationality: &quot;오&quot;</span><br><span class=\"line\">    &#125;]).pipe(</span><br><span class=\"line\">    \tfilter(user &#x3D;&gt; user.nationality &#x3D;&#x3D;&#x3D; &quot;촉&quot;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    const observer &#x3D; user &#x3D;&gt; console.log(user);</span><br><span class=\"line\">    user$.subscribe(observer);</span><br></pre></td></tr></table></figure></li>\n<li><p>observer에서 로그 출력</p>\n</li>\n<li><p>forEach를 통해 log 함수를 호출하는 것같이, observer를 Observable에 subscribe함</p>\n</li>\n<li><p>Array 객체를 observable로 변화하고, pipe를 통해 filter 오퍼레이터 적용</p>\n<blockquote>\n<p>두 예제를 통한 결과: 비동기 방식, 동기 방식 모두 동일한 형태로 개발 가능하다!</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-RxJS-4대-천왕\"><a href=\"#1-3-RxJS-4대-천왕\" class=\"headerlink\" title=\"1.3 RxJS 4대 천왕\"></a>1.3 RxJS 4대 천왕</h3><ul>\n<li>RxJS에서의 중요한 개념들<ul>\n<li>Observable</li>\n<li>Operator</li>\n<li>Observer</li>\n<li>Subscription</li>\n<li>Subject</li>\n<li>Scheduler</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-1-Observable\"><a href=\"#1-3-1-Observable\" class=\"headerlink\" title=\"1.3.1 Observable\"></a>1.3.1 Observable</h3><blockquote>\n<p>시간을 축으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체</p>\n</blockquote>\n<h3 id=\"1-3-2-Operator\"><a href=\"#1-3-2-Operator\" class=\"headerlink\" title=\"1.3.2 Operator\"></a>1.3.2 Operator</h3><blockquote>\n<p>Observable을 생성하고 조작하는 함수</p>\n<p>오퍼레이터는 현재의 Observable 인스턴스를 기반으로 항상 새로운 Observable 인스턴스를 반환함</p>\n</blockquote>\n<h3 id=\"1-3-3-Observer\"><a href=\"#1-3-3-Observer\" class=\"headerlink\" title=\"1.3.3 Observer\"></a>1.3.3 Observer</h3><blockquote>\n<p> Observable에 의해 전달된 데이터를 소비하는 주체</p>\n<p>next, error, complete 함수를 가진 객체를 가리킴</p>\n</blockquote>\n<h3 id=\"1-3-4-Subscription\"><a href=\"#1-3-4-Subscription\" class=\"headerlink\" title=\"1.3.4 Subscription\"></a>1.3.4 Subscription</h3><blockquote>\n<p>Observable.prototype.subscribe의 반환값</p>\n<p>자원의 해제를 담당 -&gt; unsubscribe메소드를 통해</p>\n</blockquote>\n<h3 id=\"1-4-RxJS-개발-방법\"><a href=\"#1-4-RxJS-개발-방법\" class=\"headerlink\" title=\"1.4 RxJS 개발 방법\"></a>1.4 RxJS 개발 방법</h3><ol>\n<li>데이터 소스를 Observable로 변경</li>\n<li>오퍼레이터를 통해 데이터를 변경하거나 추출. 또는 여러 Observable을 하나의 Observable로 합치거나, 하나의 Observable을 여러개의 Observable로 만든다</li>\n<li>원하는 데이터를 받아 처리하는 observer 만들기</li>\n<li>Observable의 subscribe를 통해 Observer를 등록</li>\n<li>Observable 구독을 정지하고 자원을 해지</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Chap3-RxJS가-해결하려고-했던-문제-3-로직-오류\"><a href=\"#Chap3-RxJS가-해결하려고-했던-문제-3-로직-오류\" class=\"headerlink\" title=\"Chap3. RxJS가 해결하려고 했던 문제 3 : 로직 오류\"></a>Chap3. RxJS가 해결하려고 했던 문제 3 : <strong><em>로직 오류</em></strong></h2><h3 id=\"1-1-웹-애플리케이션의-로직\"><a href=\"#1-1-웹-애플리케이션의-로직\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 로직\"></a>1.1 웹 애플리케이션의 로직</h3><ul>\n<li>웹 애플리케이션은 전달 받은 입력값을 로직을 통해 새로운 결과를 반환하거나 표현함</li>\n<li>사용자 정보를 표현하는 UI를 작성하는 예제<ul>\n<li>데이터를 추출하고 변환 하는 작업<ul>\n<li>반복문</li>\n<li>분기문</li>\n<li>변수</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-로직의-복잡성-그리고-오류\"><a href=\"#1-2-로직의-복잡성-그리고-오류\" class=\"headerlink\" title=\"1.2 로직의 복잡성 그리고 오류\"></a>1.2 로직의 복잡성 그리고 오류</h3><ul>\n<li>반복문과 분기문, 변수는 코드의 복잡도를 높이고 가독성을 떨어트려 오류 발생 빈도를 높임</li>\n</ul>\n<h3 id=\"1-2-1-반복문과-분기문\"><a href=\"#1-2-1-반복문과-분기문\" class=\"headerlink\" title=\"1.2.1 반복문과 분기문\"></a>1.2.1 반복문과 분기문</h3><ul>\n<li>로직의 복잡성 줄이는 방법<ul>\n<li>기능별로 쪼개기<ul>\n<li>기능을 추상화할 수 있음<ul>\n<li>로직의 복잡성이 감소!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-2-변수는-오류의-시작\"><a href=\"#1-2-2-변수는-오류의-시작\" class=\"headerlink\" title=\"1.2.2 변수는 오류의 시작\"></a>1.2.2 변수는 오류의 시작</h3><ul>\n<li>브라우저 환경의 자바스크립트는 싱글 스레드 구조이기 때문에 멀티 스레드 사용으로 인한 동시성 문제는 발생하지 않음</li>\n<li>하지만 DOM에 등록된 이벤트 핸들러에 의해 변수의 값이 변경될 수 있음</li>\n<li>또는 비동기로 인해 변수의 값이 변경가능함</li>\n</ul>\n<h3 id=\"1-3-자바스크립트의-솔루션\"><a href=\"#1-3-자바스크립트의-솔루션\" class=\"headerlink\" title=\"1.3 자바스크립트의 솔루션\"></a>1.3 자바스크립트의 솔루션</h3><ul>\n<li>함수형 프로그래밍!<ul>\n<li>함수는 일급 객체임을 이용</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-1-로직의-분리\"><a href=\"#1-3-1-로직의-분리\" class=\"headerlink\" title=\"1.3.1 로직의 분리\"></a>1.3.1 로직의 분리</h3><ul>\n<li>이전 예제에서 logic, makeHtml 함수 생성<ul>\n<li>핵심 로직(process 함수)과 함수를 분리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-2-반복문-분기문-그리고-변수와의-이별\"><a href=\"#1-3-2-반복문-분기문-그리고-변수와의-이별\" class=\"headerlink\" title=\"1.3.2 반복문, 분기문, 그리고 변수와의 이별\"></a>1.3.2 반복문, 분기문, 그리고 변수와의 이별</h3><ul>\n<li><p><strong>고차함수 (higher-order function)</strong></p>\n<ul>\n<li><p>다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수</p>\n</li>\n<li><p>고차 함수는 변경되는 주요 부분을 함수로 제공</p>\n<ul>\n<li>이로인해 동일한 패턴 내에 존재하는 문제를 해결</li>\n</ul>\n</li>\n<li><p>함수의 합성, 변형과 같은 작업을 쉽게 할수 있게 해줌</p>\n<ul>\n<li>커링(currying), 메모이제이션(memoization) 기법</li>\n</ul>\n</li>\n<li><p><code>`</code> javascript<br>const twice = (f, v) =&gt; f(f(v));<br>const fn - v =&gt; v + 3;<br>console.log(twice(fn, 7));  // 13</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 고차 함수를 이용한 process 함수 개선</span><br><span class=\"line\"></span><br><span class=\"line\">  - if문 -&gt; filter로 변환</span><br><span class=\"line\">  - map을 이용하여 값을 변환</span><br><span class=\"line\">  - reduce를 이용하여 축적된 데이터를 반환</span><br><span class=\"line\"></span><br><span class=\"line\">- 순수함수</span><br><span class=\"line\"></span><br><span class=\"line\">  - 같은 입력이 주어지면 항상 같은 출력을 반환하는 함수</span><br><span class=\"line\"></span><br><span class=\"line\">-----</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4 RxJS는 어떻게 개선하였나?</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4.1 RxJS가 제공하는 오퍼레이터</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS에서도 ES5의 고차함수와 같은 operator를 제공함 ([RxJS 공홈 참고](http:&#x2F;&#x2F;reactivex.io&#x2F;rxjs&#x2F;manual&#x2F;overview.html#categories-of-operators))</span><br><span class=\"line\">- 오퍼레이터를 이용하면 Observable을 생성할 수도 있고, 전달된 데이터를 변환하거나 추출할 수 있음</span><br><span class=\"line\">  - Observable의 합성과 분리도 가능</span><br><span class=\"line\">  - 오퍼레이터를 많이 알면 좋지만, 이게 장벽이 될수도..</span><br><span class=\"line\">    - 오퍼레이터들은 함수형 프로그래밍에 근간</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4.2 불변 객체 Observable</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS의 오퍼레이터는 항상 새로운 Observable을 반환함</span><br><span class=\"line\">  - 이 Observable은 불변 객체임(immutable object)</span><br><span class=\"line\">    - 불변 객체 : 생성 후 상태를 바꿀 수 없는 객체</span><br><span class=\"line\">    - 불변 객체를 사용하면 프로그램의 복잡도가 줄어듬</span><br><span class=\"line\">- Array와 다른점</span><br><span class=\"line\">  - Array는 새로운 Array 객체 생성 작업만 함</span><br><span class=\"line\">  - Observable은 새로운 Observable을 만들고, 그 Observable이 오퍼레이터를 호출한 원래의 Observable을 내부적으로 subscribe 함</span><br><span class=\"line\">    - 즉, 링크드 리스트 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 오퍼레이터로 연결함</span><br><span class=\"line\">    - 따라서 source 부터 전달된 데이터, 에러, 종료 여부가 Observable의 오퍼레이터들을 통해 전달되거나 변형되어 구독한 Observer에게 전달할 수 있음</span><br><span class=\"line\"></span><br><span class=\"line\">## 부록2 : 함수형 프로그래밍(functional programming)</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.1 함수형 프로그래밍이란?</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 함수형 프로그래밍은 자료처리를 ***수학적 함수의 계산***으로 취급하고 ***상태 변경과 가변 데이터를 피하려는*** 프로그래밍 패러다임이다</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2 수학적 함수의 계산</span><br><span class=\"line\"></span><br><span class=\"line\">- 함수형 프로그래밍은 수학적인 계산을 이용하여 반복문이나 조건문과 같은 로직의 복잡성을 쉽게 풀고자 하는게 목적임</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.3 상태변경과 가변 데이터를 피하려는</span><br><span class=\"line\"></span><br><span class=\"line\">- 함수형 프로그래밍의 또다른 목적은 상태 변경을 피하려는 것</span><br><span class=\"line\">- 변수를 모든 오류의 근본 원인으로 치부함</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.4 순수함수, 상태가 없다</span><br><span class=\"line\"></span><br><span class=\"line\">- 순수함수?</span><br><span class=\"line\">  - 같은 입력이 주어지면, 항상 같은 출력을 반환</span><br><span class=\"line\">  - side effect를 발생시키지 않음</span><br><span class=\"line\">  - 외부의 가변(mutable) 데이터에 의존하지 않음</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.5 RxJS에 녹아있는 함수형 프로그래밍</span><br><span class=\"line\"></span><br><span class=\"line\">- 상태를 어떻게 전파할건지에 대한 해결 -&gt; 리엑티브 프로그래밍 패러다임</span><br><span class=\"line\">- 복잡한 문제를 외부 상태 변경 없이 효과적으로 해결 -&gt; 함수형 프로그래밍 패러다임</span><br><span class=\"line\">  - RxJS의 Observable은 오퍼레이터를 제공</span><br><span class=\"line\">  - 이로 인해 생성된 Observable은 불변 객체(immutable object)를 반환</span><br><span class=\"line\">  - 오퍼레이터의 인자로 순수 함수를 받음으로써 부원인과 부작용 제거</span><br><span class=\"line\">  - 이로인해 코드는 동시성 문제에서 자유롭고, 테스트 또한 용이해지고, 로직 또한 단순해짐</span><br><span class=\"line\"></span><br><span class=\"line\">-----</span><br><span class=\"line\"></span><br><span class=\"line\"># 2부</span><br><span class=\"line\"></span><br><span class=\"line\">## Chap 1. RxJS란 무엇인가?</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.1 RxJS란?</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; Observable을 사용하여 비동기및 이벤트 기반 프로그램을 작성하기 위한 라이브러리</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2 RxJS 시작하기</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2.1 RxJS 첫번째 예제</span><br><span class=\"line\"></span><br><span class=\"line\">- 페이지를 클릭시, event.currentTarget 정보를 콘솔로 출력해보자</span><br><span class=\"line\"></span><br><span class=\"line\">  - 이벤트 핸들러를 만들고, 그 핸들러를 addEventListener에 등록</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const eventHandler &#x3D; event &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(event.currentTarget);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;, eventHandler);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동일한 기능을 RxJS로 구현</p>\n<ul>\n<li><p>이벤트를 Observable로 변환하는 fromEvent 함수를 제공함</p>\n</li>\n<li><p><code>`</code> javascript<br>const { fromEvent } = rxjs;<br>cosnt click$ = fromEvent(document, “click”); // observable<br>const observer = event =&gt; {</p>\n<pre><code>console.log(event.currentTarget);\n</code></pre><p>};<br>click$.subscribe(observer);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 이벤트 핸들러 만드는 것과 같이 observer를 만듬</span><br><span class=\"line\"></span><br><span class=\"line\">  - addEventListener를 통해 이벤트 핸들러를 등록하는것과 같이, observer를 Observable에 구독(subscribe)함</span><br><span class=\"line\"></span><br><span class=\"line\">### 1.2.2 RxJS 첫번째 예제 개선하기</span><br><span class=\"line\"></span><br><span class=\"line\">- 앞 예제에서 실제 필요한 정보는 click 때의 currentTarget 정보임</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; **pluck(properties: ...string): Observable**</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &gt; pluck은 &#39;~을 뽑다&#39;는 의미. 추출할 속성들을 &#39;문자열&#39;로 지정할 수 있음</span><br><span class=\"line\"></span><br><span class=\"line\">- RxJS에서 오퍼레이터를 적용하기 위해 반드시 &#96;pipe&#96; 오퍼레이터를 통해 적용해야함</span><br><span class=\"line\"></span><br><span class=\"line\">- pipe 오퍼레이터는 파라미터로 전달된 오퍼레이터들이 적용된 새로운 Observable 인스턴스를 반환함</span><br><span class=\"line\"></span><br><span class=\"line\">- pipe 오퍼레이터는 Observable 인스턴스의 메소드로 존재함</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; **pipe(operations: …): Observable**</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &gt; 처리되어야 할 작업(operator)들을 순차적으로 받아서 처리함</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">- 도트체이닝 방식과 pipe 오퍼레이터 방식</span><br><span class=\"line\"></span><br><span class=\"line\">  - 도트 체이닝(dot chaining)</span><br><span class=\"line\">    - 메소드 호출방식처럼 .을 찍어서 동작</span><br><span class=\"line\">    - 문제점</span><br><span class=\"line\">      - 도트 체이닝을 구성하기 위해선 Observable 객체가 모든 오퍼레이터를 가지고 있어야함</span><br><span class=\"line\">      - 불필요한 오퍼레이터를 모두 가지고 있어야 하기 때문에, 파일 사이즈가 증가됨</span><br><span class=\"line\">  - pipe 오퍼레이터 방식</span><br><span class=\"line\">    - 웹팩이나 rollup을 통해 트리셰이킹(사용하지 않는 모듈을 번들링할 때 제거하는 기능)이 가능</span><br><span class=\"line\">    - 함수형태로만 오퍼레이터가 만들어지므로 Observable과의 결합도를 떨어트려 쉽게 사용자 오퍼레이터를 작성 가능</span><br><span class=\"line\"></span><br><span class=\"line\">- pluck 오퍼레이터를 이용하여 코드 리펙토링</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const &#123; fromEvent &#125; &#x3D; rxjs;</span><br><span class=\"line\">    const &#123; pluck &#125; &#x3D; rxjs.operators;</span><br><span class=\"line\">    const currentTarget$ &#x3D; fromEvent(document, &quot;click&quot;)</span><br><span class=\"line\">    \t.pipe(</span><br><span class=\"line\">        \tpluck(&quot;currenttarget&quot;)</span><br><span class=\"line\">        );\t&#x2F;&#x2F; Observable</span><br><span class=\"line\">    const observer &#x3D; currentTarget &#x3D;&gt; &#123;</span><br><span class=\"line\">        constsole.log(currentTarget);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    currentTarget$.subscribe(observer);</span><br></pre></td></tr></table></figure></li>\n<li><p>click이 발생하면 currentTarget$은 event 객체의 currentTarget을 전달</p>\n</li>\n<li><p>observer는 currentTarget을 구독함으로써 해당 데이터를 전달 받을 수 있음</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-3-RxJS-두번째-예제\"><a href=\"#1-2-3-RxJS-두번째-예제\" class=\"headerlink\" title=\"1.2.3 RxJS 두번째 예제\"></a>1.2.3 RxJS 두번째 예제</h3><ul>\n<li><p>예제: 사용자 정보를 가지는 배열에서 ‘촉’나라 사람만 추출</p>\n<ul>\n<li><code>`</code> javascript<br>const user = [{<pre><code>name: &quot;유비&quot;,\nbirthYear: 161,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;손권&quot;,\nbirthYear: 182,\nnationality: &quot;오&quot;\n</code></pre>},{<pre><code>name: &quot;관우&quot;,\nbirthYear: 160,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;장비&quot;,\nbirthYear: 168,\nnationality: &quot;촉&quot;\n</code></pre>},{<pre><code>name: &quot;조조&quot;,\nbirthYear: 155,\nnationality: &quot;위&quot;\n</code></pre>},{<pre><code>name: &quot;손권&quot;,\nbirthYear: 182,\nnationality: &quot;오&quot;\n</code></pre>}].filter(user =&gt; user.nationality === “촉”);<br>const log = user =&gt; console.log(user);<br>users.forEach(log);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 위 코드와 동일한 기능을 RxJS로 작성</span><br><span class=\"line\"></span><br><span class=\"line\">  - from 메소드</span><br><span class=\"line\"></span><br><span class=\"line\">    - Array를 Observable로 변환</span><br><span class=\"line\"></span><br><span class=\"line\">  - &#96;&#96;&#96; javascript</span><br><span class=\"line\">    const &#123; from &#125; &#x3D; rxjs;</span><br><span class=\"line\">    const &#123; filter &#125; &#x3D; rxjs.operators;</span><br><span class=\"line\"></span><br><span class=\"line\">    const users$ &#x3D; from([&#123;</span><br><span class=\"line\">        name: &quot;유비&quot;,</span><br><span class=\"line\">        birthYear: 161,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;손권&quot;,</span><br><span class=\"line\">        birthYear: 182,</span><br><span class=\"line\">        nationality: &quot;오&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;관우&quot;,</span><br><span class=\"line\">        birthYear: 160,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;장비&quot;,</span><br><span class=\"line\">        birthYear: 168,</span><br><span class=\"line\">        nationality: &quot;촉&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;조조&quot;,</span><br><span class=\"line\">        birthYear: 155,</span><br><span class=\"line\">        nationality: &quot;위&quot;</span><br><span class=\"line\">    &#125;,&#123;</span><br><span class=\"line\">        name: &quot;손권&quot;,</span><br><span class=\"line\">        birthYear: 182,</span><br><span class=\"line\">        nationality: &quot;오&quot;</span><br><span class=\"line\">    &#125;]).pipe(</span><br><span class=\"line\">    \tfilter(user &#x3D;&gt; user.nationality &#x3D;&#x3D;&#x3D; &quot;촉&quot;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    const observer &#x3D; user &#x3D;&gt; console.log(user);</span><br><span class=\"line\">    user$.subscribe(observer);</span><br></pre></td></tr></table></figure></li>\n<li><p>observer에서 로그 출력</p>\n</li>\n<li><p>forEach를 통해 log 함수를 호출하는 것같이, observer를 Observable에 subscribe함</p>\n</li>\n<li><p>Array 객체를 observable로 변화하고, pipe를 통해 filter 오퍼레이터 적용</p>\n<blockquote>\n<p>두 예제를 통한 결과: 비동기 방식, 동기 방식 모두 동일한 형태로 개발 가능하다!</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-RxJS-4대-천왕\"><a href=\"#1-3-RxJS-4대-천왕\" class=\"headerlink\" title=\"1.3 RxJS 4대 천왕\"></a>1.3 RxJS 4대 천왕</h3><ul>\n<li>RxJS에서의 중요한 개념들<ul>\n<li>Observable</li>\n<li>Operator</li>\n<li>Observer</li>\n<li>Subscription</li>\n<li>Subject</li>\n<li>Scheduler</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-1-Observable\"><a href=\"#1-3-1-Observable\" class=\"headerlink\" title=\"1.3.1 Observable\"></a>1.3.1 Observable</h3><blockquote>\n<p>시간을 축으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체</p>\n</blockquote>\n<h3 id=\"1-3-2-Operator\"><a href=\"#1-3-2-Operator\" class=\"headerlink\" title=\"1.3.2 Operator\"></a>1.3.2 Operator</h3><blockquote>\n<p>Observable을 생성하고 조작하는 함수</p>\n<p>오퍼레이터는 현재의 Observable 인스턴스를 기반으로 항상 새로운 Observable 인스턴스를 반환함</p>\n</blockquote>\n<h3 id=\"1-3-3-Observer\"><a href=\"#1-3-3-Observer\" class=\"headerlink\" title=\"1.3.3 Observer\"></a>1.3.3 Observer</h3><blockquote>\n<p> Observable에 의해 전달된 데이터를 소비하는 주체</p>\n<p>next, error, complete 함수를 가진 객체를 가리킴</p>\n</blockquote>\n<h3 id=\"1-3-4-Subscription\"><a href=\"#1-3-4-Subscription\" class=\"headerlink\" title=\"1.3.4 Subscription\"></a>1.3.4 Subscription</h3><blockquote>\n<p>Observable.prototype.subscribe의 반환값</p>\n<p>자원의 해제를 담당 -&gt; unsubscribe메소드를 통해</p>\n</blockquote>\n<h3 id=\"1-4-RxJS-개발-방법\"><a href=\"#1-4-RxJS-개발-방법\" class=\"headerlink\" title=\"1.4 RxJS 개발 방법\"></a>1.4 RxJS 개발 방법</h3><ol>\n<li>데이터 소스를 Observable로 변경</li>\n<li>오퍼레이터를 통해 데이터를 변경하거나 추출. 또는 여러 Observable을 하나의 Observable로 합치거나, 하나의 Observable을 여러개의 Observable로 만든다</li>\n<li>원하는 데이터를 받아 처리하는 observer 만들기</li>\n<li>Observable의 subscribe를 통해 Observer를 등록</li>\n<li>Observable 구독을 정지하고 자원을 해지</li>\n</ol>\n"},{"title":"RxJS Quick Start, 책 정리 (35~69p)","date":"2019-03-07T16:52:47.000Z","_content":"\n## Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류\n\n### 1.1 웹 애플리케이션의 입력 데이터\n\n- 데이터 흐름의 관점\n  - 서버 / 브라우저 / 브라우저 UI 객체 간에 데이터 이동\n- State machine 관점\n  - 동기 / 비동기 처리\n\n### 1.2 입력 데이터의 전달 시점이 다양하다\n\n### 1.2.1 동기\n\n- 장점: 순차적으로 진행되므로 개발이 쉽다\n- 단점: 웹브라우저와 같이 단일 UI 스레드를 사용할 경우, 해당 작업이 끝날때까지 브라우저는 대기해야함\n\n### 1.2.2 비동기\n\n- 호출하는 함수가 호출되는 함수의 작업 완료를 기다리지 않고 그 다음을 진행함\n  - 호출되는 함수의 작업이 완료되면 별도의 **이벤트나 콜백 함수**를 통해 결과를 전달함\n- 장점: 효율적인 작업 진행이 가능\n- 단점: 개발은 더욱 복잡해지고, 오류 확률이 높아짐\n\n### 1.3 동기와 비동기를 함께 사용할 수 밖에 없나?\n\n- 단일 스레드 기반의 브라우저 환경에서는 비동기 방식을 사용하지 않으면 특정 작업이 프로세스를 독점하기 때문에 성능상 문제가 발생함\n- 어쩔수없음\n\n### 1.4 RxJS는 어떻게 개선했나?\n\n- 입력 데이터에 대한 구조적인 문제를 개선하고자 했음\n  - 구조의 일원화 -> 개발을 단순화\n- RxJS는 동기와 비동기의 차이점을 **시간**이라는 개념을 도입함으로써 해결하려함\n  - 동기와 비동기는 시간의 축으로 봤을때, 같은 형태이다! => **스트림** 이라 표현함\n- RxJS에서는 이런 스트림을 표현하는 Obsevable 클래스를 제공함\n\n### 1.4.1 Observable\n\n>  시간을 인덱스로 둔 컬렉션을 추상화한 클래스\n\n- 동기나 비동기의 동작 방식으로 전달된 데이터를 하나의 컬렉션으로 바라볼 수 있게 해줌\n  - 개발자는 데이터가 어떤 형태로 전달되는지에 대해 고민할 필요 없음\n  - 단지 Observable을 통해 데이터를 전달 받으면 됨\n\n### 1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.\n\n* Observable은 모든 데이터를 다룬다\n\n  * 동기든 비동기든 모든 데이터 타입을 동일한 형태로 사용\n\n* `event`를 Observable로 만들 때는 `fromEvent` 를 이용\n\n  * ``` javascript\n    fromEvent(HTMLElement, \"이벤트 타입\");\n    ```\n\n  * Example\n\n    ``` javascript\n    const { fromEvent } = rxjs;\n    const key$ = fromEvent(document, \"keydown\");\n    const click$ = fromEvent(document, \"click\");\n    ```\n\n* 배열 같은 `iterable`이나 `array-like`,` Promise 데이터` 를 Observable로 만들 때는 `from`을 이용\n\n  * ``` javascrip\n    from(Iterable | Array-like | Promise);\n    ```\n\n  * Example\n\n  * ``` javascript\n    const { from } = rxjs;\n    const arrayFrom$ = from([10, 20, 30]);\n    const iterableFrom$ = from(new Map([1, 2], [2, 4], [4, 8]));\n    const ajaxPromiseFrom$ = from(fetch(\"./api/some.json\"));\n    ```\n\n* 단일 데이터를 연속으로 전달할 경우엔 `of` 를 이용\n\n  * ``` javascript\n    of(...items);\n    ```\n\n  * Example\n\n  * ``` javascript\n    const { of } = rxjs;\n    const numberOf$ = of(10, 20, 30);\n    const stringOf$ = of(\"a\", \"b\", \"c\");\n    ```\n\n> Observable 객체의 변수명은 관용적으로 접미사로 $(Stream의 S와 유사해서라고함) 를 붙인다.\n\n----\n\n## Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제\n\n### 1.1 웹 애플리케이션의 상태\n\n- 웹 애플리케이션은 하나의 큰 상태머신\n  - 이를 구성하고 있는 크고 작은 단위들 또한 하나의 상태머신임\n    - 각각의 상태머신들은 각자의 상태를 가지고있음\n    - 상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결됨\n    - 각 모듈간에 의존성이 있음\n\n### 1.2 웹 애플리케이션의 상태 변화로 인한 문제점\n\n- System과 User의 관계에 따른 상태 변화 예제\n\n### 1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함\n\n### 1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함\n\n- User의 인터페이스가 늘어난다면, 다른 User와의 의존 관계에 있는 클래스 간에 의사소통 비용이 발생\n\n### 1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함\n\n-----\n\n### 1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴\n\n### 1.3.1 Loosely Coupling\n\n- 옵저버 패턴에서는 상태가 변경될 대상을 `Subject` 라고 함\n- 그 상태 변화를 관찰하는 대상을 `Observer` 라고 함\n- 옵저버 패턴에서는 Subject와 Observer가 서로 느슨하게 연결(Loosely coupling)되어있음\n  - 서로 상호작용을 하지만, 서로 잘 모른다는 뜻\n\n### 1.3.2 자동 상태 전파\n\n* Subject로 부터 데이터를 제공 받음 -> push 방식\n  * Subject와 Observer가 1:n의 상황에서 더욱 효과적\n  * 데이터 변경 시점을 매번 확인할 필요 없이, 변경되었다는 신호가오면 처리\n\n### 1.3.3 인터페이스의 단일화\n\n- 인터페이스가있다는 것은 많은 비용을 수반함\n  - 인터페이스가 있어도 없게 만들면 됨\n    - 인터페이스를 특정 몇개로 통일\n- Observer pattern은 `Observer.update` 만 존재하기 때문에, Subject에서는 Observer인터페이스에 대한 별도의 비용이 존재하지 않음\n\n-----\n\n### 1.4 옵저버 패턴의 흔한 예\n\n- 뉴스를 발행하는 신문사(subject)와 이를 구독하는 고객(observer)의 경우\n\n  - 신문사는 고객을 등록하고, 신문이 발행될 때 각각의 고객에게 신문이 발행되었다고 알려줌(notify)\n  - 신문이 발행되면 어떤 고객은 뉴스를 읽거나 스크랩함\n\n  - subject => add, remove, notify\n  - observer => update\n\n-----\n\n### 1.5 옵저버 패턴적용하기\n\n- 기존 예제에 적용, user와 system의 의존성을 느슨하게함\n\n-----\n\n### 1.6 RxJS는 무엇을 해결하려 했나?\n\n- 상태 변화에 대한 문제를 옵저버 패턴을 기반으로 해결하려함\n\n### 1.6.1 상태 변화는 언제 종료되는가?\n\n- observer와 subject간에 별도의 규칙을 정해서 observer측에서 별도의 예외처리를 해줘야함\n  - 아쉬운 부분\n\n### 1.6.2 상태변화에서 에러가 발생하면?\n\n- subject 자체적으로 에러 처리\n  - try-catch문을 통해\n- observer 쪽에서 에러 발생 여부를 인지하고, 이에대한 별도의 처리\n- 옵저버 패턴은 에러 발생 여부를 Observer들에게 전달할 방법이 딱히 없음\n\n### 1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우\n\n- 예) 신문 기자이면서 동시에 구독자인 사람이 있는 경우\n  - 구독받은 기사의 내용을 조금 변경하여 가짜 뉴스를 만들어냄\n- 데이터를 양방향으로 흐르게하면 편할수 있으나, 코드의 복잡도를 증가시킴\n\n-----\n\n### 1.7 RxJS는 어떻게 개선했나?\n\n- RxJS에서 전달되는 데이터는 모두 Observable 형태로 반환됨.\n\n  - Observable은 구독(subscribe) 과정 후부터 데이터를 전달받음\n\n  - ``` javascript\n    const {fromEvent } = rxjs;\n    const click$ = fromEvent(document, \"click\");\n    click$.subscribe(function(v) {\n        console.log(v);\n    });\n\n    // 또는\n    click$.subscribe({\n        next: function(v) {\n            console.log(v);\n        }\n    });\n    ```\n\n- 반면 옵저버 패턴은 add 과정 후부터 데이터를 전달받음\n\n> RxJS의 Observer는 함수와 객체 둘 다 가능하며  subscribe라는 메소드를 통해 Subject에게 전달됨\n>\n> RxJS의 Observable은 단지 하나의 Observer에게 독립적인 데이터를 전달함\n\n### 1.7.1 인터페이스의 확장\n\n- RxJS는 시간의 축으로 데이터를 보기 때문에 데이터의 연속적인 변화를 Observer에서 표현할 수 있도록 기존 update 메소드를 next로 바꿈\n- 또한 종료를 나타내는 complete, 에러 시점을 나타내는 error 메소드가 추가됨\n  - 옵저버 패턴에서의 Observer는 update하나의 메소드를 가짐\n  - 반면 Rxjs의 Observer는 next, complete, error 세개의 메소드\n- **객체는 상태를 가질 수 있기때문에, RxJS의 subscribe는 가급적 상태가 존재하지 않는 함수 형태를 사용함**\n\n### 1.7.2 Observable은 Read-only\n\n- 단방향 데이터 흐름을 위함\n  - Observer에게 데이터를 전달만함, 받지 않음\n\n-----\n\n### 1.8 Observable은 리액티브함\n\n- 데이터가 발생하면 Observer에게 자동으로 그리고 빠르게 변경된 데이터를 전달하기 떄문에 리액티브하다고 함\n  - [리액티브 프로그래밍](https://en.wikipedia.org/wiki/Reactive_programming)\n\n\n\n\n\n","source":"_posts/RxJS-정리2.md","raw":"---\ntitle: RxJS Quick Start, 책 정리 (35~69p)\ndate: 2019-03-08 01:52:47\ncategories:\n    - RxJS\ntags:\n    - RxJS\n---\n\n## Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류\n\n### 1.1 웹 애플리케이션의 입력 데이터\n\n- 데이터 흐름의 관점\n  - 서버 / 브라우저 / 브라우저 UI 객체 간에 데이터 이동\n- State machine 관점\n  - 동기 / 비동기 처리\n\n### 1.2 입력 데이터의 전달 시점이 다양하다\n\n### 1.2.1 동기\n\n- 장점: 순차적으로 진행되므로 개발이 쉽다\n- 단점: 웹브라우저와 같이 단일 UI 스레드를 사용할 경우, 해당 작업이 끝날때까지 브라우저는 대기해야함\n\n### 1.2.2 비동기\n\n- 호출하는 함수가 호출되는 함수의 작업 완료를 기다리지 않고 그 다음을 진행함\n  - 호출되는 함수의 작업이 완료되면 별도의 **이벤트나 콜백 함수**를 통해 결과를 전달함\n- 장점: 효율적인 작업 진행이 가능\n- 단점: 개발은 더욱 복잡해지고, 오류 확률이 높아짐\n\n### 1.3 동기와 비동기를 함께 사용할 수 밖에 없나?\n\n- 단일 스레드 기반의 브라우저 환경에서는 비동기 방식을 사용하지 않으면 특정 작업이 프로세스를 독점하기 때문에 성능상 문제가 발생함\n- 어쩔수없음\n\n### 1.4 RxJS는 어떻게 개선했나?\n\n- 입력 데이터에 대한 구조적인 문제를 개선하고자 했음\n  - 구조의 일원화 -> 개발을 단순화\n- RxJS는 동기와 비동기의 차이점을 **시간**이라는 개념을 도입함으로써 해결하려함\n  - 동기와 비동기는 시간의 축으로 봤을때, 같은 형태이다! => **스트림** 이라 표현함\n- RxJS에서는 이런 스트림을 표현하는 Obsevable 클래스를 제공함\n\n### 1.4.1 Observable\n\n>  시간을 인덱스로 둔 컬렉션을 추상화한 클래스\n\n- 동기나 비동기의 동작 방식으로 전달된 데이터를 하나의 컬렉션으로 바라볼 수 있게 해줌\n  - 개발자는 데이터가 어떤 형태로 전달되는지에 대해 고민할 필요 없음\n  - 단지 Observable을 통해 데이터를 전달 받으면 됨\n\n### 1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.\n\n* Observable은 모든 데이터를 다룬다\n\n  * 동기든 비동기든 모든 데이터 타입을 동일한 형태로 사용\n\n* `event`를 Observable로 만들 때는 `fromEvent` 를 이용\n\n  * ``` javascript\n    fromEvent(HTMLElement, \"이벤트 타입\");\n    ```\n\n  * Example\n\n    ``` javascript\n    const { fromEvent } = rxjs;\n    const key$ = fromEvent(document, \"keydown\");\n    const click$ = fromEvent(document, \"click\");\n    ```\n\n* 배열 같은 `iterable`이나 `array-like`,` Promise 데이터` 를 Observable로 만들 때는 `from`을 이용\n\n  * ``` javascrip\n    from(Iterable | Array-like | Promise);\n    ```\n\n  * Example\n\n  * ``` javascript\n    const { from } = rxjs;\n    const arrayFrom$ = from([10, 20, 30]);\n    const iterableFrom$ = from(new Map([1, 2], [2, 4], [4, 8]));\n    const ajaxPromiseFrom$ = from(fetch(\"./api/some.json\"));\n    ```\n\n* 단일 데이터를 연속으로 전달할 경우엔 `of` 를 이용\n\n  * ``` javascript\n    of(...items);\n    ```\n\n  * Example\n\n  * ``` javascript\n    const { of } = rxjs;\n    const numberOf$ = of(10, 20, 30);\n    const stringOf$ = of(\"a\", \"b\", \"c\");\n    ```\n\n> Observable 객체의 변수명은 관용적으로 접미사로 $(Stream의 S와 유사해서라고함) 를 붙인다.\n\n----\n\n## Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제\n\n### 1.1 웹 애플리케이션의 상태\n\n- 웹 애플리케이션은 하나의 큰 상태머신\n  - 이를 구성하고 있는 크고 작은 단위들 또한 하나의 상태머신임\n    - 각각의 상태머신들은 각자의 상태를 가지고있음\n    - 상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결됨\n    - 각 모듈간에 의존성이 있음\n\n### 1.2 웹 애플리케이션의 상태 변화로 인한 문제점\n\n- System과 User의 관계에 따른 상태 변화 예제\n\n### 1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함\n\n### 1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함\n\n- User의 인터페이스가 늘어난다면, 다른 User와의 의존 관계에 있는 클래스 간에 의사소통 비용이 발생\n\n### 1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함\n\n-----\n\n### 1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴\n\n### 1.3.1 Loosely Coupling\n\n- 옵저버 패턴에서는 상태가 변경될 대상을 `Subject` 라고 함\n- 그 상태 변화를 관찰하는 대상을 `Observer` 라고 함\n- 옵저버 패턴에서는 Subject와 Observer가 서로 느슨하게 연결(Loosely coupling)되어있음\n  - 서로 상호작용을 하지만, 서로 잘 모른다는 뜻\n\n### 1.3.2 자동 상태 전파\n\n* Subject로 부터 데이터를 제공 받음 -> push 방식\n  * Subject와 Observer가 1:n의 상황에서 더욱 효과적\n  * 데이터 변경 시점을 매번 확인할 필요 없이, 변경되었다는 신호가오면 처리\n\n### 1.3.3 인터페이스의 단일화\n\n- 인터페이스가있다는 것은 많은 비용을 수반함\n  - 인터페이스가 있어도 없게 만들면 됨\n    - 인터페이스를 특정 몇개로 통일\n- Observer pattern은 `Observer.update` 만 존재하기 때문에, Subject에서는 Observer인터페이스에 대한 별도의 비용이 존재하지 않음\n\n-----\n\n### 1.4 옵저버 패턴의 흔한 예\n\n- 뉴스를 발행하는 신문사(subject)와 이를 구독하는 고객(observer)의 경우\n\n  - 신문사는 고객을 등록하고, 신문이 발행될 때 각각의 고객에게 신문이 발행되었다고 알려줌(notify)\n  - 신문이 발행되면 어떤 고객은 뉴스를 읽거나 스크랩함\n\n  - subject => add, remove, notify\n  - observer => update\n\n-----\n\n### 1.5 옵저버 패턴적용하기\n\n- 기존 예제에 적용, user와 system의 의존성을 느슨하게함\n\n-----\n\n### 1.6 RxJS는 무엇을 해결하려 했나?\n\n- 상태 변화에 대한 문제를 옵저버 패턴을 기반으로 해결하려함\n\n### 1.6.1 상태 변화는 언제 종료되는가?\n\n- observer와 subject간에 별도의 규칙을 정해서 observer측에서 별도의 예외처리를 해줘야함\n  - 아쉬운 부분\n\n### 1.6.2 상태변화에서 에러가 발생하면?\n\n- subject 자체적으로 에러 처리\n  - try-catch문을 통해\n- observer 쪽에서 에러 발생 여부를 인지하고, 이에대한 별도의 처리\n- 옵저버 패턴은 에러 발생 여부를 Observer들에게 전달할 방법이 딱히 없음\n\n### 1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우\n\n- 예) 신문 기자이면서 동시에 구독자인 사람이 있는 경우\n  - 구독받은 기사의 내용을 조금 변경하여 가짜 뉴스를 만들어냄\n- 데이터를 양방향으로 흐르게하면 편할수 있으나, 코드의 복잡도를 증가시킴\n\n-----\n\n### 1.7 RxJS는 어떻게 개선했나?\n\n- RxJS에서 전달되는 데이터는 모두 Observable 형태로 반환됨.\n\n  - Observable은 구독(subscribe) 과정 후부터 데이터를 전달받음\n\n  - ``` javascript\n    const {fromEvent } = rxjs;\n    const click$ = fromEvent(document, \"click\");\n    click$.subscribe(function(v) {\n        console.log(v);\n    });\n\n    // 또는\n    click$.subscribe({\n        next: function(v) {\n            console.log(v);\n        }\n    });\n    ```\n\n- 반면 옵저버 패턴은 add 과정 후부터 데이터를 전달받음\n\n> RxJS의 Observer는 함수와 객체 둘 다 가능하며  subscribe라는 메소드를 통해 Subject에게 전달됨\n>\n> RxJS의 Observable은 단지 하나의 Observer에게 독립적인 데이터를 전달함\n\n### 1.7.1 인터페이스의 확장\n\n- RxJS는 시간의 축으로 데이터를 보기 때문에 데이터의 연속적인 변화를 Observer에서 표현할 수 있도록 기존 update 메소드를 next로 바꿈\n- 또한 종료를 나타내는 complete, 에러 시점을 나타내는 error 메소드가 추가됨\n  - 옵저버 패턴에서의 Observer는 update하나의 메소드를 가짐\n  - 반면 Rxjs의 Observer는 next, complete, error 세개의 메소드\n- **객체는 상태를 가질 수 있기때문에, RxJS의 subscribe는 가급적 상태가 존재하지 않는 함수 형태를 사용함**\n\n### 1.7.2 Observable은 Read-only\n\n- 단방향 데이터 흐름을 위함\n  - Observer에게 데이터를 전달만함, 받지 않음\n\n-----\n\n### 1.8 Observable은 리액티브함\n\n- 데이터가 발생하면 Observer에게 자동으로 그리고 빠르게 변경된 데이터를 전달하기 떄문에 리액티브하다고 함\n  - [리액티브 프로그래밍](https://en.wikipedia.org/wiki/Reactive_programming)\n\n\n\n\n\n","slug":"RxJS-정리2","published":1,"updated":"2021-04-10T07:56:03.145Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq3000nbqwx1po85vrk","content":"<h2 id=\"Chap1-RxJS가-해결하려-했던-문제-1-입력-데이터의-오류\"><a href=\"#Chap1-RxJS가-해결하려-했던-문제-1-입력-데이터의-오류\" class=\"headerlink\" title=\"Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류\"></a>Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류</h2><h3 id=\"1-1-웹-애플리케이션의-입력-데이터\"><a href=\"#1-1-웹-애플리케이션의-입력-데이터\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 입력 데이터\"></a>1.1 웹 애플리케이션의 입력 데이터</h3><ul>\n<li>데이터 흐름의 관점<ul>\n<li>서버 / 브라우저 / 브라우저 UI 객체 간에 데이터 이동</li>\n</ul>\n</li>\n<li>State machine 관점<ul>\n<li>동기 / 비동기 처리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-입력-데이터의-전달-시점이-다양하다\"><a href=\"#1-2-입력-데이터의-전달-시점이-다양하다\" class=\"headerlink\" title=\"1.2 입력 데이터의 전달 시점이 다양하다\"></a>1.2 입력 데이터의 전달 시점이 다양하다</h3><h3 id=\"1-2-1-동기\"><a href=\"#1-2-1-동기\" class=\"headerlink\" title=\"1.2.1 동기\"></a>1.2.1 동기</h3><ul>\n<li>장점: 순차적으로 진행되므로 개발이 쉽다</li>\n<li>단점: 웹브라우저와 같이 단일 UI 스레드를 사용할 경우, 해당 작업이 끝날때까지 브라우저는 대기해야함</li>\n</ul>\n<h3 id=\"1-2-2-비동기\"><a href=\"#1-2-2-비동기\" class=\"headerlink\" title=\"1.2.2 비동기\"></a>1.2.2 비동기</h3><ul>\n<li>호출하는 함수가 호출되는 함수의 작업 완료를 기다리지 않고 그 다음을 진행함<ul>\n<li>호출되는 함수의 작업이 완료되면 별도의 <strong>이벤트나 콜백 함수</strong>를 통해 결과를 전달함</li>\n</ul>\n</li>\n<li>장점: 효율적인 작업 진행이 가능</li>\n<li>단점: 개발은 더욱 복잡해지고, 오류 확률이 높아짐</li>\n</ul>\n<h3 id=\"1-3-동기와-비동기를-함께-사용할-수-밖에-없나\"><a href=\"#1-3-동기와-비동기를-함께-사용할-수-밖에-없나\" class=\"headerlink\" title=\"1.3 동기와 비동기를 함께 사용할 수 밖에 없나?\"></a>1.3 동기와 비동기를 함께 사용할 수 밖에 없나?</h3><ul>\n<li>단일 스레드 기반의 브라우저 환경에서는 비동기 방식을 사용하지 않으면 특정 작업이 프로세스를 독점하기 때문에 성능상 문제가 발생함</li>\n<li>어쩔수없음</li>\n</ul>\n<h3 id=\"1-4-RxJS는-어떻게-개선했나\"><a href=\"#1-4-RxJS는-어떻게-개선했나\" class=\"headerlink\" title=\"1.4 RxJS는 어떻게 개선했나?\"></a>1.4 RxJS는 어떻게 개선했나?</h3><ul>\n<li>입력 데이터에 대한 구조적인 문제를 개선하고자 했음<ul>\n<li>구조의 일원화 -&gt; 개발을 단순화</li>\n</ul>\n</li>\n<li>RxJS는 동기와 비동기의 차이점을 <strong>시간</strong>이라는 개념을 도입함으로써 해결하려함<ul>\n<li>동기와 비동기는 시간의 축으로 봤을때, 같은 형태이다! =&gt; <strong>스트림</strong> 이라 표현함</li>\n</ul>\n</li>\n<li>RxJS에서는 이런 스트림을 표현하는 Obsevable 클래스를 제공함</li>\n</ul>\n<h3 id=\"1-4-1-Observable\"><a href=\"#1-4-1-Observable\" class=\"headerlink\" title=\"1.4.1 Observable\"></a>1.4.1 Observable</h3><blockquote>\n<p> 시간을 인덱스로 둔 컬렉션을 추상화한 클래스</p>\n</blockquote>\n<ul>\n<li>동기나 비동기의 동작 방식으로 전달된 데이터를 하나의 컬렉션으로 바라볼 수 있게 해줌<ul>\n<li>개발자는 데이터가 어떤 형태로 전달되는지에 대해 고민할 필요 없음</li>\n<li>단지 Observable을 통해 데이터를 전달 받으면 됨</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다\"><a href=\"#1-4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다\" class=\"headerlink\" title=\"1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.\"></a>1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.</h3><ul>\n<li><p>Observable은 모든 데이터를 다룬다</p>\n<ul>\n<li>동기든 비동기든 모든 데이터 타입을 동일한 형태로 사용</li>\n</ul>\n</li>\n<li><p><code>event</code>를 Observable로 만들 때는 <code>fromEvent</code> 를 이용</p>\n<ul>\n<li><code>`</code> javascript<br>fromEvent(HTMLElement, “이벤트 타입”);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">  &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; fromEvent &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const key$ &#x3D; fromEvent(document, &quot;keydown&quot;);</span><br><span class=\"line\">  const click$ &#x3D; fromEvent(document, &quot;click&quot;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>배열 같은 <code>iterable</code>이나 <code>array-like</code>,<code>Promise 데이터</code> 를 Observable로 만들 때는 <code>from</code>을 이용</p>\n<ul>\n<li><code>`</code> javascrip<br>from(Iterable | Array-like | Promise);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">* &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; from &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const arrayFrom$ &#x3D; from([10, 20, 30]);</span><br><span class=\"line\">  const iterableFrom$ &#x3D; from(new Map([1, 2], [2, 4], [4, 8]));</span><br><span class=\"line\">  const ajaxPromiseFrom$ &#x3D; from(fetch(&quot;.&#x2F;api&#x2F;some.json&quot;));</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>단일 데이터를 연속으로 전달할 경우엔 <code>of</code> 를 이용</p>\n<ul>\n<li><code>`</code> javascript<br>of(…items);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">* &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; of &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const numberOf$ &#x3D; of(10, 20, 30);</span><br><span class=\"line\">  const stringOf$ &#x3D; of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Observable 객체의 변수명은 관용적으로 접미사로 $(Stream의 S와 유사해서라고함) 를 붙인다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chap2-RxJS가-해결하려고-했던-문제-2-상태-전파-State-Propagation-문제\"><a href=\"#Chap2-RxJS가-해결하려고-했던-문제-2-상태-전파-State-Propagation-문제\" class=\"headerlink\" title=\"Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제\"></a>Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제</h2><h3 id=\"1-1-웹-애플리케이션의-상태\"><a href=\"#1-1-웹-애플리케이션의-상태\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 상태\"></a>1.1 웹 애플리케이션의 상태</h3><ul>\n<li>웹 애플리케이션은 하나의 큰 상태머신<ul>\n<li>이를 구성하고 있는 크고 작은 단위들 또한 하나의 상태머신임<ul>\n<li>각각의 상태머신들은 각자의 상태를 가지고있음</li>\n<li>상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결됨</li>\n<li>각 모듈간에 의존성이 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-웹-애플리케이션의-상태-변화로-인한-문제점\"><a href=\"#1-2-웹-애플리케이션의-상태-변화로-인한-문제점\" class=\"headerlink\" title=\"1.2 웹 애플리케이션의 상태 변화로 인한 문제점\"></a>1.2 웹 애플리케이션의 상태 변화로 인한 문제점</h3><ul>\n<li>System과 User의 관계에 따른 상태 변화 예제</li>\n</ul>\n<h3 id=\"1-2-1-첫째-User의-인터페이스가-변겨오디면-System도-함께-변경되어야함\"><a href=\"#1-2-1-첫째-User의-인터페이스가-변겨오디면-System도-함께-변경되어야함\" class=\"headerlink\" title=\"1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함\"></a>1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함</h3><h3 id=\"1-2-2-둘쨰-User의-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생함\"><a href=\"#1-2-2-둘쨰-User의-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생함\" class=\"headerlink\" title=\"1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함\"></a>1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함</h3><ul>\n<li>User의 인터페이스가 늘어난다면, 다른 User와의 의존 관계에 있는 클래스 간에 의사소통 비용이 발생</li>\n</ul>\n<h3 id=\"1-2-3-셋째-다수의-클래스가-User에-의존관계가-있는-경우라면-User의-변경-여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야함\"><a href=\"#1-2-3-셋째-다수의-클래스가-User에-의존관계가-있는-경우라면-User의-변경-여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야함\" class=\"headerlink\" title=\"1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함\"></a>1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함</h3><hr>\n<h3 id=\"1-3-우리가-이미-알고-있는-솔루션-옵저버-패턴\"><a href=\"#1-3-우리가-이미-알고-있는-솔루션-옵저버-패턴\" class=\"headerlink\" title=\"1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴\"></a>1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴</h3><h3 id=\"1-3-1-Loosely-Coupling\"><a href=\"#1-3-1-Loosely-Coupling\" class=\"headerlink\" title=\"1.3.1 Loosely Coupling\"></a>1.3.1 Loosely Coupling</h3><ul>\n<li>옵저버 패턴에서는 상태가 변경될 대상을 <code>Subject</code> 라고 함</li>\n<li>그 상태 변화를 관찰하는 대상을 <code>Observer</code> 라고 함</li>\n<li>옵저버 패턴에서는 Subject와 Observer가 서로 느슨하게 연결(Loosely coupling)되어있음<ul>\n<li>서로 상호작용을 하지만, 서로 잘 모른다는 뜻</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-2-자동-상태-전파\"><a href=\"#1-3-2-자동-상태-전파\" class=\"headerlink\" title=\"1.3.2 자동 상태 전파\"></a>1.3.2 자동 상태 전파</h3><ul>\n<li>Subject로 부터 데이터를 제공 받음 -&gt; push 방식<ul>\n<li>Subject와 Observer가 1:n의 상황에서 더욱 효과적</li>\n<li>데이터 변경 시점을 매번 확인할 필요 없이, 변경되었다는 신호가오면 처리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-3-인터페이스의-단일화\"><a href=\"#1-3-3-인터페이스의-단일화\" class=\"headerlink\" title=\"1.3.3 인터페이스의 단일화\"></a>1.3.3 인터페이스의 단일화</h3><ul>\n<li>인터페이스가있다는 것은 많은 비용을 수반함<ul>\n<li>인터페이스가 있어도 없게 만들면 됨<ul>\n<li>인터페이스를 특정 몇개로 통일</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Observer pattern은 <code>Observer.update</code> 만 존재하기 때문에, Subject에서는 Observer인터페이스에 대한 별도의 비용이 존재하지 않음</li>\n</ul>\n<hr>\n<h3 id=\"1-4-옵저버-패턴의-흔한-예\"><a href=\"#1-4-옵저버-패턴의-흔한-예\" class=\"headerlink\" title=\"1.4 옵저버 패턴의 흔한 예\"></a>1.4 옵저버 패턴의 흔한 예</h3><ul>\n<li><p>뉴스를 발행하는 신문사(subject)와 이를 구독하는 고객(observer)의 경우</p>\n<ul>\n<li>신문사는 고객을 등록하고, 신문이 발행될 때 각각의 고객에게 신문이 발행되었다고 알려줌(notify)</li>\n<li><p>신문이 발행되면 어떤 고객은 뉴스를 읽거나 스크랩함</p>\n</li>\n<li><p>subject =&gt; add, remove, notify</p>\n</li>\n<li>observer =&gt; update</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"1-5-옵저버-패턴적용하기\"><a href=\"#1-5-옵저버-패턴적용하기\" class=\"headerlink\" title=\"1.5 옵저버 패턴적용하기\"></a>1.5 옵저버 패턴적용하기</h3><ul>\n<li>기존 예제에 적용, user와 system의 의존성을 느슨하게함</li>\n</ul>\n<hr>\n<h3 id=\"1-6-RxJS는-무엇을-해결하려-했나\"><a href=\"#1-6-RxJS는-무엇을-해결하려-했나\" class=\"headerlink\" title=\"1.6 RxJS는 무엇을 해결하려 했나?\"></a>1.6 RxJS는 무엇을 해결하려 했나?</h3><ul>\n<li>상태 변화에 대한 문제를 옵저버 패턴을 기반으로 해결하려함</li>\n</ul>\n<h3 id=\"1-6-1-상태-변화는-언제-종료되는가\"><a href=\"#1-6-1-상태-변화는-언제-종료되는가\" class=\"headerlink\" title=\"1.6.1 상태 변화는 언제 종료되는가?\"></a>1.6.1 상태 변화는 언제 종료되는가?</h3><ul>\n<li>observer와 subject간에 별도의 규칙을 정해서 observer측에서 별도의 예외처리를 해줘야함<ul>\n<li>아쉬운 부분</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-6-2-상태변화에서-에러가-발생하면\"><a href=\"#1-6-2-상태변화에서-에러가-발생하면\" class=\"headerlink\" title=\"1.6.2 상태변화에서 에러가 발생하면?\"></a>1.6.2 상태변화에서 에러가 발생하면?</h3><ul>\n<li>subject 자체적으로 에러 처리<ul>\n<li>try-catch문을 통해</li>\n</ul>\n</li>\n<li>observer 쪽에서 에러 발생 여부를 인지하고, 이에대한 별도의 처리</li>\n<li>옵저버 패턴은 에러 발생 여부를 Observer들에게 전달할 방법이 딱히 없음</li>\n</ul>\n<h3 id=\"1-6-3-Observer에-의해-Subject의-상태가-변경되는-경우\"><a href=\"#1-6-3-Observer에-의해-Subject의-상태가-변경되는-경우\" class=\"headerlink\" title=\"1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우\"></a>1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우</h3><ul>\n<li>예) 신문 기자이면서 동시에 구독자인 사람이 있는 경우<ul>\n<li>구독받은 기사의 내용을 조금 변경하여 가짜 뉴스를 만들어냄</li>\n</ul>\n</li>\n<li>데이터를 양방향으로 흐르게하면 편할수 있으나, 코드의 복잡도를 증가시킴</li>\n</ul>\n<hr>\n<h3 id=\"1-7-RxJS는-어떻게-개선했나\"><a href=\"#1-7-RxJS는-어떻게-개선했나\" class=\"headerlink\" title=\"1.7 RxJS는 어떻게 개선했나?\"></a>1.7 RxJS는 어떻게 개선했나?</h3><ul>\n<li><p>RxJS에서 전달되는 데이터는 모두 Observable 형태로 반환됨.</p>\n<ul>\n<li><p>Observable은 구독(subscribe) 과정 후부터 데이터를 전달받음</p>\n</li>\n<li><pre><code class=\"javascript\"><span class=\"keyword\">const</span> &#123;fromEvent &#125; = rxjs;\n<span class=\"keyword\">const</span> click$ = fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);\nclick$.subscribe(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;\n    <span class=\"built_in\">console</span>.log(v);\n&#125;);\n\n<span class=\"comment\">// 또는</span>\nclick$.subscribe(&#123;\n    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;\n        <span class=\"built_in\">console</span>.log(v);\n    &#125;\n&#125;);\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>반면 옵저버 패턴은 add 과정 후부터 데이터를 전달받음</p>\n</li>\n</ul>\n<blockquote>\n<p>RxJS의 Observer는 함수와 객체 둘 다 가능하며  subscribe라는 메소드를 통해 Subject에게 전달됨</p>\n<p>RxJS의 Observable은 단지 하나의 Observer에게 독립적인 데이터를 전달함</p>\n</blockquote>\n<h3 id=\"1-7-1-인터페이스의-확장\"><a href=\"#1-7-1-인터페이스의-확장\" class=\"headerlink\" title=\"1.7.1 인터페이스의 확장\"></a>1.7.1 인터페이스의 확장</h3><ul>\n<li>RxJS는 시간의 축으로 데이터를 보기 때문에 데이터의 연속적인 변화를 Observer에서 표현할 수 있도록 기존 update 메소드를 next로 바꿈</li>\n<li>또한 종료를 나타내는 complete, 에러 시점을 나타내는 error 메소드가 추가됨<ul>\n<li>옵저버 패턴에서의 Observer는 update하나의 메소드를 가짐</li>\n<li>반면 Rxjs의 Observer는 next, complete, error 세개의 메소드</li>\n</ul>\n</li>\n<li><strong>객체는 상태를 가질 수 있기때문에, RxJS의 subscribe는 가급적 상태가 존재하지 않는 함수 형태를 사용함</strong></li>\n</ul>\n<h3 id=\"1-7-2-Observable은-Read-only\"><a href=\"#1-7-2-Observable은-Read-only\" class=\"headerlink\" title=\"1.7.2 Observable은 Read-only\"></a>1.7.2 Observable은 Read-only</h3><ul>\n<li>단방향 데이터 흐름을 위함<ul>\n<li>Observer에게 데이터를 전달만함, 받지 않음</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"1-8-Observable은-리액티브함\"><a href=\"#1-8-Observable은-리액티브함\" class=\"headerlink\" title=\"1.8 Observable은 리액티브함\"></a>1.8 Observable은 리액티브함</h3><ul>\n<li>데이터가 발생하면 Observer에게 자동으로 그리고 빠르게 변경된 데이터를 전달하기 떄문에 리액티브하다고 함<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Reactive_programming\">리액티브 프로그래밍</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Chap1-RxJS가-해결하려-했던-문제-1-입력-데이터의-오류\"><a href=\"#Chap1-RxJS가-해결하려-했던-문제-1-입력-데이터의-오류\" class=\"headerlink\" title=\"Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류\"></a>Chap1. RxJS가 해결하려 했던 문제 1 : 입력 데이터의 오류</h2><h3 id=\"1-1-웹-애플리케이션의-입력-데이터\"><a href=\"#1-1-웹-애플리케이션의-입력-데이터\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 입력 데이터\"></a>1.1 웹 애플리케이션의 입력 데이터</h3><ul>\n<li>데이터 흐름의 관점<ul>\n<li>서버 / 브라우저 / 브라우저 UI 객체 간에 데이터 이동</li>\n</ul>\n</li>\n<li>State machine 관점<ul>\n<li>동기 / 비동기 처리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-입력-데이터의-전달-시점이-다양하다\"><a href=\"#1-2-입력-데이터의-전달-시점이-다양하다\" class=\"headerlink\" title=\"1.2 입력 데이터의 전달 시점이 다양하다\"></a>1.2 입력 데이터의 전달 시점이 다양하다</h3><h3 id=\"1-2-1-동기\"><a href=\"#1-2-1-동기\" class=\"headerlink\" title=\"1.2.1 동기\"></a>1.2.1 동기</h3><ul>\n<li>장점: 순차적으로 진행되므로 개발이 쉽다</li>\n<li>단점: 웹브라우저와 같이 단일 UI 스레드를 사용할 경우, 해당 작업이 끝날때까지 브라우저는 대기해야함</li>\n</ul>\n<h3 id=\"1-2-2-비동기\"><a href=\"#1-2-2-비동기\" class=\"headerlink\" title=\"1.2.2 비동기\"></a>1.2.2 비동기</h3><ul>\n<li>호출하는 함수가 호출되는 함수의 작업 완료를 기다리지 않고 그 다음을 진행함<ul>\n<li>호출되는 함수의 작업이 완료되면 별도의 <strong>이벤트나 콜백 함수</strong>를 통해 결과를 전달함</li>\n</ul>\n</li>\n<li>장점: 효율적인 작업 진행이 가능</li>\n<li>단점: 개발은 더욱 복잡해지고, 오류 확률이 높아짐</li>\n</ul>\n<h3 id=\"1-3-동기와-비동기를-함께-사용할-수-밖에-없나\"><a href=\"#1-3-동기와-비동기를-함께-사용할-수-밖에-없나\" class=\"headerlink\" title=\"1.3 동기와 비동기를 함께 사용할 수 밖에 없나?\"></a>1.3 동기와 비동기를 함께 사용할 수 밖에 없나?</h3><ul>\n<li>단일 스레드 기반의 브라우저 환경에서는 비동기 방식을 사용하지 않으면 특정 작업이 프로세스를 독점하기 때문에 성능상 문제가 발생함</li>\n<li>어쩔수없음</li>\n</ul>\n<h3 id=\"1-4-RxJS는-어떻게-개선했나\"><a href=\"#1-4-RxJS는-어떻게-개선했나\" class=\"headerlink\" title=\"1.4 RxJS는 어떻게 개선했나?\"></a>1.4 RxJS는 어떻게 개선했나?</h3><ul>\n<li>입력 데이터에 대한 구조적인 문제를 개선하고자 했음<ul>\n<li>구조의 일원화 -&gt; 개발을 단순화</li>\n</ul>\n</li>\n<li>RxJS는 동기와 비동기의 차이점을 <strong>시간</strong>이라는 개념을 도입함으로써 해결하려함<ul>\n<li>동기와 비동기는 시간의 축으로 봤을때, 같은 형태이다! =&gt; <strong>스트림</strong> 이라 표현함</li>\n</ul>\n</li>\n<li>RxJS에서는 이런 스트림을 표현하는 Obsevable 클래스를 제공함</li>\n</ul>\n<h3 id=\"1-4-1-Observable\"><a href=\"#1-4-1-Observable\" class=\"headerlink\" title=\"1.4.1 Observable\"></a>1.4.1 Observable</h3><blockquote>\n<p> 시간을 인덱스로 둔 컬렉션을 추상화한 클래스</p>\n</blockquote>\n<ul>\n<li>동기나 비동기의 동작 방식으로 전달된 데이터를 하나의 컬렉션으로 바라볼 수 있게 해줌<ul>\n<li>개발자는 데이터가 어떤 형태로 전달되는지에 대해 고민할 필요 없음</li>\n<li>단지 Observable을 통해 데이터를 전달 받으면 됨</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다\"><a href=\"#1-4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다\" class=\"headerlink\" title=\"1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.\"></a>1.4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.</h3><ul>\n<li><p>Observable은 모든 데이터를 다룬다</p>\n<ul>\n<li>동기든 비동기든 모든 데이터 타입을 동일한 형태로 사용</li>\n</ul>\n</li>\n<li><p><code>event</code>를 Observable로 만들 때는 <code>fromEvent</code> 를 이용</p>\n<ul>\n<li><code>`</code> javascript<br>fromEvent(HTMLElement, “이벤트 타입”);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">  &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; fromEvent &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const key$ &#x3D; fromEvent(document, &quot;keydown&quot;);</span><br><span class=\"line\">  const click$ &#x3D; fromEvent(document, &quot;click&quot;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>배열 같은 <code>iterable</code>이나 <code>array-like</code>,<code>Promise 데이터</code> 를 Observable로 만들 때는 <code>from</code>을 이용</p>\n<ul>\n<li><code>`</code> javascrip<br>from(Iterable | Array-like | Promise);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">* &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; from &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const arrayFrom$ &#x3D; from([10, 20, 30]);</span><br><span class=\"line\">  const iterableFrom$ &#x3D; from(new Map([1, 2], [2, 4], [4, 8]));</span><br><span class=\"line\">  const ajaxPromiseFrom$ &#x3D; from(fetch(&quot;.&#x2F;api&#x2F;some.json&quot;));</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>단일 데이터를 연속으로 전달할 경우엔 <code>of</code> 를 이용</p>\n<ul>\n<li><code>`</code> javascript<br>of(…items);<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Example</span><br><span class=\"line\"></span><br><span class=\"line\">* &#96;&#96;&#96; javascript</span><br><span class=\"line\">  const &#123; of &#125; &#x3D; rxjs;</span><br><span class=\"line\">  const numberOf$ &#x3D; of(10, 20, 30);</span><br><span class=\"line\">  const stringOf$ &#x3D; of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Observable 객체의 변수명은 관용적으로 접미사로 $(Stream의 S와 유사해서라고함) 를 붙인다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Chap2-RxJS가-해결하려고-했던-문제-2-상태-전파-State-Propagation-문제\"><a href=\"#Chap2-RxJS가-해결하려고-했던-문제-2-상태-전파-State-Propagation-문제\" class=\"headerlink\" title=\"Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제\"></a>Chap2. RxJS가 해결하려고 했던 문제 2 : 상태 전파(State Propagation) 문제</h2><h3 id=\"1-1-웹-애플리케이션의-상태\"><a href=\"#1-1-웹-애플리케이션의-상태\" class=\"headerlink\" title=\"1.1 웹 애플리케이션의 상태\"></a>1.1 웹 애플리케이션의 상태</h3><ul>\n<li>웹 애플리케이션은 하나의 큰 상태머신<ul>\n<li>이를 구성하고 있는 크고 작은 단위들 또한 하나의 상태머신임<ul>\n<li>각각의 상태머신들은 각자의 상태를 가지고있음</li>\n<li>상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결됨</li>\n<li>각 모듈간에 의존성이 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-웹-애플리케이션의-상태-변화로-인한-문제점\"><a href=\"#1-2-웹-애플리케이션의-상태-변화로-인한-문제점\" class=\"headerlink\" title=\"1.2 웹 애플리케이션의 상태 변화로 인한 문제점\"></a>1.2 웹 애플리케이션의 상태 변화로 인한 문제점</h3><ul>\n<li>System과 User의 관계에 따른 상태 변화 예제</li>\n</ul>\n<h3 id=\"1-2-1-첫째-User의-인터페이스가-변겨오디면-System도-함께-변경되어야함\"><a href=\"#1-2-1-첫째-User의-인터페이스가-변겨오디면-System도-함께-변경되어야함\" class=\"headerlink\" title=\"1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함\"></a>1.2.1 첫째, User의 인터페이스가 변겨오디면 System도 함께 변경되어야함</h3><h3 id=\"1-2-2-둘쨰-User의-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생함\"><a href=\"#1-2-2-둘쨰-User의-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생함\" class=\"headerlink\" title=\"1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함\"></a>1.2.2 둘쨰, User의 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생함</h3><ul>\n<li>User의 인터페이스가 늘어난다면, 다른 User와의 의존 관계에 있는 클래스 간에 의사소통 비용이 발생</li>\n</ul>\n<h3 id=\"1-2-3-셋째-다수의-클래스가-User에-의존관계가-있는-경우라면-User의-변경-여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야함\"><a href=\"#1-2-3-셋째-다수의-클래스가-User에-의존관계가-있는-경우라면-User의-변경-여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야함\" class=\"headerlink\" title=\"1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함\"></a>1.2.3 셋째, 다수의 클래스가 User에 의존관계가 있는 경우라면 User의 변경 여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야함</h3><hr>\n<h3 id=\"1-3-우리가-이미-알고-있는-솔루션-옵저버-패턴\"><a href=\"#1-3-우리가-이미-알고-있는-솔루션-옵저버-패턴\" class=\"headerlink\" title=\"1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴\"></a>1.3 우리가 이미 알고 있는 솔루션 - 옵저버 패턴</h3><h3 id=\"1-3-1-Loosely-Coupling\"><a href=\"#1-3-1-Loosely-Coupling\" class=\"headerlink\" title=\"1.3.1 Loosely Coupling\"></a>1.3.1 Loosely Coupling</h3><ul>\n<li>옵저버 패턴에서는 상태가 변경될 대상을 <code>Subject</code> 라고 함</li>\n<li>그 상태 변화를 관찰하는 대상을 <code>Observer</code> 라고 함</li>\n<li>옵저버 패턴에서는 Subject와 Observer가 서로 느슨하게 연결(Loosely coupling)되어있음<ul>\n<li>서로 상호작용을 하지만, 서로 잘 모른다는 뜻</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-2-자동-상태-전파\"><a href=\"#1-3-2-자동-상태-전파\" class=\"headerlink\" title=\"1.3.2 자동 상태 전파\"></a>1.3.2 자동 상태 전파</h3><ul>\n<li>Subject로 부터 데이터를 제공 받음 -&gt; push 방식<ul>\n<li>Subject와 Observer가 1:n의 상황에서 더욱 효과적</li>\n<li>데이터 변경 시점을 매번 확인할 필요 없이, 변경되었다는 신호가오면 처리</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-3-인터페이스의-단일화\"><a href=\"#1-3-3-인터페이스의-단일화\" class=\"headerlink\" title=\"1.3.3 인터페이스의 단일화\"></a>1.3.3 인터페이스의 단일화</h3><ul>\n<li>인터페이스가있다는 것은 많은 비용을 수반함<ul>\n<li>인터페이스가 있어도 없게 만들면 됨<ul>\n<li>인터페이스를 특정 몇개로 통일</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Observer pattern은 <code>Observer.update</code> 만 존재하기 때문에, Subject에서는 Observer인터페이스에 대한 별도의 비용이 존재하지 않음</li>\n</ul>\n<hr>\n<h3 id=\"1-4-옵저버-패턴의-흔한-예\"><a href=\"#1-4-옵저버-패턴의-흔한-예\" class=\"headerlink\" title=\"1.4 옵저버 패턴의 흔한 예\"></a>1.4 옵저버 패턴의 흔한 예</h3><ul>\n<li><p>뉴스를 발행하는 신문사(subject)와 이를 구독하는 고객(observer)의 경우</p>\n<ul>\n<li>신문사는 고객을 등록하고, 신문이 발행될 때 각각의 고객에게 신문이 발행되었다고 알려줌(notify)</li>\n<li><p>신문이 발행되면 어떤 고객은 뉴스를 읽거나 스크랩함</p>\n</li>\n<li><p>subject =&gt; add, remove, notify</p>\n</li>\n<li>observer =&gt; update</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"1-5-옵저버-패턴적용하기\"><a href=\"#1-5-옵저버-패턴적용하기\" class=\"headerlink\" title=\"1.5 옵저버 패턴적용하기\"></a>1.5 옵저버 패턴적용하기</h3><ul>\n<li>기존 예제에 적용, user와 system의 의존성을 느슨하게함</li>\n</ul>\n<hr>\n<h3 id=\"1-6-RxJS는-무엇을-해결하려-했나\"><a href=\"#1-6-RxJS는-무엇을-해결하려-했나\" class=\"headerlink\" title=\"1.6 RxJS는 무엇을 해결하려 했나?\"></a>1.6 RxJS는 무엇을 해결하려 했나?</h3><ul>\n<li>상태 변화에 대한 문제를 옵저버 패턴을 기반으로 해결하려함</li>\n</ul>\n<h3 id=\"1-6-1-상태-변화는-언제-종료되는가\"><a href=\"#1-6-1-상태-변화는-언제-종료되는가\" class=\"headerlink\" title=\"1.6.1 상태 변화는 언제 종료되는가?\"></a>1.6.1 상태 변화는 언제 종료되는가?</h3><ul>\n<li>observer와 subject간에 별도의 규칙을 정해서 observer측에서 별도의 예외처리를 해줘야함<ul>\n<li>아쉬운 부분</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-6-2-상태변화에서-에러가-발생하면\"><a href=\"#1-6-2-상태변화에서-에러가-발생하면\" class=\"headerlink\" title=\"1.6.2 상태변화에서 에러가 발생하면?\"></a>1.6.2 상태변화에서 에러가 발생하면?</h3><ul>\n<li>subject 자체적으로 에러 처리<ul>\n<li>try-catch문을 통해</li>\n</ul>\n</li>\n<li>observer 쪽에서 에러 발생 여부를 인지하고, 이에대한 별도의 처리</li>\n<li>옵저버 패턴은 에러 발생 여부를 Observer들에게 전달할 방법이 딱히 없음</li>\n</ul>\n<h3 id=\"1-6-3-Observer에-의해-Subject의-상태가-변경되는-경우\"><a href=\"#1-6-3-Observer에-의해-Subject의-상태가-변경되는-경우\" class=\"headerlink\" title=\"1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우\"></a>1.6.3 Observer에 의해 Subject의 상태가 변경되는 경우</h3><ul>\n<li>예) 신문 기자이면서 동시에 구독자인 사람이 있는 경우<ul>\n<li>구독받은 기사의 내용을 조금 변경하여 가짜 뉴스를 만들어냄</li>\n</ul>\n</li>\n<li>데이터를 양방향으로 흐르게하면 편할수 있으나, 코드의 복잡도를 증가시킴</li>\n</ul>\n<hr>\n<h3 id=\"1-7-RxJS는-어떻게-개선했나\"><a href=\"#1-7-RxJS는-어떻게-개선했나\" class=\"headerlink\" title=\"1.7 RxJS는 어떻게 개선했나?\"></a>1.7 RxJS는 어떻게 개선했나?</h3><ul>\n<li><p>RxJS에서 전달되는 데이터는 모두 Observable 형태로 반환됨.</p>\n<ul>\n<li><p>Observable은 구독(subscribe) 과정 후부터 데이터를 전달받음</p>\n</li>\n<li><pre><code class=\"javascript\"><span class=\"keyword\">const</span> &#123;fromEvent &#125; = rxjs;\n<span class=\"keyword\">const</span> click$ = fromEvent(<span class=\"built_in\">document</span>, <span class=\"string\">\"click\"</span>);\nclick$.subscribe(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;\n    <span class=\"built_in\">console</span>.log(v);\n&#125;);\n\n<span class=\"comment\">// 또는</span>\nclick$.subscribe(&#123;\n    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;\n        <span class=\"built_in\">console</span>.log(v);\n    &#125;\n&#125;);\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>반면 옵저버 패턴은 add 과정 후부터 데이터를 전달받음</p>\n</li>\n</ul>\n<blockquote>\n<p>RxJS의 Observer는 함수와 객체 둘 다 가능하며  subscribe라는 메소드를 통해 Subject에게 전달됨</p>\n<p>RxJS의 Observable은 단지 하나의 Observer에게 독립적인 데이터를 전달함</p>\n</blockquote>\n<h3 id=\"1-7-1-인터페이스의-확장\"><a href=\"#1-7-1-인터페이스의-확장\" class=\"headerlink\" title=\"1.7.1 인터페이스의 확장\"></a>1.7.1 인터페이스의 확장</h3><ul>\n<li>RxJS는 시간의 축으로 데이터를 보기 때문에 데이터의 연속적인 변화를 Observer에서 표현할 수 있도록 기존 update 메소드를 next로 바꿈</li>\n<li>또한 종료를 나타내는 complete, 에러 시점을 나타내는 error 메소드가 추가됨<ul>\n<li>옵저버 패턴에서의 Observer는 update하나의 메소드를 가짐</li>\n<li>반면 Rxjs의 Observer는 next, complete, error 세개의 메소드</li>\n</ul>\n</li>\n<li><strong>객체는 상태를 가질 수 있기때문에, RxJS의 subscribe는 가급적 상태가 존재하지 않는 함수 형태를 사용함</strong></li>\n</ul>\n<h3 id=\"1-7-2-Observable은-Read-only\"><a href=\"#1-7-2-Observable은-Read-only\" class=\"headerlink\" title=\"1.7.2 Observable은 Read-only\"></a>1.7.2 Observable은 Read-only</h3><ul>\n<li>단방향 데이터 흐름을 위함<ul>\n<li>Observer에게 데이터를 전달만함, 받지 않음</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"1-8-Observable은-리액티브함\"><a href=\"#1-8-Observable은-리액티브함\" class=\"headerlink\" title=\"1.8 Observable은 리액티브함\"></a>1.8 Observable은 리액티브함</h3><ul>\n<li>데이터가 발생하면 Observer에게 자동으로 그리고 빠르게 변경된 데이터를 전달하기 떄문에 리액티브하다고 함<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Reactive_programming\">리액티브 프로그래밍</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"일하는 방식을 혁신한 기업들의 비밀 (스마트 워크)","date":"2019-05-08T08:31:52.000Z","_content":"\n회사에서 인사이트 특강이 있었습니다. 스마트워크의 최두옥 님께서 강의해주셨는데 개인적으로 얻은게 많아서 정리해보려 합니다.\n\n---\n\n조직 문화가 변하려면 `일하는 방식의 변화`가 필요하다.\n\n-   마이크로소프트(네덜란드)의 예시\n    -   직원들이 `언제, 어디서, 어떻게 일하는지 상관하지 않았는데`, 예상외로 매우 좋은 성과가 나타났다고 한다. 그로 인해 네덜란드 지부의 문화는 마이크로소프트의 문화가 되었다고 함.\n    -   1/3의 공간을 오픈하여 회사와 연관된 누구나 사용 할 수 있도록 하였음.\n\n작성 중...\n","source":"_posts/Smart-Work-2019-05-08.md","raw":"---\ntitle: 일하는 방식을 혁신한 기업들의 비밀 (스마트 워크)\ndate: 2019-05-08 17:31:52\ncategories:\n    - 강의 정리\n    - Smart Work\ntags:\n    - Smart Work\n    - 스마트워크\n    - 일하는 방식을 혁신한 기업들의 비밀\n---\n\n회사에서 인사이트 특강이 있었습니다. 스마트워크의 최두옥 님께서 강의해주셨는데 개인적으로 얻은게 많아서 정리해보려 합니다.\n\n---\n\n조직 문화가 변하려면 `일하는 방식의 변화`가 필요하다.\n\n-   마이크로소프트(네덜란드)의 예시\n    -   직원들이 `언제, 어디서, 어떻게 일하는지 상관하지 않았는데`, 예상외로 매우 좋은 성과가 나타났다고 한다. 그로 인해 네덜란드 지부의 문화는 마이크로소프트의 문화가 되었다고 함.\n    -   1/3의 공간을 오픈하여 회사와 연관된 누구나 사용 할 수 있도록 하였음.\n\n작성 중...\n","slug":"Smart-Work","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq6000qbqwx3drh23vp","content":"<p>회사에서 인사이트 특강이 있었습니다. 스마트워크의 최두옥 님께서 강의해주셨는데 개인적으로 얻은게 많아서 정리해보려 합니다.</p>\n<hr>\n<p>조직 문화가 변하려면 <code>일하는 방식의 변화</code>가 필요하다.</p>\n<ul>\n<li>마이크로소프트(네덜란드)의 예시<ul>\n<li>직원들이 <code>언제, 어디서, 어떻게 일하는지 상관하지 않았는데</code>, 예상외로 매우 좋은 성과가 나타났다고 한다. 그로 인해 네덜란드 지부의 문화는 마이크로소프트의 문화가 되었다고 함.</li>\n<li>1/3의 공간을 오픈하여 회사와 연관된 누구나 사용 할 수 있도록 하였음.</li>\n</ul>\n</li>\n</ul>\n<p>작성 중…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>회사에서 인사이트 특강이 있었습니다. 스마트워크의 최두옥 님께서 강의해주셨는데 개인적으로 얻은게 많아서 정리해보려 합니다.</p>\n<hr>\n<p>조직 문화가 변하려면 <code>일하는 방식의 변화</code>가 필요하다.</p>\n<ul>\n<li>마이크로소프트(네덜란드)의 예시<ul>\n<li>직원들이 <code>언제, 어디서, 어떻게 일하는지 상관하지 않았는데</code>, 예상외로 매우 좋은 성과가 나타났다고 한다. 그로 인해 네덜란드 지부의 문화는 마이크로소프트의 문화가 되었다고 함.</li>\n<li>1/3의 공간을 오픈하여 회사와 연관된 누구나 사용 할 수 있도록 하였음.</li>\n</ul>\n</li>\n</ul>\n<p>작성 중…</p>\n"},{"title":"TIL 2018-10-16","date":"2018-10-16T03:07:12.000Z","_content":"\n# Today I Learn!\n\n## 링크\n[참고한 글](https://gist.github.com/ninanung/2b81a5db946c26c98c573e3662a92b62)\n\n``` bash\n[링크에 사용할 이름](URL)\n```\n\n---\n\n## Markdown 문서에 이미지 업로드하기\n\n- 이미지 url을 입력하여 업로드\n    - 이미지의 url을 따서 그냥 입력하면 됨 (이미지 url을 따는 방법은 구글에 많이 있음)\n    \n    [참고](https://twosb.github.io/2018/07/01/Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%B4%88%EA%B0%84%EB%8B%A8%20Markdown%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%97%85%EB%A1%9C%EB%93%9C%20%EB%B0%A9%EB%B2%95/)\n\n\n- 상대 경로를 통한 업로드\n    ``` bash\n    ![텍스트](이미지파일경로.png)\n    ![텍스트](이미지파일URL)\n\n    ![텍스트](이미지파일경로.jpg \"이미지이름\")\n    ![텍스트](이미지파일URL \"이미지이름\")\n    ```\n    텍스트는 이미지 파일에 마우스를 올렸을 때 커서 옆에 나오는 텍스트이다. 없어도 무방함\n\n    [참고](https://futurecreator.github.io/2016/06/21/hexo-basic-usage/)\n\n\n- hexo tag plugin\n\n    ``` bash\n    {% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n    ```\n    아직 안써봄\n\n---\n\n## 링크 + 이미지\n\n이미지를 누르면 링크로 가게 하고 싶을 때\n\n``` bash\n[![텍스트](이미지URL이나 경로)](링크URL)\n```\n\n---\n\n## 경로 설정하기\n[참고](https://blog.jaeyoon.io/2017/12/jekyll-image.html)\n\n---\n\n## 공부할 것\n\n[태그플러그인](https://futurecreator.github.io/2016/06/19/hexo-tag-plugins/)\n\n--- \n\n## puppeteer\n\n[참고](https://github.com/GoogleChrome/puppeteer)\n\n\n","source":"_posts/TIL-2018-10-16.md","raw":"---\ntitle: TIL 2018-10-16\ndate: 2018-10-16 12:07:12\ntags:\n    - til\n    - hexo\n    - markdown\n---\n\n# Today I Learn!\n\n## 링크\n[참고한 글](https://gist.github.com/ninanung/2b81a5db946c26c98c573e3662a92b62)\n\n``` bash\n[링크에 사용할 이름](URL)\n```\n\n---\n\n## Markdown 문서에 이미지 업로드하기\n\n- 이미지 url을 입력하여 업로드\n    - 이미지의 url을 따서 그냥 입력하면 됨 (이미지 url을 따는 방법은 구글에 많이 있음)\n    \n    [참고](https://twosb.github.io/2018/07/01/Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%B4%88%EA%B0%84%EB%8B%A8%20Markdown%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%97%85%EB%A1%9C%EB%93%9C%20%EB%B0%A9%EB%B2%95/)\n\n\n- 상대 경로를 통한 업로드\n    ``` bash\n    ![텍스트](이미지파일경로.png)\n    ![텍스트](이미지파일URL)\n\n    ![텍스트](이미지파일경로.jpg \"이미지이름\")\n    ![텍스트](이미지파일URL \"이미지이름\")\n    ```\n    텍스트는 이미지 파일에 마우스를 올렸을 때 커서 옆에 나오는 텍스트이다. 없어도 무방함\n\n    [참고](https://futurecreator.github.io/2016/06/21/hexo-basic-usage/)\n\n\n- hexo tag plugin\n\n    ``` bash\n    {% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n    ```\n    아직 안써봄\n\n---\n\n## 링크 + 이미지\n\n이미지를 누르면 링크로 가게 하고 싶을 때\n\n``` bash\n[![텍스트](이미지URL이나 경로)](링크URL)\n```\n\n---\n\n## 경로 설정하기\n[참고](https://blog.jaeyoon.io/2017/12/jekyll-image.html)\n\n---\n\n## 공부할 것\n\n[태그플러그인](https://futurecreator.github.io/2016/06/19/hexo-tag-plugins/)\n\n--- \n\n## puppeteer\n\n[참고](https://github.com/GoogleChrome/puppeteer)\n\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hq9000sbqwx5lcggy0v","content":"<h1 id=\"Today-I-Learn\"><a href=\"#Today-I-Learn\" class=\"headerlink\" title=\"Today I Learn!\"></a>Today I Learn!</h1><h2 id=\"링크\"><a href=\"#링크\" class=\"headerlink\" title=\"링크\"></a>링크</h2><p><a href=\"https://gist.github.com/ninanung/2b81a5db946c26c98c573e3662a92b62\">참고한 글</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[링크에 사용할 이름](URL)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Markdown-문서에-이미지-업로드하기\"><a href=\"#Markdown-문서에-이미지-업로드하기\" class=\"headerlink\" title=\"Markdown 문서에 이미지 업로드하기\"></a>Markdown 문서에 이미지 업로드하기</h2><ul>\n<li><p>이미지 url을 입력하여 업로드</p>\n<ul>\n<li><p>이미지의 url을 따서 그냥 입력하면 됨 (이미지 url을 따는 방법은 구글에 많이 있음)</p>\n<p><a href=\"https://twosb.github.io/2018/07/01/Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%B4%88%EA%B0%84%EB%8B%A8%20Markdown%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%97%85%EB%A1%9C%EB%93%9C%20%EB%B0%A9%EB%B2%95/\">참고</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>상대 경로를 통한 업로드</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">![텍스트](이미지파일경로.png)</span><br><span class=\"line\">![텍스트](이미지파일URL)</span><br><span class=\"line\"></span><br><span class=\"line\">![텍스트](이미지파일경로.jpg <span class=\"string\">&quot;이미지이름&quot;</span>)</span><br><span class=\"line\">![텍스트](이미지파일URL <span class=\"string\">&quot;이미지이름&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>  텍스트는 이미지 파일에 마우스를 올렸을 때 커서 옆에 나오는 텍스트이다. 없어도 무방함</p>\n<p>  <a href=\"https://futurecreator.github.io/2016/06/21/hexo-basic-usage/\">참고</a></p>\n</li>\n</ul>\n<ul>\n<li><p>hexo tag plugin</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>\n<p>  아직 안써봄</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"링크-이미지\"><a href=\"#링크-이미지\" class=\"headerlink\" title=\"링크 + 이미지\"></a>링크 + 이미지</h2><p>이미지를 누르면 링크로 가게 하고 싶을 때</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![텍스트](이미지URL이나 경로)](링크URL)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"경로-설정하기\"><a href=\"#경로-설정하기\" class=\"headerlink\" title=\"경로 설정하기\"></a>경로 설정하기</h2><p><a href=\"https://blog.jaeyoon.io/2017/12/jekyll-image.html\">참고</a></p>\n<hr>\n<h2 id=\"공부할-것\"><a href=\"#공부할-것\" class=\"headerlink\" title=\"공부할 것\"></a>공부할 것</h2><p><a href=\"https://futurecreator.github.io/2016/06/19/hexo-tag-plugins/\">태그플러그인</a></p>\n<hr>\n<h2 id=\"puppeteer\"><a href=\"#puppeteer\" class=\"headerlink\" title=\"puppeteer\"></a>puppeteer</h2><p><a href=\"https://github.com/GoogleChrome/puppeteer\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Today-I-Learn\"><a href=\"#Today-I-Learn\" class=\"headerlink\" title=\"Today I Learn!\"></a>Today I Learn!</h1><h2 id=\"링크\"><a href=\"#링크\" class=\"headerlink\" title=\"링크\"></a>링크</h2><p><a href=\"https://gist.github.com/ninanung/2b81a5db946c26c98c573e3662a92b62\">참고한 글</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[링크에 사용할 이름](URL)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Markdown-문서에-이미지-업로드하기\"><a href=\"#Markdown-문서에-이미지-업로드하기\" class=\"headerlink\" title=\"Markdown 문서에 이미지 업로드하기\"></a>Markdown 문서에 이미지 업로드하기</h2><ul>\n<li><p>이미지 url을 입력하여 업로드</p>\n<ul>\n<li><p>이미지의 url을 따서 그냥 입력하면 됨 (이미지 url을 따는 방법은 구글에 많이 있음)</p>\n<p><a href=\"https://twosb.github.io/2018/07/01/Hexo%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%EC%B4%88%EA%B0%84%EB%8B%A8%20Markdown%20%EC%9D%B4%EB%AF%B8%EC%A7%80%20%EC%97%85%EB%A1%9C%EB%93%9C%20%EB%B0%A9%EB%B2%95/\">참고</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>상대 경로를 통한 업로드</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">![텍스트](이미지파일경로.png)</span><br><span class=\"line\">![텍스트](이미지파일URL)</span><br><span class=\"line\"></span><br><span class=\"line\">![텍스트](이미지파일경로.jpg <span class=\"string\">&quot;이미지이름&quot;</span>)</span><br><span class=\"line\">![텍스트](이미지파일URL <span class=\"string\">&quot;이미지이름&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>  텍스트는 이미지 파일에 마우스를 올렸을 때 커서 옆에 나오는 텍스트이다. 없어도 무방함</p>\n<p>  <a href=\"https://futurecreator.github.io/2016/06/21/hexo-basic-usage/\">참고</a></p>\n</li>\n</ul>\n<ul>\n<li><p>hexo tag plugin</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>\n<p>  아직 안써봄</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"링크-이미지\"><a href=\"#링크-이미지\" class=\"headerlink\" title=\"링크 + 이미지\"></a>링크 + 이미지</h2><p>이미지를 누르면 링크로 가게 하고 싶을 때</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[![텍스트](이미지URL이나 경로)](링크URL)</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"경로-설정하기\"><a href=\"#경로-설정하기\" class=\"headerlink\" title=\"경로 설정하기\"></a>경로 설정하기</h2><p><a href=\"https://blog.jaeyoon.io/2017/12/jekyll-image.html\">참고</a></p>\n<hr>\n<h2 id=\"공부할-것\"><a href=\"#공부할-것\" class=\"headerlink\" title=\"공부할 것\"></a>공부할 것</h2><p><a href=\"https://futurecreator.github.io/2016/06/19/hexo-tag-plugins/\">태그플러그인</a></p>\n<hr>\n<h2 id=\"puppeteer\"><a href=\"#puppeteer\" class=\"headerlink\" title=\"puppeteer\"></a>puppeteer</h2><p><a href=\"https://github.com/GoogleChrome/puppeteer\">참고</a></p>\n"},{"title":"TIL","date":"2018-10-17T05:26:34.000Z","_content":"\n# Today I Learn!\n\n## Puppeteer\n\n\n## Headless browser\n\n[위키](https://en.wikipedia.org/wiki/Headless_browser)\n\n### 정리\n- Headless browser는 GUI없는 웹 브라우져다!\n- CLI나 network communication을 통해 실행된다.\n- 특히 e2e 테스팅에 유용함\n\n### Use cases\n- 모던 웹 어플리케이션에서의 테스트 자동화\n- 웹 페이지의 스크린샷을 찍는 용도(?)\n- 자바스크립트 라이브러리들의 테스트 자동화\n- 웹 사이트 데이터 스크랩핑\n- 웹 페이지의 인터렉션 자동화\n\n### 악용\n- DDOS 공격\n- Increase advertisement impressions (광고 노출 수 늘리기!?)\n- Automate web sites in unintended ways (정보 채가기)\n\n","source":"_posts/TIL-2018-10-17.md","raw":"---\ntitle: TIL\ndate: 2018-10-17 14:26:34\ncategories:\ntags:\n---\n\n# Today I Learn!\n\n## Puppeteer\n\n\n## Headless browser\n\n[위키](https://en.wikipedia.org/wiki/Headless_browser)\n\n### 정리\n- Headless browser는 GUI없는 웹 브라우져다!\n- CLI나 network communication을 통해 실행된다.\n- 특히 e2e 테스팅에 유용함\n\n### Use cases\n- 모던 웹 어플리케이션에서의 테스트 자동화\n- 웹 페이지의 스크린샷을 찍는 용도(?)\n- 자바스크립트 라이브러리들의 테스트 자동화\n- 웹 사이트 데이터 스크랩핑\n- 웹 페이지의 인터렉션 자동화\n\n### 악용\n- DDOS 공격\n- Increase advertisement impressions (광고 노출 수 늘리기!?)\n- Automate web sites in unintended ways (정보 채가기)\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqa000vbqwxc1uldkn5","content":"<h1 id=\"Today-I-Learn\"><a href=\"#Today-I-Learn\" class=\"headerlink\" title=\"Today I Learn!\"></a>Today I Learn!</h1><h2 id=\"Puppeteer\"><a href=\"#Puppeteer\" class=\"headerlink\" title=\"Puppeteer\"></a>Puppeteer</h2><h2 id=\"Headless-browser\"><a href=\"#Headless-browser\" class=\"headerlink\" title=\"Headless browser\"></a>Headless browser</h2><p><a href=\"https://en.wikipedia.org/wiki/Headless_browser\">위키</a></p>\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><ul>\n<li>Headless browser는 GUI없는 웹 브라우져다!</li>\n<li>CLI나 network communication을 통해 실행된다.</li>\n<li>특히 e2e 테스팅에 유용함</li>\n</ul>\n<h3 id=\"Use-cases\"><a href=\"#Use-cases\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><ul>\n<li>모던 웹 어플리케이션에서의 테스트 자동화</li>\n<li>웹 페이지의 스크린샷을 찍는 용도(?)</li>\n<li>자바스크립트 라이브러리들의 테스트 자동화</li>\n<li>웹 사이트 데이터 스크랩핑</li>\n<li>웹 페이지의 인터렉션 자동화</li>\n</ul>\n<h3 id=\"악용\"><a href=\"#악용\" class=\"headerlink\" title=\"악용\"></a>악용</h3><ul>\n<li>DDOS 공격</li>\n<li>Increase advertisement impressions (광고 노출 수 늘리기!?)</li>\n<li>Automate web sites in unintended ways (정보 채가기)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Today-I-Learn\"><a href=\"#Today-I-Learn\" class=\"headerlink\" title=\"Today I Learn!\"></a>Today I Learn!</h1><h2 id=\"Puppeteer\"><a href=\"#Puppeteer\" class=\"headerlink\" title=\"Puppeteer\"></a>Puppeteer</h2><h2 id=\"Headless-browser\"><a href=\"#Headless-browser\" class=\"headerlink\" title=\"Headless browser\"></a>Headless browser</h2><p><a href=\"https://en.wikipedia.org/wiki/Headless_browser\">위키</a></p>\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><ul>\n<li>Headless browser는 GUI없는 웹 브라우져다!</li>\n<li>CLI나 network communication을 통해 실행된다.</li>\n<li>특히 e2e 테스팅에 유용함</li>\n</ul>\n<h3 id=\"Use-cases\"><a href=\"#Use-cases\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><ul>\n<li>모던 웹 어플리케이션에서의 테스트 자동화</li>\n<li>웹 페이지의 스크린샷을 찍는 용도(?)</li>\n<li>자바스크립트 라이브러리들의 테스트 자동화</li>\n<li>웹 사이트 데이터 스크랩핑</li>\n<li>웹 페이지의 인터렉션 자동화</li>\n</ul>\n<h3 id=\"악용\"><a href=\"#악용\" class=\"headerlink\" title=\"악용\"></a>악용</h3><ul>\n<li>DDOS 공격</li>\n<li>Increase advertisement impressions (광고 노출 수 늘리기!?)</li>\n<li>Automate web sites in unintended ways (정보 채가기)</li>\n</ul>\n"},{"title":"TIL","date":"2018-10-22T00:53:54.000Z","_content":"\n# TODAY I LEARN!\n\n## E2E test\n\n### puppeteer\n\n- \n\n## slack api 연동\n\n[python으로 작업](https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&logNo=221090833195&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F)\n\n\n## MongoDB\n\n- NoSQL DB\n\n[참조](https://velopert.com/436)\n\n","source":"_posts/TIL-2018-10-22.md","raw":"---\ntitle: TIL\ndate: 2018-10-22 09:53:54\ncategories:\ntags:\n---\n\n# TODAY I LEARN!\n\n## E2E test\n\n### puppeteer\n\n- \n\n## slack api 연동\n\n[python으로 작업](https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&logNo=221090833195&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F)\n\n\n## MongoDB\n\n- NoSQL DB\n\n[참조](https://velopert.com/436)\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqa000wbqwxa0bm71lq","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"E2E-test\"><a href=\"#E2E-test\" class=\"headerlink\" title=\"E2E test\"></a>E2E test</h2><h3 id=\"puppeteer\"><a href=\"#puppeteer\" class=\"headerlink\" title=\"puppeteer\"></a>puppeteer</h3><ul>\n<li><h2 id=\"slack-api-연동\"><a href=\"#slack-api-연동\" class=\"headerlink\" title=\"slack api 연동\"></a>slack api 연동</h2></li>\n</ul>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&amp;logNo=221090833195&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F\">python으로 작업</a></p>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><ul>\n<li>NoSQL DB</li>\n</ul>\n<p><a href=\"https://velopert.com/436\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"E2E-test\"><a href=\"#E2E-test\" class=\"headerlink\" title=\"E2E test\"></a>E2E test</h2><h3 id=\"puppeteer\"><a href=\"#puppeteer\" class=\"headerlink\" title=\"puppeteer\"></a>puppeteer</h3><ul>\n<li><h2 id=\"slack-api-연동\"><a href=\"#slack-api-연동\" class=\"headerlink\" title=\"slack api 연동\"></a>slack api 연동</h2></li>\n</ul>\n<p><a href=\"https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&amp;logNo=221090833195&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F\">python으로 작업</a></p>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><ul>\n<li>NoSQL DB</li>\n</ul>\n<p><a href=\"https://velopert.com/436\">참조</a></p>\n"},{"title":"TIL","date":"2018-10-23T01:44:54.000Z","_content":"\n# TODAY I LEARN!\n\n## BVT (Build Verification Testing)\n\n[BVT란?](https://www.sten.or.kr/bbs/board.php?bo_table=column&wr_id=122)\n\n하는 이유를 알고 하자\n\n---\n\n## Currying\n\n[참조](https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339)\n\n---\n\n## .gitignore 적용 안될때!\n\n[참조](http://theeye.pe.kr/archives/2091)\n\n---\n\n## 일에 관한 영상\n\n[영상](https://www.youtube.com/watch?v=iaNl6zKTBfg&feature=youtu.be)\n\n- rank-driven vs role-driven\n    - 너무 다름.\n    - 어떤 차이가 있는지를 알고 일하자\n- 미션을 정확히 이해\n\n- 실리콘밸리 - role-driven\n    - 책임감\n    - 전문가\n    - 회사의 소유권, 결정권 -> 책임감, 전문성\n    - 미션을 일치 시킴\n- 회사의 소유권 결정권 부터 나눠야함!","source":"_posts/TIL-2018-10-23.md","raw":"---\ntitle: TIL\ndate: 2018-10-23 10:44:54\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## BVT (Build Verification Testing)\n\n[BVT란?](https://www.sten.or.kr/bbs/board.php?bo_table=column&wr_id=122)\n\n하는 이유를 알고 하자\n\n---\n\n## Currying\n\n[참조](https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339)\n\n---\n\n## .gitignore 적용 안될때!\n\n[참조](http://theeye.pe.kr/archives/2091)\n\n---\n\n## 일에 관한 영상\n\n[영상](https://www.youtube.com/watch?v=iaNl6zKTBfg&feature=youtu.be)\n\n- rank-driven vs role-driven\n    - 너무 다름.\n    - 어떤 차이가 있는지를 알고 일하자\n- 미션을 정확히 이해\n\n- 실리콘밸리 - role-driven\n    - 책임감\n    - 전문가\n    - 회사의 소유권, 결정권 -> 책임감, 전문성\n    - 미션을 일치 시킴\n- 회사의 소유권 결정권 부터 나눠야함!","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqc0010bqwx1ikrbxmu","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"BVT-Build-Verification-Testing\"><a href=\"#BVT-Build-Verification-Testing\" class=\"headerlink\" title=\"BVT (Build Verification Testing)\"></a>BVT (Build Verification Testing)</h2><p><a href=\"https://www.sten.or.kr/bbs/board.php?bo_table=column&amp;wr_id=122\">BVT란?</a></p>\n<p>하는 이유를 알고 하자</p>\n<hr>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p><a href=\"https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339\">참조</a></p>\n<hr>\n<h2 id=\"gitignore-적용-안될때\"><a href=\"#gitignore-적용-안될때\" class=\"headerlink\" title=\".gitignore 적용 안될때!\"></a>.gitignore 적용 안될때!</h2><p><a href=\"http://theeye.pe.kr/archives/2091\">참조</a></p>\n<hr>\n<h2 id=\"일에-관한-영상\"><a href=\"#일에-관한-영상\" class=\"headerlink\" title=\"일에 관한 영상\"></a>일에 관한 영상</h2><p><a href=\"https://www.youtube.com/watch?v=iaNl6zKTBfg&amp;feature=youtu.be\">영상</a></p>\n<ul>\n<li>rank-driven vs role-driven<ul>\n<li>너무 다름.</li>\n<li>어떤 차이가 있는지를 알고 일하자</li>\n</ul>\n</li>\n<li><p>미션을 정확히 이해</p>\n</li>\n<li><p>실리콘밸리 - role-driven</p>\n<ul>\n<li>책임감</li>\n<li>전문가</li>\n<li>회사의 소유권, 결정권 -&gt; 책임감, 전문성</li>\n<li>미션을 일치 시킴</li>\n</ul>\n</li>\n<li>회사의 소유권 결정권 부터 나눠야함!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"BVT-Build-Verification-Testing\"><a href=\"#BVT-Build-Verification-Testing\" class=\"headerlink\" title=\"BVT (Build Verification Testing)\"></a>BVT (Build Verification Testing)</h2><p><a href=\"https://www.sten.or.kr/bbs/board.php?bo_table=column&amp;wr_id=122\">BVT란?</a></p>\n<p>하는 이유를 알고 하자</p>\n<hr>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p><a href=\"https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339\">참조</a></p>\n<hr>\n<h2 id=\"gitignore-적용-안될때\"><a href=\"#gitignore-적용-안될때\" class=\"headerlink\" title=\".gitignore 적용 안될때!\"></a>.gitignore 적용 안될때!</h2><p><a href=\"http://theeye.pe.kr/archives/2091\">참조</a></p>\n<hr>\n<h2 id=\"일에-관한-영상\"><a href=\"#일에-관한-영상\" class=\"headerlink\" title=\"일에 관한 영상\"></a>일에 관한 영상</h2><p><a href=\"https://www.youtube.com/watch?v=iaNl6zKTBfg&amp;feature=youtu.be\">영상</a></p>\n<ul>\n<li>rank-driven vs role-driven<ul>\n<li>너무 다름.</li>\n<li>어떤 차이가 있는지를 알고 일하자</li>\n</ul>\n</li>\n<li><p>미션을 정확히 이해</p>\n</li>\n<li><p>실리콘밸리 - role-driven</p>\n<ul>\n<li>책임감</li>\n<li>전문가</li>\n<li>회사의 소유권, 결정권 -&gt; 책임감, 전문성</li>\n<li>미션을 일치 시킴</li>\n</ul>\n</li>\n<li>회사의 소유권 결정권 부터 나눠야함!</li>\n</ul>\n"},{"title":"TIL","date":"2018-10-30T02:01:45.000Z","_content":"\n# TODAY I LEARN!\n\n뭐하지?\n리펙토링?\n\n무슨 공부하지?\n\n## Promise\n\n[캡틴판교님의 글을 참고했다.](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/)\n\n---\n\n## 이벤트 캡쳐, 버블링\n\n[참고](https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/)\n\n## 웹 소켓\n\n[참고 - 한국어](https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9B%B9%EC%86%8C%EC%BC%93-%EB%B0%8F-http-2-sse-1ccde9f9dc51)\n","source":"_posts/TIL-2018-10-30.md","raw":"---\ntitle: TIL\ndate: 2018-10-30 11:01:45\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n뭐하지?\n리펙토링?\n\n무슨 공부하지?\n\n## Promise\n\n[캡틴판교님의 글을 참고했다.](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/)\n\n---\n\n## 이벤트 캡쳐, 버블링\n\n[참고](https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/)\n\n## 웹 소켓\n\n[참고 - 한국어](https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9B%B9%EC%86%8C%EC%BC%93-%EB%B0%8F-http-2-sse-1ccde9f9dc51)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqc0012bqwx8l31h2h6","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><p>뭐하지?<br>리펙토링?</p>\n<p>무슨 공부하지?</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">캡틴판교님의 글을 참고했다.</a></p>\n<hr>\n<h2 id=\"이벤트-캡쳐-버블링\"><a href=\"#이벤트-캡쳐-버블링\" class=\"headerlink\" title=\"이벤트 캡쳐, 버블링\"></a>이벤트 캡쳐, 버블링</h2><p><a href=\"https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/\">참고</a></p>\n<h2 id=\"웹-소켓\"><a href=\"#웹-소켓\" class=\"headerlink\" title=\"웹 소켓\"></a>웹 소켓</h2><p><a href=\"https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9B%B9%EC%86%8C%EC%BC%93-%EB%B0%8F-http-2-sse-1ccde9f9dc51\">참고 - 한국어</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><p>뭐하지?<br>리펙토링?</p>\n<p>무슨 공부하지?</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><p><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">캡틴판교님의 글을 참고했다.</a></p>\n<hr>\n<h2 id=\"이벤트-캡쳐-버블링\"><a href=\"#이벤트-캡쳐-버블링\" class=\"headerlink\" title=\"이벤트 캡쳐, 버블링\"></a>이벤트 캡쳐, 버블링</h2><p><a href=\"https://joshua1988.github.io/web-development/javascript/event-propagation-delegation/\">참고</a></p>\n<h2 id=\"웹-소켓\"><a href=\"#웹-소켓\" class=\"headerlink\" title=\"웹 소켓\"></a>웹 소켓</h2><p><a href=\"https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%9B%B9%EC%86%8C%EC%BC%93-%EB%B0%8F-http-2-sse-1ccde9f9dc51\">참고 - 한국어</a></p>\n"},{"title":"TIL","date":"2018-10-29T02:50:35.000Z","_content":"\n# TODAY I LEARN!\n\n## mac command not found 에러!\n\n요거때매 한동안 hexo 명령어가 동작하지 않아서 블로깅을 못했다 ㅠㅠ\n\n드디어 해결법을 알아서 블로깅을 한다..\n\n문제는 echo $PATH로 확인해 봤을때, 큰 문제가 없는데 이상하게 hexo가 먹히지 않는것이었다.\n\n몇번을 다시 설치해보고, 확인해도 동일하여 원인을 파악 못했는데,\n\n``` bash\n    sudo npm install -g hexo-cli\n```\n다시 설치하는 과정에서, 설치 결과를 자세히 봐보았다.\n\n``` bash\n    /Users/user/.npm-global/bin/hexo -> /Users/user/.npm-global/lib/node_modules/hexo-cli/bin/hexo\n```\n\n뭔가 결과로 나온 설치 경로를 보니, NPM 글로벌로 설치했을때, 설치 경로가 PATH에 등록되어있지 않을 것 같아서 검색해보았고,\n\n[이 글](https://stackoverflow.com/questions/15054388/global-node-modules-not-installing-correctly-command-not-found)을 참고하여 해결하였다,,\n\n\n``` bash\n    npm config set prefix /usr/local\n```\n\n---\n\n밀린 포스트를 써보자\n\n## Postman\n\n파트장님이 꿀팁을 알려주셨다.\n\n### postman -> API 값 바꾸면서 확인하고 싶을 경우\n\n먼저, 개발자 도구 -> 네트워크에서 원하는 api 우클릭 -> copy -> cURL copy!\n\n![](/images/postman_example1.png)\n\n그 후, postman에서 Import -> Past Raw Text -> copy 후, Import를 한뒤, 원하는 파라미터를 입력하여 send하고 결과를 받아보며 작업하면 된다!\n\n![](/images/postman_example2.png)\n\n---\n\n## Javascript\n\n어떻게 자바스크립트를 공부해야 하는지, 뭘해야하는지 잘 정리되어있음\n[참고](http://jstherightway.org/ko-kr/#patterns)\n\n---\n\n## Javascript Core\nDmitry Soshnikov의 [JavaScript. The Core.](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/)\n\n---\n\n## Learning Javascript Design Patterns\n[참고](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n\n---\n\n## Webpack\n\n웹팩 관련해서 D2에서 작성한 좋은 글이 있다. 한번 봐보자!\n[참고](https://d2.naver.com/helloworld/0239818)\n\n## V8 engine에서 Javascript가 어떻게 동작하는지\n\n[참고](https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e)","source":"_posts/TIL-2018-10-29.md","raw":"---\ntitle: TIL\ndate: 2018-10-29 11:50:35\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## mac command not found 에러!\n\n요거때매 한동안 hexo 명령어가 동작하지 않아서 블로깅을 못했다 ㅠㅠ\n\n드디어 해결법을 알아서 블로깅을 한다..\n\n문제는 echo $PATH로 확인해 봤을때, 큰 문제가 없는데 이상하게 hexo가 먹히지 않는것이었다.\n\n몇번을 다시 설치해보고, 확인해도 동일하여 원인을 파악 못했는데,\n\n``` bash\n    sudo npm install -g hexo-cli\n```\n다시 설치하는 과정에서, 설치 결과를 자세히 봐보았다.\n\n``` bash\n    /Users/user/.npm-global/bin/hexo -> /Users/user/.npm-global/lib/node_modules/hexo-cli/bin/hexo\n```\n\n뭔가 결과로 나온 설치 경로를 보니, NPM 글로벌로 설치했을때, 설치 경로가 PATH에 등록되어있지 않을 것 같아서 검색해보았고,\n\n[이 글](https://stackoverflow.com/questions/15054388/global-node-modules-not-installing-correctly-command-not-found)을 참고하여 해결하였다,,\n\n\n``` bash\n    npm config set prefix /usr/local\n```\n\n---\n\n밀린 포스트를 써보자\n\n## Postman\n\n파트장님이 꿀팁을 알려주셨다.\n\n### postman -> API 값 바꾸면서 확인하고 싶을 경우\n\n먼저, 개발자 도구 -> 네트워크에서 원하는 api 우클릭 -> copy -> cURL copy!\n\n![](/images/postman_example1.png)\n\n그 후, postman에서 Import -> Past Raw Text -> copy 후, Import를 한뒤, 원하는 파라미터를 입력하여 send하고 결과를 받아보며 작업하면 된다!\n\n![](/images/postman_example2.png)\n\n---\n\n## Javascript\n\n어떻게 자바스크립트를 공부해야 하는지, 뭘해야하는지 잘 정리되어있음\n[참고](http://jstherightway.org/ko-kr/#patterns)\n\n---\n\n## Javascript Core\nDmitry Soshnikov의 [JavaScript. The Core.](http://dmitrysoshnikov.com/ecmascript/javascript-the-core/)\n\n---\n\n## Learning Javascript Design Patterns\n[참고](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n\n---\n\n## Webpack\n\n웹팩 관련해서 D2에서 작성한 좋은 글이 있다. 한번 봐보자!\n[참고](https://d2.naver.com/helloworld/0239818)\n\n## V8 engine에서 Javascript가 어떻게 동작하는지\n\n[참고](https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e)","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqd0017bqwx3sqq7ux0","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"mac-command-not-found-에러\"><a href=\"#mac-command-not-found-에러\" class=\"headerlink\" title=\"mac command not found 에러!\"></a>mac command not found 에러!</h2><p>요거때매 한동안 hexo 명령어가 동작하지 않아서 블로깅을 못했다 ㅠㅠ</p>\n<p>드디어 해결법을 알아서 블로깅을 한다..</p>\n<p>문제는 echo $PATH로 확인해 봤을때, 큰 문제가 없는데 이상하게 hexo가 먹히지 않는것이었다.</p>\n<p>몇번을 다시 설치해보고, 확인해도 동일하여 원인을 파악 못했는데,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>다시 설치하는 과정에서, 설치 결과를 자세히 봐보았다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/Users/user/.npm-global/bin/hexo -&gt; /Users/user/.npm-global/lib/node_modules/hexo-cli/bin/hexo</span><br></pre></td></tr></table></figure>\n<p>뭔가 결과로 나온 설치 경로를 보니, NPM 글로벌로 설치했을때, 설치 경로가 PATH에 등록되어있지 않을 것 같아서 검색해보았고,</p>\n<p><a href=\"https://stackoverflow.com/questions/15054388/global-node-modules-not-installing-correctly-command-not-found\">이 글</a>을 참고하여 해결하였다,,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix /usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>밀린 포스트를 써보자</p>\n<h2 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a>Postman</h2><p>파트장님이 꿀팁을 알려주셨다.</p>\n<h3 id=\"postman-gt-API-값-바꾸면서-확인하고-싶을-경우\"><a href=\"#postman-gt-API-값-바꾸면서-확인하고-싶을-경우\" class=\"headerlink\" title=\"postman -&gt; API 값 바꾸면서 확인하고 싶을 경우\"></a>postman -&gt; API 값 바꾸면서 확인하고 싶을 경우</h3><p>먼저, 개발자 도구 -&gt; 네트워크에서 원하는 api 우클릭 -&gt; copy -&gt; cURL copy!</p>\n<p><img src=\"/images/postman_example1.png\" alt=\"\"></p>\n<p>그 후, postman에서 Import -&gt; Past Raw Text -&gt; copy 후, Import를 한뒤, 원하는 파라미터를 입력하여 send하고 결과를 받아보며 작업하면 된다!</p>\n<p><img src=\"/images/postman_example2.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><p>어떻게 자바스크립트를 공부해야 하는지, 뭘해야하는지 잘 정리되어있음<br><a href=\"http://jstherightway.org/ko-kr/#patterns\">참고</a></p>\n<hr>\n<h2 id=\"Javascript-Core\"><a href=\"#Javascript-Core\" class=\"headerlink\" title=\"Javascript Core\"></a>Javascript Core</h2><p>Dmitry Soshnikov의 <a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\">JavaScript. The Core.</a></p>\n<hr>\n<h2 id=\"Learning-Javascript-Design-Patterns\"><a href=\"#Learning-Javascript-Design-Patterns\" class=\"headerlink\" title=\"Learning Javascript Design Patterns\"></a>Learning Javascript Design Patterns</h2><p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\">참고</a></p>\n<hr>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>웹팩 관련해서 D2에서 작성한 좋은 글이 있다. 한번 봐보자!<br><a href=\"https://d2.naver.com/helloworld/0239818\">참고</a></p>\n<h2 id=\"V8-engine에서-Javascript가-어떻게-동작하는지\"><a href=\"#V8-engine에서-Javascript가-어떻게-동작하는지\" class=\"headerlink\" title=\"V8 engine에서 Javascript가 어떻게 동작하는지\"></a>V8 engine에서 Javascript가 어떻게 동작하는지</h2><p><a href=\"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"mac-command-not-found-에러\"><a href=\"#mac-command-not-found-에러\" class=\"headerlink\" title=\"mac command not found 에러!\"></a>mac command not found 에러!</h2><p>요거때매 한동안 hexo 명령어가 동작하지 않아서 블로깅을 못했다 ㅠㅠ</p>\n<p>드디어 해결법을 알아서 블로깅을 한다..</p>\n<p>문제는 echo $PATH로 확인해 봤을때, 큰 문제가 없는데 이상하게 hexo가 먹히지 않는것이었다.</p>\n<p>몇번을 다시 설치해보고, 확인해도 동일하여 원인을 파악 못했는데,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>다시 설치하는 과정에서, 설치 결과를 자세히 봐보았다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/Users/user/.npm-global/bin/hexo -&gt; /Users/user/.npm-global/lib/node_modules/hexo-cli/bin/hexo</span><br></pre></td></tr></table></figure>\n<p>뭔가 결과로 나온 설치 경로를 보니, NPM 글로벌로 설치했을때, 설치 경로가 PATH에 등록되어있지 않을 것 같아서 검색해보았고,</p>\n<p><a href=\"https://stackoverflow.com/questions/15054388/global-node-modules-not-installing-correctly-command-not-found\">이 글</a>을 참고하여 해결하였다,,</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> prefix /usr/<span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>밀린 포스트를 써보자</p>\n<h2 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a>Postman</h2><p>파트장님이 꿀팁을 알려주셨다.</p>\n<h3 id=\"postman-gt-API-값-바꾸면서-확인하고-싶을-경우\"><a href=\"#postman-gt-API-값-바꾸면서-확인하고-싶을-경우\" class=\"headerlink\" title=\"postman -&gt; API 값 바꾸면서 확인하고 싶을 경우\"></a>postman -&gt; API 값 바꾸면서 확인하고 싶을 경우</h3><p>먼저, 개발자 도구 -&gt; 네트워크에서 원하는 api 우클릭 -&gt; copy -&gt; cURL copy!</p>\n<p><img src=\"/images/postman_example1.png\" alt=\"\"></p>\n<p>그 후, postman에서 Import -&gt; Past Raw Text -&gt; copy 후, Import를 한뒤, 원하는 파라미터를 입력하여 send하고 결과를 받아보며 작업하면 된다!</p>\n<p><img src=\"/images/postman_example2.png\" alt=\"\"></p>\n<hr>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><p>어떻게 자바스크립트를 공부해야 하는지, 뭘해야하는지 잘 정리되어있음<br><a href=\"http://jstherightway.org/ko-kr/#patterns\">참고</a></p>\n<hr>\n<h2 id=\"Javascript-Core\"><a href=\"#Javascript-Core\" class=\"headerlink\" title=\"Javascript Core\"></a>Javascript Core</h2><p>Dmitry Soshnikov의 <a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\">JavaScript. The Core.</a></p>\n<hr>\n<h2 id=\"Learning-Javascript-Design-Patterns\"><a href=\"#Learning-Javascript-Design-Patterns\" class=\"headerlink\" title=\"Learning Javascript Design Patterns\"></a>Learning Javascript Design Patterns</h2><p><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\">참고</a></p>\n<hr>\n<h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h2><p>웹팩 관련해서 D2에서 작성한 좋은 글이 있다. 한번 봐보자!<br><a href=\"https://d2.naver.com/helloworld/0239818\">참고</a></p>\n<h2 id=\"V8-engine에서-Javascript가-어떻게-동작하는지\"><a href=\"#V8-engine에서-Javascript가-어떻게-동작하는지\" class=\"headerlink\" title=\"V8 engine에서 Javascript가 어떻게 동작하는지\"></a>V8 engine에서 Javascript가 어떻게 동작하는지</h2><p><a href=\"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e\">참고</a></p>\n"},{"title":"TIL","date":"2018-11-02T02:28:11.000Z","_content":"\n# TODAY I LEARN!\n\n## Webpack!\n\n[Webpack](https://webpack.js.org/)\n\n[웹팩의 기본 개념](http://blog.jeonghwan.net/js/2017/05/15/webpack.html)\n","source":"_posts/TIL-2018-11-02.md","raw":"---\ntitle: TIL\ndate: 2018-11-02 11:28:11\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## Webpack!\n\n[Webpack](https://webpack.js.org/)\n\n[웹팩의 기본 개념](http://blog.jeonghwan.net/js/2017/05/15/webpack.html)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqe0019bqwx1ymx5inb","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack!\"></a>Webpack!</h2><p><a href=\"https://webpack.js.org/\">Webpack</a></p>\n<p><a href=\"http://blog.jeonghwan.net/js/2017/05/15/webpack.html\">웹팩의 기본 개념</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack!\"></a>Webpack!</h2><p><a href=\"https://webpack.js.org/\">Webpack</a></p>\n<p><a href=\"http://blog.jeonghwan.net/js/2017/05/15/webpack.html\">웹팩의 기본 개념</a></p>\n"},{"title":"TIL","date":"2018-11-05T02:42:35.000Z","_content":"\n# TODAY I LEARN!\n\n## NNTO, 쿠키, 캐싱, SEO\n\n---\n\n## Javascript 에서 This의 의미\n[참고](http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/)\n\n자바스크립트에서 this는 함수의 현재 실행 문맥이다\n\n---\n\n## Service worker\n- https 에서만 가능\n- UI thread와 다른 스레드를 사용\n- 대용량 처리나, 캐싱이 필요한 작업에 사용\n- 캐싱이 되기때문에 오프라인 체크를 하고 캐싱 데이터 사용할 수 있음\n\n[서비스워커](https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ko)\n\n[참고](https://medium.com/@Dongmin_Jang/frontend-service-worker-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9B%8C%EC%BB%A4%EA%B0%80-%EB%AC%B4%EC%97%87-2dab5d60f611)\n\n---\n\n## 안정성 + 성능\n- 테스트 기법과 네트워크 기본기를 다지자\n- 나만의 보일러플레이트\n\n---\n\n## Singleton\n[싱글톤 패턴](https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4)\n\n[참조](http://asfirstalways.tistory.com/335)\n","source":"_posts/TIL-2018-11-05.md","raw":"---\ntitle: TIL\ndate: 2018-11-05 11:42:35\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## NNTO, 쿠키, 캐싱, SEO\n\n---\n\n## Javascript 에서 This의 의미\n[참고](http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/)\n\n자바스크립트에서 this는 함수의 현재 실행 문맥이다\n\n---\n\n## Service worker\n- https 에서만 가능\n- UI thread와 다른 스레드를 사용\n- 대용량 처리나, 캐싱이 필요한 작업에 사용\n- 캐싱이 되기때문에 오프라인 체크를 하고 캐싱 데이터 사용할 수 있음\n\n[서비스워커](https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ko)\n\n[참고](https://medium.com/@Dongmin_Jang/frontend-service-worker-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9B%8C%EC%BB%A4%EA%B0%80-%EB%AC%B4%EC%97%87-2dab5d60f611)\n\n---\n\n## 안정성 + 성능\n- 테스트 기법과 네트워크 기본기를 다지자\n- 나만의 보일러플레이트\n\n---\n\n## Singleton\n[싱글톤 패턴](https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4)\n\n[참조](http://asfirstalways.tistory.com/335)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqe001ebqwxaqgf9mqw","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"NNTO-쿠키-캐싱-SEO\"><a href=\"#NNTO-쿠키-캐싱-SEO\" class=\"headerlink\" title=\"NNTO, 쿠키, 캐싱, SEO\"></a>NNTO, 쿠키, 캐싱, SEO</h2><hr>\n<h2 id=\"Javascript-에서-This의-의미\"><a href=\"#Javascript-에서-This의-의미\" class=\"headerlink\" title=\"Javascript 에서 This의 의미\"></a>Javascript 에서 This의 의미</h2><p><a href=\"http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/\">참고</a></p>\n<p>자바스크립트에서 this는 함수의 현재 실행 문맥이다</p>\n<hr>\n<h2 id=\"Service-worker\"><a href=\"#Service-worker\" class=\"headerlink\" title=\"Service worker\"></a>Service worker</h2><ul>\n<li>https 에서만 가능</li>\n<li>UI thread와 다른 스레드를 사용</li>\n<li>대용량 처리나, 캐싱이 필요한 작업에 사용</li>\n<li>캐싱이 되기때문에 오프라인 체크를 하고 캐싱 데이터 사용할 수 있음</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ko\">서비스워커</a></p>\n<p><a href=\"https://medium.com/@Dongmin_Jang/frontend-service-worker-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9B%8C%EC%BB%A4%EA%B0%80-%EB%AC%B4%EC%97%87-2dab5d60f611\">참고</a></p>\n<hr>\n<h2 id=\"안정성-성능\"><a href=\"#안정성-성능\" class=\"headerlink\" title=\"안정성 + 성능\"></a>안정성 + 성능</h2><ul>\n<li>테스트 기법과 네트워크 기본기를 다지자</li>\n<li>나만의 보일러플레이트</li>\n</ul>\n<hr>\n<h2 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"Singleton\"></a>Singleton</h2><p><a href=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4\">싱글톤 패턴</a></p>\n<p><a href=\"http://asfirstalways.tistory.com/335\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"NNTO-쿠키-캐싱-SEO\"><a href=\"#NNTO-쿠키-캐싱-SEO\" class=\"headerlink\" title=\"NNTO, 쿠키, 캐싱, SEO\"></a>NNTO, 쿠키, 캐싱, SEO</h2><hr>\n<h2 id=\"Javascript-에서-This의-의미\"><a href=\"#Javascript-에서-This의-의미\" class=\"headerlink\" title=\"Javascript 에서 This의 의미\"></a>Javascript 에서 This의 의미</h2><p><a href=\"http://webframeworks.kr/tutorials/translate/explanation-of-this-in-javascript-1/\">참고</a></p>\n<p>자바스크립트에서 this는 함수의 현재 실행 문맥이다</p>\n<hr>\n<h2 id=\"Service-worker\"><a href=\"#Service-worker\" class=\"headerlink\" title=\"Service worker\"></a>Service worker</h2><ul>\n<li>https 에서만 가능</li>\n<li>UI thread와 다른 스레드를 사용</li>\n<li>대용량 처리나, 캐싱이 필요한 작업에 사용</li>\n<li>캐싱이 되기때문에 오프라인 체크를 하고 캐싱 데이터 사용할 수 있음</li>\n</ul>\n<p><a href=\"https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ko\">서비스워커</a></p>\n<p><a href=\"https://medium.com/@Dongmin_Jang/frontend-service-worker-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%9B%8C%EC%BB%A4%EA%B0%80-%EB%AC%B4%EC%97%87-2dab5d60f611\">참고</a></p>\n<hr>\n<h2 id=\"안정성-성능\"><a href=\"#안정성-성능\" class=\"headerlink\" title=\"안정성 + 성능\"></a>안정성 + 성능</h2><ul>\n<li>테스트 기법과 네트워크 기본기를 다지자</li>\n<li>나만의 보일러플레이트</li>\n</ul>\n<hr>\n<h2 id=\"Singleton\"><a href=\"#Singleton\" class=\"headerlink\" title=\"Singleton\"></a>Singleton</h2><p><a href=\"https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4\">싱글톤 패턴</a></p>\n<p><a href=\"http://asfirstalways.tistory.com/335\">참조</a></p>\n"},{"title":"TIL","date":"2018-11-09T01:38:00.000Z","_content":"\n# TODAY I LEARN!\n\n## JEST\n자바스크립트 테스트 라이브러리 중 하나인 [제스트](https://jestjs.io/en/)에 대해서 공부해보자. & 도큐먼트 번역해서 정리해보자\n\n---\n\n","source":"_posts/TIL-2018-11-09.md","raw":"---\ntitle: TIL\ndate: 2018-11-09 10:38:00\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## JEST\n자바스크립트 테스트 라이브러리 중 하나인 [제스트](https://jestjs.io/en/)에 대해서 공부해보자. & 도큐먼트 번역해서 정리해보자\n\n---\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqf001gbqwx9jr02z9z","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"JEST\"><a href=\"#JEST\" class=\"headerlink\" title=\"JEST\"></a>JEST</h2><p>자바스크립트 테스트 라이브러리 중 하나인 <a href=\"https://jestjs.io/en/\">제스트</a>에 대해서 공부해보자. &amp; 도큐먼트 번역해서 정리해보자</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"JEST\"><a href=\"#JEST\" class=\"headerlink\" title=\"JEST\"></a>JEST</h2><p>자바스크립트 테스트 라이브러리 중 하나인 <a href=\"https://jestjs.io/en/\">제스트</a>에 대해서 공부해보자. &amp; 도큐먼트 번역해서 정리해보자</p>\n<hr>\n"},{"title":"TIL","date":"2018-11-13T01:26:49.000Z","_content":"\n# TODAY I LEARN!\n\n## 웹 성능 측정 / 개선\n[참고](https://slides.com/jbee/devfest_seoul_2018_performance_optimization_with_chrome_devtools?fbclid=IwAR3jzWBUAmZsp4FzH_knLCbnbT2L1wTd029f7Hf1XUxQEHRDksSReEOitJ8#/3)\n\n### 측정\n- [RAIL](https://developers.google.com/web/fundamentals/performance/rail?hl=ko) : 사용자 중심 성능 모델\n    - Resopnse\n    - Animation\n    - Idle\n    - Load\n- [타임라인 도구 활용법](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=ko)\n- [Audits](https://github.com/GoogleChrome/lighthouse)\n\n### 개선\n- 로딩 과정\n    - [참고](https://support.smartbear.com/alertsite/docs/monitors/metrics/web-page-load-time.html)\n- 3R\n    - Request 개수\n    - Resource 크기\n    - Rendering 시간\n        - [CRP 최적화](https://m.post.naver.com/viewer/postView.nhn?volumeNo=8431285&memberNo=34176766)\n- lazy loading\n    - [Intersection Observer](https://github.com/codepink/codepink.github.com/wiki/%EB%84%88%EB%8A%94-%EB%82%98%EB%A5%BC-%EB%B3%B8%EB%8B%A4:-%EC%A7%80%EC%97%B0-%EB%B0%A9%EB%B2%95,-%EB%A0%88%EC%9D%B4%EC%A7%80-%EB%A1%9C%EB%93%9C%EC%99%80-IntersectionObserver%EC%9D%98-%EB%8F%99%EC%9E%91)\n- 최적화 \n","source":"_posts/TIL-2018-11-13.md","raw":"---\ntitle: TIL\ndate: 2018-11-13 10:26:49\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## 웹 성능 측정 / 개선\n[참고](https://slides.com/jbee/devfest_seoul_2018_performance_optimization_with_chrome_devtools?fbclid=IwAR3jzWBUAmZsp4FzH_knLCbnbT2L1wTd029f7Hf1XUxQEHRDksSReEOitJ8#/3)\n\n### 측정\n- [RAIL](https://developers.google.com/web/fundamentals/performance/rail?hl=ko) : 사용자 중심 성능 모델\n    - Resopnse\n    - Animation\n    - Idle\n    - Load\n- [타임라인 도구 활용법](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=ko)\n- [Audits](https://github.com/GoogleChrome/lighthouse)\n\n### 개선\n- 로딩 과정\n    - [참고](https://support.smartbear.com/alertsite/docs/monitors/metrics/web-page-load-time.html)\n- 3R\n    - Request 개수\n    - Resource 크기\n    - Rendering 시간\n        - [CRP 최적화](https://m.post.naver.com/viewer/postView.nhn?volumeNo=8431285&memberNo=34176766)\n- lazy loading\n    - [Intersection Observer](https://github.com/codepink/codepink.github.com/wiki/%EB%84%88%EB%8A%94-%EB%82%98%EB%A5%BC-%EB%B3%B8%EB%8B%A4:-%EC%A7%80%EC%97%B0-%EB%B0%A9%EB%B2%95,-%EB%A0%88%EC%9D%B4%EC%A7%80-%EB%A1%9C%EB%93%9C%EC%99%80-IntersectionObserver%EC%9D%98-%EB%8F%99%EC%9E%91)\n- 최적화 \n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqg001kbqwx4f0b10wk","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"웹-성능-측정-개선\"><a href=\"#웹-성능-측정-개선\" class=\"headerlink\" title=\"웹 성능 측정 / 개선\"></a>웹 성능 측정 / 개선</h2><p><a href=\"https://slides.com/jbee/devfest_seoul_2018_performance_optimization_with_chrome_devtools?fbclid=IwAR3jzWBUAmZsp4FzH_knLCbnbT2L1wTd029f7Hf1XUxQEHRDksSReEOitJ8#/3\">참고</a></p>\n<h3 id=\"측정\"><a href=\"#측정\" class=\"headerlink\" title=\"측정\"></a>측정</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=ko\">RAIL</a> : 사용자 중심 성능 모델<ul>\n<li>Resopnse</li>\n<li>Animation</li>\n<li>Idle</li>\n<li>Load</li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=ko\">타임라인 도구 활용법</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse\">Audits</a></li>\n</ul>\n<h3 id=\"개선\"><a href=\"#개선\" class=\"headerlink\" title=\"개선\"></a>개선</h3><ul>\n<li>로딩 과정<ul>\n<li><a href=\"https://support.smartbear.com/alertsite/docs/monitors/metrics/web-page-load-time.html\">참고</a></li>\n</ul>\n</li>\n<li>3R<ul>\n<li>Request 개수</li>\n<li>Resource 크기</li>\n<li>Rendering 시간<ul>\n<li><a href=\"https://m.post.naver.com/viewer/postView.nhn?volumeNo=8431285&amp;memberNo=34176766\">CRP 최적화</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>lazy loading<ul>\n<li><a href=\"https://github.com/codepink/codepink.github.com/wiki/%EB%84%88%EB%8A%94-%EB%82%98%EB%A5%BC-%EB%B3%B8%EB%8B%A4:-%EC%A7%80%EC%97%B0-%EB%B0%A9%EB%B2%95,-%EB%A0%88%EC%9D%B4%EC%A7%80-%EB%A1%9C%EB%93%9C%EC%99%80-IntersectionObserver%EC%9D%98-%EB%8F%99%EC%9E%91\">Intersection Observer</a></li>\n</ul>\n</li>\n<li>최적화 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"웹-성능-측정-개선\"><a href=\"#웹-성능-측정-개선\" class=\"headerlink\" title=\"웹 성능 측정 / 개선\"></a>웹 성능 측정 / 개선</h2><p><a href=\"https://slides.com/jbee/devfest_seoul_2018_performance_optimization_with_chrome_devtools?fbclid=IwAR3jzWBUAmZsp4FzH_knLCbnbT2L1wTd029f7Hf1XUxQEHRDksSReEOitJ8#/3\">참고</a></p>\n<h3 id=\"측정\"><a href=\"#측정\" class=\"headerlink\" title=\"측정\"></a>측정</h3><ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=ko\">RAIL</a> : 사용자 중심 성능 모델<ul>\n<li>Resopnse</li>\n<li>Animation</li>\n<li>Idle</li>\n<li>Load</li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=ko\">타임라인 도구 활용법</a></li>\n<li><a href=\"https://github.com/GoogleChrome/lighthouse\">Audits</a></li>\n</ul>\n<h3 id=\"개선\"><a href=\"#개선\" class=\"headerlink\" title=\"개선\"></a>개선</h3><ul>\n<li>로딩 과정<ul>\n<li><a href=\"https://support.smartbear.com/alertsite/docs/monitors/metrics/web-page-load-time.html\">참고</a></li>\n</ul>\n</li>\n<li>3R<ul>\n<li>Request 개수</li>\n<li>Resource 크기</li>\n<li>Rendering 시간<ul>\n<li><a href=\"https://m.post.naver.com/viewer/postView.nhn?volumeNo=8431285&amp;memberNo=34176766\">CRP 최적화</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>lazy loading<ul>\n<li><a href=\"https://github.com/codepink/codepink.github.com/wiki/%EB%84%88%EB%8A%94-%EB%82%98%EB%A5%BC-%EB%B3%B8%EB%8B%A4:-%EC%A7%80%EC%97%B0-%EB%B0%A9%EB%B2%95,-%EB%A0%88%EC%9D%B4%EC%A7%80-%EB%A1%9C%EB%93%9C%EC%99%80-IntersectionObserver%EC%9D%98-%EB%8F%99%EC%9E%91\">Intersection Observer</a></li>\n</ul>\n</li>\n<li>최적화 </li>\n</ul>\n"},{"title":"TIL","date":"2018-11-22T05:44:59.000Z","_content":"\n# TODAY I LEARN!\n\n## JEST\n\n``` javascript\njest.mock('../../../~~~.vue', () => ({});\n```\n요로케 implemenation을 해줘야함\n\n[mock-implementation](https://jestjs.io/docs/en/mock-functions#mock-implementations)\n","source":"_posts/TIL-2018-11-22.md","raw":"---\ntitle: TIL\ndate: 2018-11-22 14:44:59\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n## JEST\n\n``` javascript\njest.mock('../../../~~~.vue', () => ({});\n```\n요로케 implemenation을 해줘야함\n\n[mock-implementation](https://jestjs.io/docs/en/mock-functions#mock-implementations)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqg001mbqwx0lbzeh5b","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"JEST\"><a href=\"#JEST\" class=\"headerlink\" title=\"JEST\"></a>JEST</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest.mock(<span class=\"string\">&#x27;../../../~~~.vue&#x27;</span>, <span class=\"function\">() =&gt;</span> (&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>요로케 implemenation을 해줘야함</p>\n<p><a href=\"https://jestjs.io/docs/en/mock-functions#mock-implementations\">mock-implementation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h2 id=\"JEST\"><a href=\"#JEST\" class=\"headerlink\" title=\"JEST\"></a>JEST</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest.mock(<span class=\"string\">&#x27;../../../~~~.vue&#x27;</span>, <span class=\"function\">() =&gt;</span> (&#123;&#125;);</span><br></pre></td></tr></table></figure>\n<p>요로케 implemenation을 해줘야함</p>\n<p><a href=\"https://jestjs.io/docs/en/mock-functions#mock-implementations\">mock-implementation</a></p>\n"},{"title":"TIL","date":"2018-11-26T09:59:54.000Z","_content":"\n# TODAY I LEARN!\n\n### hexo deploy error 해결!\n\n새로운 개발 환경에서 블로깅을 하기 위해 기존에 만들었던 깃헙 블로그 repo를 pull 받으며 발생했던 문제들과 해결 방법에 대해 적어보자.\n\n``` bash\nERROR Deployer not found: git\n```\n\npull 받고, deploy를 하는 과정에서 위와 같은 에러가 발생했다.\n\n[이 글](https://simhyejin.github.io/2016/06/20/hexo-github-pages/)을 참조해서 해결했다!\n\n> hexo-deployer-git을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다.\n\n이게 핵심!\n``` bash\nnpm install hexo-deployer-git --save\n```\n\n---\n\n### git checkout -t\n[git remote branch 가져오기](https://cjh5414.github.io/get-git-remote-branch/)\n\nremote에 존재하는 다른 branch를 가져오고 싶을 경우\n``` bash\ngit remote -t origin/feature/something\n```\n\nfeature/something이라는 브랜치를 가져온다고 가정했다.\n","source":"_posts/TIL-2018-11-26.md","raw":"---\ntitle: TIL\ndate: 2018-11-26 18:59:54\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!\n\n### hexo deploy error 해결!\n\n새로운 개발 환경에서 블로깅을 하기 위해 기존에 만들었던 깃헙 블로그 repo를 pull 받으며 발생했던 문제들과 해결 방법에 대해 적어보자.\n\n``` bash\nERROR Deployer not found: git\n```\n\npull 받고, deploy를 하는 과정에서 위와 같은 에러가 발생했다.\n\n[이 글](https://simhyejin.github.io/2016/06/20/hexo-github-pages/)을 참조해서 해결했다!\n\n> hexo-deployer-git을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다.\n\n이게 핵심!\n``` bash\nnpm install hexo-deployer-git --save\n```\n\n---\n\n### git checkout -t\n[git remote branch 가져오기](https://cjh5414.github.io/get-git-remote-branch/)\n\nremote에 존재하는 다른 branch를 가져오고 싶을 경우\n``` bash\ngit remote -t origin/feature/something\n```\n\nfeature/something이라는 브랜치를 가져온다고 가정했다.\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqh001qbqwx23a0ca6a","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h3 id=\"hexo-deploy-error-해결\"><a href=\"#hexo-deploy-error-해결\" class=\"headerlink\" title=\"hexo deploy error 해결!\"></a>hexo deploy error 해결!</h3><p>새로운 개발 환경에서 블로깅을 하기 위해 기존에 만들었던 깃헙 블로그 repo를 pull 받으며 발생했던 문제들과 해결 방법에 대해 적어보자.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>\n<p>pull 받고, deploy를 하는 과정에서 위와 같은 에러가 발생했다.</p>\n<p><a href=\"https://simhyejin.github.io/2016/06/20/hexo-github-pages/\">이 글</a>을 참조해서 해결했다!</p>\n<blockquote>\n<p>hexo-deployer-git을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다.</p>\n</blockquote>\n<p>이게 핵심!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"git-checkout-t\"><a href=\"#git-checkout-t\" class=\"headerlink\" title=\"git checkout -t\"></a>git checkout -t</h3><p><a href=\"https://cjh5414.github.io/get-git-remote-branch/\">git remote branch 가져오기</a></p>\n<p>remote에 존재하는 다른 branch를 가져오고 싶을 경우<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -t origin/feature/something</span><br></pre></td></tr></table></figure><br>feature/something이라는 브랜치를 가져온다고 가정했다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h3 id=\"hexo-deploy-error-해결\"><a href=\"#hexo-deploy-error-해결\" class=\"headerlink\" title=\"hexo deploy error 해결!\"></a>hexo deploy error 해결!</h3><p>새로운 개발 환경에서 블로깅을 하기 위해 기존에 만들었던 깃헙 블로그 repo를 pull 받으며 발생했던 문제들과 해결 방법에 대해 적어보자.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>\n<p>pull 받고, deploy를 하는 과정에서 위와 같은 에러가 발생했다.</p>\n<p><a href=\"https://simhyejin.github.io/2016/06/20/hexo-github-pages/\">이 글</a>을 참조해서 해결했다!</p>\n<blockquote>\n<p>hexo-deployer-git을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다.</p>\n</blockquote>\n<p>이게 핵심!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"git-checkout-t\"><a href=\"#git-checkout-t\" class=\"headerlink\" title=\"git checkout -t\"></a>git checkout -t</h3><p><a href=\"https://cjh5414.github.io/get-git-remote-branch/\">git remote branch 가져오기</a></p>\n<p>remote에 존재하는 다른 branch를 가져오고 싶을 경우<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -t origin/feature/something</span><br></pre></td></tr></table></figure><br>feature/something이라는 브랜치를 가져온다고 가정했다.</p>\n"},{"title":"TIL","date":"2019-02-22T07:40:15.000Z","_content":"\n# TODAY I LEARN!\n\n### git checkout -b feature/test upstream/feature/test\n\n어떤 리모트(upstream)에 있는 브랜치(feature/test)와 동일한 새로운 브랜치를 만들고 거기로 체크아웃 하는 경우에 이렇게 하면 편하다.\n","source":"_posts/TIL-2019-02-22.md","raw":"---\ntitle: TIL\ndate: 2019-02-22 16:40:15\ncategories:\n    - til\ntags:\n    - til\n    - git\n---\n\n# TODAY I LEARN!\n\n### git checkout -b feature/test upstream/feature/test\n\n어떤 리모트(upstream)에 있는 브랜치(feature/test)와 동일한 새로운 브랜치를 만들고 거기로 체크아웃 하는 경우에 이렇게 하면 편하다.\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqh001ubqwxcb95beuj","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h3 id=\"git-checkout-b-feature-test-upstream-feature-test\"><a href=\"#git-checkout-b-feature-test-upstream-feature-test\" class=\"headerlink\" title=\"git checkout -b feature/test upstream/feature/test\"></a>git checkout -b feature/test upstream/feature/test</h3><p>어떤 리모트(upstream)에 있는 브랜치(feature/test)와 동일한 새로운 브랜치를 만들고 거기로 체크아웃 하는 경우에 이렇게 하면 편하다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!\"></a>TODAY I LEARN!</h1><h3 id=\"git-checkout-b-feature-test-upstream-feature-test\"><a href=\"#git-checkout-b-feature-test-upstream-feature-test\" class=\"headerlink\" title=\"git checkout -b feature/test upstream/feature/test\"></a>git checkout -b feature/test upstream/feature/test</h3><p>어떤 리모트(upstream)에 있는 브랜치(feature/test)와 동일한 새로운 브랜치를 만들고 거기로 체크아웃 하는 경우에 이렇게 하면 편하다.</p>\n"},{"title":"TIL","date":"2018-11-21T03:13:05.000Z","_content":"\n# TODAY I LEARN!!\n\n## git commit 메시지 수정하기\n\n``` bash\ngit commit --amend -m ''\n```\n","source":"_posts/TIL-2018-11-21.md","raw":"---\ntitle: TIL\ndate: 2018-11-21 12:13:05\ncategories:\n    - til\ntags:\n    - til\n---\n\n# TODAY I LEARN!!\n\n## git commit 메시지 수정하기\n\n``` bash\ngit commit --amend -m ''\n```\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqk001ybqwxd8n858ic","content":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!!\"></a>TODAY I LEARN!!</h1><h2 id=\"git-commit-메시지-수정하기\"><a href=\"#git-commit-메시지-수정하기\" class=\"headerlink\" title=\"git commit 메시지 수정하기\"></a>git commit 메시지 수정하기</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TODAY-I-LEARN\"><a href=\"#TODAY-I-LEARN\" class=\"headerlink\" title=\"TODAY I LEARN!!\"></a>TODAY I LEARN!!</h1><h2 id=\"git-commit-메시지-수정하기\"><a href=\"#git-commit-메시지-수정하기\" class=\"headerlink\" title=\"git commit 메시지 수정하기\"></a>git commit 메시지 수정하기</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"TIL","date":"2019-03-14T03:00:19.000Z","_content":"\n## git flow\n\n오늘 릴리즈 브랜치를 처음 피니쉬 해보았다.\n\n우선 git flow init 을 해줘야함\n\n```bash\n$ git flow init\n```\n\n하면, 여러 질문이 나오는데 기본 설정으로 세팅하려면 엔터만 누르면 된다\n\n---\n\n## git flow finish\n\n릴리즈 브랜치를 피니쉬하기 전에, **_ 반드시 master 브랜치와 develop 브랜치들을 각각 pull 받아서 최신화해둬야한다!! _**\n\n```bash\n$ git flow release finish 20190313\n```\n\n위와 같이 하면 해당 릴리즈 브랜치가 피니쉬 되면서 master, develop 브랜치에 각각 머지된다.\n\nConflict만 수정해주면 머지 완료!\n만약 conflict를 수정하였다면, 혹시모르니 한번더 git flow finish 해주기!\n간단하다!\n\n---\n\n## git branch 제거\n\n```bash\n$ git branch -d <branchname>\n```\n","source":"_posts/TIL-2019-03-14.md","raw":"---\ntitle: TIL\ndate: 2019-03-14 12:00:19\ncategories:\n    - TIL\ntags:\n    - git\n    - git-flow\n---\n\n## git flow\n\n오늘 릴리즈 브랜치를 처음 피니쉬 해보았다.\n\n우선 git flow init 을 해줘야함\n\n```bash\n$ git flow init\n```\n\n하면, 여러 질문이 나오는데 기본 설정으로 세팅하려면 엔터만 누르면 된다\n\n---\n\n## git flow finish\n\n릴리즈 브랜치를 피니쉬하기 전에, **_ 반드시 master 브랜치와 develop 브랜치들을 각각 pull 받아서 최신화해둬야한다!! _**\n\n```bash\n$ git flow release finish 20190313\n```\n\n위와 같이 하면 해당 릴리즈 브랜치가 피니쉬 되면서 master, develop 브랜치에 각각 머지된다.\n\nConflict만 수정해주면 머지 완료!\n만약 conflict를 수정하였다면, 혹시모르니 한번더 git flow finish 해주기!\n간단하다!\n\n---\n\n## git branch 제거\n\n```bash\n$ git branch -d <branchname>\n```\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hql0022bqwxam6y0eiv","content":"<h2 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git flow\"></a>git flow</h2><p>오늘 릴리즈 브랜치를 처음 피니쉬 해보았다.</p>\n<p>우선 git flow init 을 해줘야함</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git flow init</span><br></pre></td></tr></table></figure>\n<p>하면, 여러 질문이 나오는데 기본 설정으로 세팅하려면 엔터만 누르면 된다</p>\n<hr>\n<h2 id=\"git-flow-finish\"><a href=\"#git-flow-finish\" class=\"headerlink\" title=\"git flow finish\"></a>git flow finish</h2><p>릴리즈 브랜치를 피니쉬하기 전에, <strong>_ 반드시 master 브랜치와 develop 브랜치들을 각각 pull 받아서 최신화해둬야한다!! _</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git flow release finish 20190313</span><br></pre></td></tr></table></figure>\n<p>위와 같이 하면 해당 릴리즈 브랜치가 피니쉬 되면서 master, develop 브랜치에 각각 머지된다.</p>\n<p>Conflict만 수정해주면 머지 완료!<br>만약 conflict를 수정하였다면, 혹시모르니 한번더 git flow finish 해주기!<br>간단하다!</p>\n<hr>\n<h2 id=\"git-branch-제거\"><a href=\"#git-branch-제거\" class=\"headerlink\" title=\"git branch 제거\"></a>git branch 제거</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git flow\"></a>git flow</h2><p>오늘 릴리즈 브랜치를 처음 피니쉬 해보았다.</p>\n<p>우선 git flow init 을 해줘야함</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git flow init</span><br></pre></td></tr></table></figure>\n<p>하면, 여러 질문이 나오는데 기본 설정으로 세팅하려면 엔터만 누르면 된다</p>\n<hr>\n<h2 id=\"git-flow-finish\"><a href=\"#git-flow-finish\" class=\"headerlink\" title=\"git flow finish\"></a>git flow finish</h2><p>릴리즈 브랜치를 피니쉬하기 전에, <strong>_ 반드시 master 브랜치와 develop 브랜치들을 각각 pull 받아서 최신화해둬야한다!! _</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git flow release finish 20190313</span><br></pre></td></tr></table></figure>\n<p>위와 같이 하면 해당 릴리즈 브랜치가 피니쉬 되면서 master, develop 브랜치에 각각 머지된다.</p>\n<p>Conflict만 수정해주면 머지 완료!<br>만약 conflict를 수정하였다면, 혹시모르니 한번더 git flow finish 해주기!<br>간단하다!</p>\n<hr>\n<h2 id=\"git-branch-제거\"><a href=\"#git-branch-제거\" class=\"headerlink\" title=\"git branch 제거\"></a>git branch 제거</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>"},{"title":"TIL","date":"2019-03-15T01:50:55.000Z","_content":"\n## git-flow\n\ngit flow feature start\n\ngit push upstream feature/~~\n\ngit push -u origin/~\n","source":"_posts/TIL-2019-03-15.md","raw":"---\ntitle: TIL\ndate: 2019-03-15 10:50:55\ncategories:\n    - TIL\ntags:\n    - git\n    - git-flow\n---\n\n## git-flow\n\ngit flow feature start\n\ngit push upstream feature/~~\n\ngit push -u origin/~\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqm0026bqwxdpq94d7i","content":"<h2 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git-flow\"></a>git-flow</h2><p>git flow feature start</p>\n<p>git push upstream feature/~~</p>\n<p>git push -u origin/~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-flow\"><a href=\"#git-flow\" class=\"headerlink\" title=\"git-flow\"></a>git-flow</h2><p>git flow feature start</p>\n<p>git push upstream feature/~~</p>\n<p>git push -u origin/~</p>\n"},{"title":"TIL","date":"2019-03-22T06:26:48.000Z","_content":"\n## Vue 인라인 스타일 바인딩\n잘 정리된 글이 있다. [참조](https://takeuu.tistory.com/27)\n\n","source":"_posts/TIL-2019-03-22.md","raw":"---\ntitle: TIL\ndate: 2019-03-22 15:26:48\ncategories:\n    - TIL\ntags:\n    - vue\n    - vue style binding\n---\n\n## Vue 인라인 스타일 바인딩\n잘 정리된 글이 있다. [참조](https://takeuu.tistory.com/27)\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqn002abqwx1gft996h","content":"<h2 id=\"Vue-인라인-스타일-바인딩\"><a href=\"#Vue-인라인-스타일-바인딩\" class=\"headerlink\" title=\"Vue 인라인 스타일 바인딩\"></a>Vue 인라인 스타일 바인딩</h2><p>잘 정리된 글이 있다. <a href=\"https://takeuu.tistory.com/27\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue-인라인-스타일-바인딩\"><a href=\"#Vue-인라인-스타일-바인딩\" class=\"headerlink\" title=\"Vue 인라인 스타일 바인딩\"></a>Vue 인라인 스타일 바인딩</h2><p>잘 정리된 글이 있다. <a href=\"https://takeuu.tistory.com/27\">참조</a></p>\n"},{"title":"TIL","date":"2019-03-25T08:03:28.000Z","_content":"\n## stash\n\n배포 담당 업무를 하면서, 릴리즈 브랜치에서 작업을 하다가, 배포가 나가야 할때, 내가 작업했던 미완료된 부분을 미포함 시키고 싶을때 사용하면 될것같다.\n내 작업을 stash 하고 태그따서 배포하고, 다시 돌아와서 작업하면 됨\n[git stash 참고](https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-Stashing)\n\n- git stash\n- git stash list\n- git stash apply\n - --index 옵션\n- git stash drop\n- git stash pop\n\n","source":"_posts/TIL-2019-03-25.md","raw":"---\ntitle: TIL\ndate: 2019-03-25 17:03:28\ncategories:\n    - TIL\ntags:\n    - git\n    - git stash\n---\n\n## stash\n\n배포 담당 업무를 하면서, 릴리즈 브랜치에서 작업을 하다가, 배포가 나가야 할때, 내가 작업했던 미완료된 부분을 미포함 시키고 싶을때 사용하면 될것같다.\n내 작업을 stash 하고 태그따서 배포하고, 다시 돌아와서 작업하면 됨\n[git stash 참고](https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-Stashing)\n\n- git stash\n- git stash list\n- git stash apply\n - --index 옵션\n- git stash drop\n- git stash pop\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqo002ebqwx0kbodtkw","content":"<h2 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h2><p>배포 담당 업무를 하면서, 릴리즈 브랜치에서 작업을 하다가, 배포가 나가야 할때, 내가 작업했던 미완료된 부분을 미포함 시키고 싶을때 사용하면 될것같다.<br>내 작업을 stash 하고 태그따서 배포하고, 다시 돌아와서 작업하면 됨<br><a href=\"https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-Stashing\">git stash 참고</a></p>\n<ul>\n<li>git stash</li>\n<li>git stash list</li>\n<li>git stash apply<ul>\n<li>–index 옵션</li>\n</ul>\n</li>\n<li>git stash drop</li>\n<li>git stash pop</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"stash\"><a href=\"#stash\" class=\"headerlink\" title=\"stash\"></a>stash</h2><p>배포 담당 업무를 하면서, 릴리즈 브랜치에서 작업을 하다가, 배포가 나가야 할때, 내가 작업했던 미완료된 부분을 미포함 시키고 싶을때 사용하면 될것같다.<br>내 작업을 stash 하고 태그따서 배포하고, 다시 돌아와서 작업하면 됨<br><a href=\"https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-Stashing\">git stash 참고</a></p>\n<ul>\n<li>git stash</li>\n<li>git stash list</li>\n<li>git stash apply<ul>\n<li>–index 옵션</li>\n</ul>\n</li>\n<li>git stash drop</li>\n<li>git stash pop</li>\n</ul>\n"},{"title":"TIL","date":"2019-03-26T05:33:44.000Z","_content":"\n## CR, LF, CRLF ?\n\n이 세개의 용어 차이가 궁금해서 찾아봤더니 좋은 글이 있었다. [참고](https://ohgyun.com/554)\n","source":"_posts/TIL-2019-03-26.md","raw":"---\ntitle: TIL\ndate: 2019-03-26 14:33:44\ncategories:\n    - TIL\ntags:\n    - CR\n    - LF\n    - CRLF\n---\n\n## CR, LF, CRLF ?\n\n이 세개의 용어 차이가 궁금해서 찾아봤더니 좋은 글이 있었다. [참고](https://ohgyun.com/554)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqp002ibqwxdrpghaje","content":"<h2 id=\"CR-LF-CRLF\"><a href=\"#CR-LF-CRLF\" class=\"headerlink\" title=\"CR, LF, CRLF ?\"></a>CR, LF, CRLF ?</h2><p>이 세개의 용어 차이가 궁금해서 찾아봤더니 좋은 글이 있었다. <a href=\"https://ohgyun.com/554\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CR-LF-CRLF\"><a href=\"#CR-LF-CRLF\" class=\"headerlink\" title=\"CR, LF, CRLF ?\"></a>CR, LF, CRLF ?</h2><p>이 세개의 용어 차이가 궁금해서 찾아봤더니 좋은 글이 있었다. <a href=\"https://ohgyun.com/554\">참고</a></p>\n"},{"title":"TIL","date":"2019-03-27T01:50:56.000Z","_content":"\n# 2019.03.27 Today I Learn!!\n\n오늘도 배울게 참 많다!!\n\n## 최신 브라우저에 대한 정리가 잘 된 글!\n\n두고두고 보자!\n\n1. [최신 브라우저의 내부 살펴보기 1 - CPU, GPU, 메모리 그리고 다중 프로세스 아키텍처](https://d2.naver.com/helloworld/2922312)\n    - CPU, GPU\n    - OS, 메모리\n    - 프로세스, 스레드\n2. [최신 브라우저의 내부 살펴보기 2 - 내비게이션 과정에서 일어나는 일](https://d2.naver.com/helloworld/9274593)\n\n    - 서비스 워커\n        - 렌더러 프로세스에서 실행됨\n    - 네비게이션 프리로드\n\n## 성능 측정 및 관리에 대한 잘 정리된 글!\n\n[참고](https://sunone22.tistory.com/6?category=695309)\n\n## Vue 최신 내용!\n\n[State of the Vuenion by the Creator of VueJS](https://youtu.be/XHsb_vJoaPk)\n","source":"_posts/TIL-2019-03-27.md","raw":"---\ntitle: TIL\ndate: 2019-03-27 10:50:56\ncategories:\n    - TIL\ntags:\n    - 브라우저\n---\n\n# 2019.03.27 Today I Learn!!\n\n오늘도 배울게 참 많다!!\n\n## 최신 브라우저에 대한 정리가 잘 된 글!\n\n두고두고 보자!\n\n1. [최신 브라우저의 내부 살펴보기 1 - CPU, GPU, 메모리 그리고 다중 프로세스 아키텍처](https://d2.naver.com/helloworld/2922312)\n    - CPU, GPU\n    - OS, 메모리\n    - 프로세스, 스레드\n2. [최신 브라우저의 내부 살펴보기 2 - 내비게이션 과정에서 일어나는 일](https://d2.naver.com/helloworld/9274593)\n\n    - 서비스 워커\n        - 렌더러 프로세스에서 실행됨\n    - 네비게이션 프리로드\n\n## 성능 측정 및 관리에 대한 잘 정리된 글!\n\n[참고](https://sunone22.tistory.com/6?category=695309)\n\n## Vue 최신 내용!\n\n[State of the Vuenion by the Creator of VueJS](https://youtu.be/XHsb_vJoaPk)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqq002lbqwx19921vkb","content":"<h1 id=\"2019-03-27-Today-I-Learn\"><a href=\"#2019-03-27-Today-I-Learn\" class=\"headerlink\" title=\"2019.03.27 Today I Learn!!\"></a>2019.03.27 Today I Learn!!</h1><p>오늘도 배울게 참 많다!!</p>\n<h2 id=\"최신-브라우저에-대한-정리가-잘-된-글\"><a href=\"#최신-브라우저에-대한-정리가-잘-된-글\" class=\"headerlink\" title=\"최신 브라우저에 대한 정리가 잘 된 글!\"></a>최신 브라우저에 대한 정리가 잘 된 글!</h2><p>두고두고 보자!</p>\n<ol>\n<li><a href=\"https://d2.naver.com/helloworld/2922312\">최신 브라우저의 내부 살펴보기 1 - CPU, GPU, 메모리 그리고 다중 프로세스 아키텍처</a><ul>\n<li>CPU, GPU</li>\n<li>OS, 메모리</li>\n<li>프로세스, 스레드</li>\n</ul>\n</li>\n<li><p><a href=\"https://d2.naver.com/helloworld/9274593\">최신 브라우저의 내부 살펴보기 2 - 내비게이션 과정에서 일어나는 일</a></p>\n<ul>\n<li>서비스 워커<ul>\n<li>렌더러 프로세스에서 실행됨</li>\n</ul>\n</li>\n<li>네비게이션 프리로드</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"성능-측정-및-관리에-대한-잘-정리된-글\"><a href=\"#성능-측정-및-관리에-대한-잘-정리된-글\" class=\"headerlink\" title=\"성능 측정 및 관리에 대한 잘 정리된 글!\"></a>성능 측정 및 관리에 대한 잘 정리된 글!</h2><p><a href=\"https://sunone22.tistory.com/6?category=695309\">참고</a></p>\n<h2 id=\"Vue-최신-내용\"><a href=\"#Vue-최신-내용\" class=\"headerlink\" title=\"Vue 최신 내용!\"></a>Vue 최신 내용!</h2><p><a href=\"https://youtu.be/XHsb_vJoaPk\">State of the Vuenion by the Creator of VueJS</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2019-03-27-Today-I-Learn\"><a href=\"#2019-03-27-Today-I-Learn\" class=\"headerlink\" title=\"2019.03.27 Today I Learn!!\"></a>2019.03.27 Today I Learn!!</h1><p>오늘도 배울게 참 많다!!</p>\n<h2 id=\"최신-브라우저에-대한-정리가-잘-된-글\"><a href=\"#최신-브라우저에-대한-정리가-잘-된-글\" class=\"headerlink\" title=\"최신 브라우저에 대한 정리가 잘 된 글!\"></a>최신 브라우저에 대한 정리가 잘 된 글!</h2><p>두고두고 보자!</p>\n<ol>\n<li><a href=\"https://d2.naver.com/helloworld/2922312\">최신 브라우저의 내부 살펴보기 1 - CPU, GPU, 메모리 그리고 다중 프로세스 아키텍처</a><ul>\n<li>CPU, GPU</li>\n<li>OS, 메모리</li>\n<li>프로세스, 스레드</li>\n</ul>\n</li>\n<li><p><a href=\"https://d2.naver.com/helloworld/9274593\">최신 브라우저의 내부 살펴보기 2 - 내비게이션 과정에서 일어나는 일</a></p>\n<ul>\n<li>서비스 워커<ul>\n<li>렌더러 프로세스에서 실행됨</li>\n</ul>\n</li>\n<li>네비게이션 프리로드</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"성능-측정-및-관리에-대한-잘-정리된-글\"><a href=\"#성능-측정-및-관리에-대한-잘-정리된-글\" class=\"headerlink\" title=\"성능 측정 및 관리에 대한 잘 정리된 글!\"></a>성능 측정 및 관리에 대한 잘 정리된 글!</h2><p><a href=\"https://sunone22.tistory.com/6?category=695309\">참고</a></p>\n<h2 id=\"Vue-최신-내용\"><a href=\"#Vue-최신-내용\" class=\"headerlink\" title=\"Vue 최신 내용!\"></a>Vue 최신 내용!</h2><p><a href=\"https://youtu.be/XHsb_vJoaPk\">State of the Vuenion by the Creator of VueJS</a></p>\n"},{"title":"2019.04.01 Today I Learn!!","date":"2019-04-01T05:57:48.000Z","_content":"\n## HTTP 2.0\n\n잘 정리된 글을 공유 받았다.\n[HTTP/2 왜 지금 적용해야 하는가?](https://hackya.com/kr/http2-%EC%99%9C-%EC%A7%80%EA%B8%88-%EC%A0%81%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80/)\n","source":"_posts/TIL-2019-04-01.md","raw":"---\ntitle: 2019.04.01 Today I Learn!!\ndate: 2019-04-01 14:57:48\ncategories:\n    - TIL\ntags:\n    - HTTP\n    - HTTP/2\n---\n\n## HTTP 2.0\n\n잘 정리된 글을 공유 받았다.\n[HTTP/2 왜 지금 적용해야 하는가?](https://hackya.com/kr/http2-%EC%99%9C-%EC%A7%80%EA%B8%88-%EC%A0%81%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80/)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqr002pbqwxh6x6d2x3","content":"<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h2><p>잘 정리된 글을 공유 받았다.<br><a href=\"https://hackya.com/kr/http2-%EC%99%9C-%EC%A7%80%EA%B8%88-%EC%A0%81%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80/\">HTTP/2 왜 지금 적용해야 하는가?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h2><p>잘 정리된 글을 공유 받았다.<br><a href=\"https://hackya.com/kr/http2-%EC%99%9C-%EC%A7%80%EA%B8%88-%EC%A0%81%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%98%EB%8A%94%EA%B0%80/\">HTTP/2 왜 지금 적용해야 하는가?</a></p>\n"},{"title":"2019.04.02 Today I Learn!!","date":"2019-04-02T01:15:17.000Z","_content":"\n## git stash pop\n\n```bash\ngit stash pop\n```\n\ngit stash apply를 해도 되지만, pop을 하는게 상황에 따라서는 더 편한듯!\n\n---\n\n## git reset --hard HEAD^\n\ngit commit 취소를 해보면서 [잘정리된 블로그](https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html)를 보며 참조했다.\n\n나는 `git reset --hard HEAD^`를 사용했는데,\n바로 이전 커밋으로 강제로 되돌리고, 해당 파일들은 unstaged 상태가 되고, 워킹 디렉토리에서 삭제됨..\n매우 위험한 명령어였다..\n\n작업하다가 브랜치를 이동할땐 항상 잘 생각해서 stash나 커밋을 남기자!\n","source":"_posts/TIL-2019-04-02.md","raw":"---\ntitle: 2019.04.02 Today I Learn!!\ndate: 2019-04-02 10:15:17\ncategories:\n    - TIL\ntags:\n    - git\n    - stash\n    - reset\n---\n\n## git stash pop\n\n```bash\ngit stash pop\n```\n\ngit stash apply를 해도 되지만, pop을 하는게 상황에 따라서는 더 편한듯!\n\n---\n\n## git reset --hard HEAD^\n\ngit commit 취소를 해보면서 [잘정리된 블로그](https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html)를 보며 참조했다.\n\n나는 `git reset --hard HEAD^`를 사용했는데,\n바로 이전 커밋으로 강제로 되돌리고, 해당 파일들은 unstaged 상태가 되고, 워킹 디렉토리에서 삭제됨..\n매우 위험한 명령어였다..\n\n작업하다가 브랜치를 이동할땐 항상 잘 생각해서 stash나 커밋을 남기자!\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqs002tbqwxbikg17qm","content":"<h2 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"git stash pop\"></a>git stash pop</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<p>git stash apply를 해도 되지만, pop을 하는게 상황에 따라서는 더 편한듯!</p>\n<hr>\n<h2 id=\"git-reset-–hard-HEAD\"><a href=\"#git-reset-–hard-HEAD\" class=\"headerlink\" title=\"git reset –hard HEAD^\"></a>git reset –hard HEAD^</h2><p>git commit 취소를 해보면서 <a href=\"https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html\">잘정리된 블로그</a>를 보며 참조했다.</p>\n<p>나는 <code>git reset --hard HEAD^</code>를 사용했는데,<br>바로 이전 커밋으로 강제로 되돌리고, 해당 파일들은 unstaged 상태가 되고, 워킹 디렉토리에서 삭제됨..<br>매우 위험한 명령어였다..</p>\n<p>작업하다가 브랜치를 이동할땐 항상 잘 생각해서 stash나 커밋을 남기자!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"git stash pop\"></a>git stash pop</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<p>git stash apply를 해도 되지만, pop을 하는게 상황에 따라서는 더 편한듯!</p>\n<hr>\n<h2 id=\"git-reset-–hard-HEAD\"><a href=\"#git-reset-–hard-HEAD\" class=\"headerlink\" title=\"git reset –hard HEAD^\"></a>git reset –hard HEAD^</h2><p>git commit 취소를 해보면서 <a href=\"https://gmlwjd9405.github.io/2018/05/25/git-add-cancle.html\">잘정리된 블로그</a>를 보며 참조했다.</p>\n<p>나는 <code>git reset --hard HEAD^</code>를 사용했는데,<br>바로 이전 커밋으로 강제로 되돌리고, 해당 파일들은 unstaged 상태가 되고, 워킹 디렉토리에서 삭제됨..<br>매우 위험한 명령어였다..</p>\n<p>작업하다가 브랜치를 이동할땐 항상 잘 생각해서 stash나 커밋을 남기자!</p>\n"},{"title":"TIL","date":"2019-04-03T01:28:43.000Z","_content":"\n## GatsbyJS?\n\n[GatsbyJS](https://www.gatsbyjs.org/)\nmedium의 [Why you should use GatsbyJS to build static sites](https://medium.freecodecamp.org/why-you-should-use-gatsbyjs-to-build-static-sites-4f90eb6d1a7b)라는 post에서는 Gatsby를 이렇게 말한다.\n\n`Gatsby can be used to build static sites that are Progressive Web Apps, follow the latest web standards, and are optimized to be highly performant. It makes use of the latest and popular technologies including ReactJS, Webpack, GraphQL, modern ES6+ JavaScript and CSS.`\n","source":"_posts/TIL-2019-04-03.md","raw":"---\ntitle: TIL\ndate: 2019-04-03 10:28:43\ncategories:\n    - TIL\ntags:\n    - GatsbyJS\n---\n\n## GatsbyJS?\n\n[GatsbyJS](https://www.gatsbyjs.org/)\nmedium의 [Why you should use GatsbyJS to build static sites](https://medium.freecodecamp.org/why-you-should-use-gatsbyjs-to-build-static-sites-4f90eb6d1a7b)라는 post에서는 Gatsby를 이렇게 말한다.\n\n`Gatsby can be used to build static sites that are Progressive Web Apps, follow the latest web standards, and are optimized to be highly performant. It makes use of the latest and popular technologies including ReactJS, Webpack, GraphQL, modern ES6+ JavaScript and CSS.`\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqt002xbqwxbd7ngym2","content":"<h2 id=\"GatsbyJS\"><a href=\"#GatsbyJS\" class=\"headerlink\" title=\"GatsbyJS?\"></a>GatsbyJS?</h2><p><a href=\"https://www.gatsbyjs.org/\">GatsbyJS</a><br>medium의 <a href=\"https://medium.freecodecamp.org/why-you-should-use-gatsbyjs-to-build-static-sites-4f90eb6d1a7b\">Why you should use GatsbyJS to build static sites</a>라는 post에서는 Gatsby를 이렇게 말한다.</p>\n<p><code>Gatsby can be used to build static sites that are Progressive Web Apps, follow the latest web standards, and are optimized to be highly performant. It makes use of the latest and popular technologies including ReactJS, Webpack, GraphQL, modern ES6+ JavaScript and CSS.</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GatsbyJS\"><a href=\"#GatsbyJS\" class=\"headerlink\" title=\"GatsbyJS?\"></a>GatsbyJS?</h2><p><a href=\"https://www.gatsbyjs.org/\">GatsbyJS</a><br>medium의 <a href=\"https://medium.freecodecamp.org/why-you-should-use-gatsbyjs-to-build-static-sites-4f90eb6d1a7b\">Why you should use GatsbyJS to build static sites</a>라는 post에서는 Gatsby를 이렇게 말한다.</p>\n<p><code>Gatsby can be used to build static sites that are Progressive Web Apps, follow the latest web standards, and are optimized to be highly performant. It makes use of the latest and popular technologies including ReactJS, Webpack, GraphQL, modern ES6+ JavaScript and CSS.</code></p>\n"},{"title":"TIL","date":"2019-04-16T05:42:20.000Z","_content":"\n# Front-end Developer Handbook\n\n[Front-end Developer Handbook](https://frontendmasters.com/books/front-end-handbook/2019/)\n","source":"_posts/TIL-2019-04-16.md","raw":"---\ntitle: TIL\ndate: 2019-04-16 14:42:20\ncategories:\n    - TIL\ntags:\n---\n\n# Front-end Developer Handbook\n\n[Front-end Developer Handbook](https://frontendmasters.com/books/front-end-handbook/2019/)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqv0031bqwx2snq4aij","content":"<h1 id=\"Front-end-Developer-Handbook\"><a href=\"#Front-end-Developer-Handbook\" class=\"headerlink\" title=\"Front-end Developer Handbook\"></a>Front-end Developer Handbook</h1><p><a href=\"https://frontendmasters.com/books/front-end-handbook/2019/\">Front-end Developer Handbook</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Front-end-Developer-Handbook\"><a href=\"#Front-end-Developer-Handbook\" class=\"headerlink\" title=\"Front-end Developer Handbook\"></a>Front-end Developer Handbook</h1><p><a href=\"https://frontendmasters.com/books/front-end-handbook/2019/\">Front-end Developer Handbook</a></p>\n"},{"title":"TIL","date":"2019-04-05T01:39:55.000Z","_content":"\n## 테스트 주도 개발에 대한 괜찮은 글을 공유 받았다\n\n[[번역]쉬운 테스트 주도 개발과 단위 테스트를 위한 5단계 방법론](https://medium.com/@cmygray/%EB%B2%88%EC%97%AD-%EC%89%AC%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-5%EB%8B%A8%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0-b82fea6c8d90)\n\n-   Red-Green-Refactor\n-   5단계\n    1. 입력과 출력 결정하기\n    2. 함수 시그니처 선택하기\n    3. 기능상 아주 작은 하나의 관점으로 판단하기\n        - 작은 것에 집중해보기\n    4. 테스트 구현\n        - 함수 구현이 아닌, 어떻게 호출되어야하고, 어떤 결과가 발생해야 하는지에 집중!\n    5. 코드 구현\n        - 테스트를 통과할 수 있는 최소한의 코드 추가\n\n## Typescript\n\n이번에 팀에서 `TypeScript Quick Start` 라는 책으로 스터디를 진행할 예정이다.\n스터디에 앞서 [타입스크립트](https://www.typescriptlang.org/)에 대해 살펴보았다.\n\n최신 버전은 typescript 3.4버전인데, 이 책에선 2.7.2 버전을 다루더라. 그래서 3.0 이상 버전에서는 뭐가 달라졌을지 궁금해졌다.\n[TypeScript 3.0 — what has come?](https://itnext.io/typescript-3-0-what-has-come-19f81d1fac60)\n예전 글이지만, 읽고 대략적으로 파악만 해보자\n\n## 캐시가 동작하는 원리\n\n[캐시가 동작하는 아주 구체적인 원리](https://parksb.github.io/article/29.html?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)\n","source":"_posts/TIL-2019-04-05.md","raw":"---\ntitle: TIL\ndate: 2019-04-05 10:39:55\ncategories:\n    - TIL\ntags:\n    - TDD\n    - Typescript\n    - cache\n---\n\n## 테스트 주도 개발에 대한 괜찮은 글을 공유 받았다\n\n[[번역]쉬운 테스트 주도 개발과 단위 테스트를 위한 5단계 방법론](https://medium.com/@cmygray/%EB%B2%88%EC%97%AD-%EC%89%AC%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-5%EB%8B%A8%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0-b82fea6c8d90)\n\n-   Red-Green-Refactor\n-   5단계\n    1. 입력과 출력 결정하기\n    2. 함수 시그니처 선택하기\n    3. 기능상 아주 작은 하나의 관점으로 판단하기\n        - 작은 것에 집중해보기\n    4. 테스트 구현\n        - 함수 구현이 아닌, 어떻게 호출되어야하고, 어떤 결과가 발생해야 하는지에 집중!\n    5. 코드 구현\n        - 테스트를 통과할 수 있는 최소한의 코드 추가\n\n## Typescript\n\n이번에 팀에서 `TypeScript Quick Start` 라는 책으로 스터디를 진행할 예정이다.\n스터디에 앞서 [타입스크립트](https://www.typescriptlang.org/)에 대해 살펴보았다.\n\n최신 버전은 typescript 3.4버전인데, 이 책에선 2.7.2 버전을 다루더라. 그래서 3.0 이상 버전에서는 뭐가 달라졌을지 궁금해졌다.\n[TypeScript 3.0 — what has come?](https://itnext.io/typescript-3-0-what-has-come-19f81d1fac60)\n예전 글이지만, 읽고 대략적으로 파악만 해보자\n\n## 캐시가 동작하는 원리\n\n[캐시가 동작하는 아주 구체적인 원리](https://parksb.github.io/article/29.html?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqw0035bqwx9iznc63q","content":"<h2 id=\"테스트-주도-개발에-대한-괜찮은-글을-공유-받았다\"><a href=\"#테스트-주도-개발에-대한-괜찮은-글을-공유-받았다\" class=\"headerlink\" title=\"테스트 주도 개발에 대한 괜찮은 글을 공유 받았다\"></a>테스트 주도 개발에 대한 괜찮은 글을 공유 받았다</h2><p><a href=\"https://medium.com/@cmygray/%EB%B2%88%EC%97%AD-%EC%89%AC%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-5%EB%8B%A8%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0-b82fea6c8d90\">[번역]쉬운 테스트 주도 개발과 단위 테스트를 위한 5단계 방법론</a></p>\n<ul>\n<li>Red-Green-Refactor</li>\n<li>5단계<ol>\n<li>입력과 출력 결정하기</li>\n<li>함수 시그니처 선택하기</li>\n<li>기능상 아주 작은 하나의 관점으로 판단하기<ul>\n<li>작은 것에 집중해보기</li>\n</ul>\n</li>\n<li>테스트 구현<ul>\n<li>함수 구현이 아닌, 어떻게 호출되어야하고, 어떤 결과가 발생해야 하는지에 집중!</li>\n</ul>\n</li>\n<li>코드 구현<ul>\n<li>테스트를 통과할 수 있는 최소한의 코드 추가</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h2><p>이번에 팀에서 <code>TypeScript Quick Start</code> 라는 책으로 스터디를 진행할 예정이다.<br>스터디에 앞서 <a href=\"https://www.typescriptlang.org/\">타입스크립트</a>에 대해 살펴보았다.</p>\n<p>최신 버전은 typescript 3.4버전인데, 이 책에선 2.7.2 버전을 다루더라. 그래서 3.0 이상 버전에서는 뭐가 달라졌을지 궁금해졌다.<br><a href=\"https://itnext.io/typescript-3-0-what-has-come-19f81d1fac60\">TypeScript 3.0 — what has come?</a><br>예전 글이지만, 읽고 대략적으로 파악만 해보자</p>\n<h2 id=\"캐시가-동작하는-원리\"><a href=\"#캐시가-동작하는-원리\" class=\"headerlink\" title=\"캐시가 동작하는 원리\"></a>캐시가 동작하는 원리</h2><p><a href=\"https://parksb.github.io/article/29.html?utm_source=gaerae.com&amp;utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&amp;utm_medium=social\">캐시가 동작하는 아주 구체적인 원리</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"테스트-주도-개발에-대한-괜찮은-글을-공유-받았다\"><a href=\"#테스트-주도-개발에-대한-괜찮은-글을-공유-받았다\" class=\"headerlink\" title=\"테스트 주도 개발에 대한 괜찮은 글을 공유 받았다\"></a>테스트 주도 개발에 대한 괜찮은 글을 공유 받았다</h2><p><a href=\"https://medium.com/@cmygray/%EB%B2%88%EC%97%AD-%EC%89%AC%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-5%EB%8B%A8%EA%B3%84-%EB%B0%A9%EB%B2%95%EB%A1%A0-b82fea6c8d90\">[번역]쉬운 테스트 주도 개발과 단위 테스트를 위한 5단계 방법론</a></p>\n<ul>\n<li>Red-Green-Refactor</li>\n<li>5단계<ol>\n<li>입력과 출력 결정하기</li>\n<li>함수 시그니처 선택하기</li>\n<li>기능상 아주 작은 하나의 관점으로 판단하기<ul>\n<li>작은 것에 집중해보기</li>\n</ul>\n</li>\n<li>테스트 구현<ul>\n<li>함수 구현이 아닌, 어떻게 호출되어야하고, 어떤 결과가 발생해야 하는지에 집중!</li>\n</ul>\n</li>\n<li>코드 구현<ul>\n<li>테스트를 통과할 수 있는 최소한의 코드 추가</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Typescript\"><a href=\"#Typescript\" class=\"headerlink\" title=\"Typescript\"></a>Typescript</h2><p>이번에 팀에서 <code>TypeScript Quick Start</code> 라는 책으로 스터디를 진행할 예정이다.<br>스터디에 앞서 <a href=\"https://www.typescriptlang.org/\">타입스크립트</a>에 대해 살펴보았다.</p>\n<p>최신 버전은 typescript 3.4버전인데, 이 책에선 2.7.2 버전을 다루더라. 그래서 3.0 이상 버전에서는 뭐가 달라졌을지 궁금해졌다.<br><a href=\"https://itnext.io/typescript-3-0-what-has-come-19f81d1fac60\">TypeScript 3.0 — what has come?</a><br>예전 글이지만, 읽고 대략적으로 파악만 해보자</p>\n<h2 id=\"캐시가-동작하는-원리\"><a href=\"#캐시가-동작하는-원리\" class=\"headerlink\" title=\"캐시가 동작하는 원리\"></a>캐시가 동작하는 원리</h2><p><a href=\"https://parksb.github.io/article/29.html?utm_source=gaerae.com&amp;utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&amp;utm_medium=social\">캐시가 동작하는 아주 구체적인 원리</a></p>\n"},{"title":"TIL","date":"2019-04-18T12:37:37.000Z","_content":"\n## 스트링에서 숫자 추출하기\n\n```javascript\nfunction extractNumberFromString(number) {\n    return number.replace(/[^0-9]/g, '');\n}\n```\n\n## javascript 소수점 변환 정리\n\n-   `Math.ceil()` : 소수점 올림, 정수 반환\n-   `Math.fllor()` : 소수점 버림, 정수 반환\n-   `Math.round()` : 소수점 반올림, 정수 반환\n","source":"_posts/TIL-2019-04-18.md","raw":"---\ntitle: TIL\ndate: 2019-04-18 21:37:37\ncategories:\n    - TIL\ntags:\n    - javascript\n    - 정규표현식\n---\n\n## 스트링에서 숫자 추출하기\n\n```javascript\nfunction extractNumberFromString(number) {\n    return number.replace(/[^0-9]/g, '');\n}\n```\n\n## javascript 소수점 변환 정리\n\n-   `Math.ceil()` : 소수점 올림, 정수 반환\n-   `Math.fllor()` : 소수점 버림, 정수 반환\n-   `Math.round()` : 소수점 반올림, 정수 반환\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqx0039bqwx0jk67q80","content":"<h2 id=\"스트링에서-숫자-추출하기\"><a href=\"#스트링에서-숫자-추출하기\" class=\"headerlink\" title=\"스트링에서 숫자 추출하기\"></a>스트링에서 숫자 추출하기</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extractNumberFromString</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number.replace(<span class=\"regexp\">/[^0-9]/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-소수점-변환-정리\"><a href=\"#javascript-소수점-변환-정리\" class=\"headerlink\" title=\"javascript 소수점 변환 정리\"></a>javascript 소수점 변환 정리</h2><ul>\n<li><code>Math.ceil()</code> : 소수점 올림, 정수 반환</li>\n<li><code>Math.fllor()</code> : 소수점 버림, 정수 반환</li>\n<li><code>Math.round()</code> : 소수점 반올림, 정수 반환</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"스트링에서-숫자-추출하기\"><a href=\"#스트링에서-숫자-추출하기\" class=\"headerlink\" title=\"스트링에서 숫자 추출하기\"></a>스트링에서 숫자 추출하기</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">extractNumberFromString</span>(<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number.replace(<span class=\"regexp\">/[^0-9]/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"javascript-소수점-변환-정리\"><a href=\"#javascript-소수점-변환-정리\" class=\"headerlink\" title=\"javascript 소수점 변환 정리\"></a>javascript 소수점 변환 정리</h2><ul>\n<li><code>Math.ceil()</code> : 소수점 올림, 정수 반환</li>\n<li><code>Math.fllor()</code> : 소수점 버림, 정수 반환</li>\n<li><code>Math.round()</code> : 소수점 반올림, 정수 반환</li>\n</ul>\n"},{"title":"TIL","date":"2019-04-22T00:50:03.000Z","_content":"\n## Growth Hacking\n\n[그로스 해킹](http://bridge.500startups.co.kr/%EA%B7%B8%EB%A1%9C%EC%8A%A4%ED%95%B4%ED%82%B9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%B6%81-%EC%8B%A4%EC%A0%84%ED%8E%B81/)\n\n## overflow\n\n[css - overflow](https://developer.mozilla.org/ko/docs/Web/CSS/overflow)\n","source":"_posts/TIL-2019-04-22.md","raw":"---\ntitle: TIL\ndate: 2019-04-22 09:50:03\ncategories:\n    - TIL\ntags:\n---\n\n## Growth Hacking\n\n[그로스 해킹](http://bridge.500startups.co.kr/%EA%B7%B8%EB%A1%9C%EC%8A%A4%ED%95%B4%ED%82%B9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%B6%81-%EC%8B%A4%EC%A0%84%ED%8E%B81/)\n\n## overflow\n\n[css - overflow](https://developer.mozilla.org/ko/docs/Web/CSS/overflow)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqx003cbqwx8hp3du06","content":"<h2 id=\"Growth-Hacking\"><a href=\"#Growth-Hacking\" class=\"headerlink\" title=\"Growth Hacking\"></a>Growth Hacking</h2><p><a href=\"http://bridge.500startups.co.kr/%EA%B7%B8%EB%A1%9C%EC%8A%A4%ED%95%B4%ED%82%B9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%B6%81-%EC%8B%A4%EC%A0%84%ED%8E%B81/\">그로스 해킹</a></p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/overflow\">css - overflow</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Growth-Hacking\"><a href=\"#Growth-Hacking\" class=\"headerlink\" title=\"Growth Hacking\"></a>Growth Hacking</h2><p><a href=\"http://bridge.500startups.co.kr/%EA%B7%B8%EB%A1%9C%EC%8A%A4%ED%95%B4%ED%82%B9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%B6%81-%EC%8B%A4%EC%A0%84%ED%8E%B81/\">그로스 해킹</a></p>\n<h2 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/overflow\">css - overflow</a></p>\n"},{"title":"TIL","date":"2019-04-23T18:49:24.000Z","_content":"\n## VOC 회고\n\n이번에 동영상 리사이징 VOC를 진행하면서 개인적으로 많이 스트레스를 받았던 것 같다.\n\n여러 이유가 있었겠지만, 급하게 개발하다보니 영향도 및 기존 히스토리 파악이 되지 않은 상태에서 작업을 시작했던게 첫번쨰 문제인 것 같다.\n\n이렇게 완벽하게 파악하지 못하고 개발하다보니, 이슈가 나오는대로 이곳 저곳 땜빵식 코딩을 했고, 기능이 하나로 통합되지 못한단 느낌을 개발하면서 받았다.\n\n당연히 이곳저곳에 파편화 되어 작업하다보니 뭘 작업했는지 기억하기도 어렵고, 수정도 어려웠으며 영향도 파악이 안되다보니 사이드 이슈가 계속 발생했다..\n\n배포 날까지 이슈가 계속 나올정도였으니.. 개인적으로도 많이 힘들고, 팀에게도 미안하고 창피했던 일주일이었다.\n\n### 고칠점\n\n이번 경험을 통해 배운점, 고칠점을 적어보며 다시는 이런 땜빵식 개발을 하지 않도록 해야겠다.\n\n-   최대한 적극적으로 영향도 및 히스토리를 파악하자.\n    -   이번 경험을 통해 내 행동의 책임감의 무게를 좀 알게 된 것 같다. 생각없이 순간 순간의 이슈를 해결하기 위해서 땜빵식으로 개발하다보면 이게 쌓여서 나중에 더 큰 위험으로 내게 돌아오는 것 같다. 처음부터 책임감을 가지고 적극적으로 개발 범위, 영향도, 히스토리 파악, 소스파악 등을 하자!\n-   이슈를 해결했으면, 그에 대한 영향도 파악을 제대로 진행하자..\n    -   사이드 이슈 발생은 절대로 있으면 안됨.. 기존 개발했던 내용 파악이 잘 정리되어있어야 영향도 파악이 더 쉬울것 같다! 잘 정리하자.\n-   너무 스트레스 받고 압박 받지 말자.\n    -   일이 딱딱 진행되지 않으면 너무 스스로 압박을 느껴 스트레스를 받는것 같다.. 그럴때 일수록 침착하고 _숲을 보려고_ 노력하자! 하나하나 해결하면 된다!\n-   정신 차리자\n    -   정신 차리라는 말 듣기 싫지만, 하시는 분들도 답답하니까 하는것 같다,, 긍정적으로 받아들이고 열심히하자!\n","source":"_posts/TIL-2019-04-24.md","raw":"---\ntitle: TIL\ndate: 2019-04-24 03:49:24\ncategories:\n    - TIL\ntags:\n    - 회고\n---\n\n## VOC 회고\n\n이번에 동영상 리사이징 VOC를 진행하면서 개인적으로 많이 스트레스를 받았던 것 같다.\n\n여러 이유가 있었겠지만, 급하게 개발하다보니 영향도 및 기존 히스토리 파악이 되지 않은 상태에서 작업을 시작했던게 첫번쨰 문제인 것 같다.\n\n이렇게 완벽하게 파악하지 못하고 개발하다보니, 이슈가 나오는대로 이곳 저곳 땜빵식 코딩을 했고, 기능이 하나로 통합되지 못한단 느낌을 개발하면서 받았다.\n\n당연히 이곳저곳에 파편화 되어 작업하다보니 뭘 작업했는지 기억하기도 어렵고, 수정도 어려웠으며 영향도 파악이 안되다보니 사이드 이슈가 계속 발생했다..\n\n배포 날까지 이슈가 계속 나올정도였으니.. 개인적으로도 많이 힘들고, 팀에게도 미안하고 창피했던 일주일이었다.\n\n### 고칠점\n\n이번 경험을 통해 배운점, 고칠점을 적어보며 다시는 이런 땜빵식 개발을 하지 않도록 해야겠다.\n\n-   최대한 적극적으로 영향도 및 히스토리를 파악하자.\n    -   이번 경험을 통해 내 행동의 책임감의 무게를 좀 알게 된 것 같다. 생각없이 순간 순간의 이슈를 해결하기 위해서 땜빵식으로 개발하다보면 이게 쌓여서 나중에 더 큰 위험으로 내게 돌아오는 것 같다. 처음부터 책임감을 가지고 적극적으로 개발 범위, 영향도, 히스토리 파악, 소스파악 등을 하자!\n-   이슈를 해결했으면, 그에 대한 영향도 파악을 제대로 진행하자..\n    -   사이드 이슈 발생은 절대로 있으면 안됨.. 기존 개발했던 내용 파악이 잘 정리되어있어야 영향도 파악이 더 쉬울것 같다! 잘 정리하자.\n-   너무 스트레스 받고 압박 받지 말자.\n    -   일이 딱딱 진행되지 않으면 너무 스스로 압박을 느껴 스트레스를 받는것 같다.. 그럴때 일수록 침착하고 _숲을 보려고_ 노력하자! 하나하나 해결하면 된다!\n-   정신 차리자\n    -   정신 차리라는 말 듣기 싫지만, 하시는 분들도 답답하니까 하는것 같다,, 긍정적으로 받아들이고 열심히하자!\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqy003gbqwx99mceam9","content":"<h2 id=\"VOC-회고\"><a href=\"#VOC-회고\" class=\"headerlink\" title=\"VOC 회고\"></a>VOC 회고</h2><p>이번에 동영상 리사이징 VOC를 진행하면서 개인적으로 많이 스트레스를 받았던 것 같다.</p>\n<p>여러 이유가 있었겠지만, 급하게 개발하다보니 영향도 및 기존 히스토리 파악이 되지 않은 상태에서 작업을 시작했던게 첫번쨰 문제인 것 같다.</p>\n<p>이렇게 완벽하게 파악하지 못하고 개발하다보니, 이슈가 나오는대로 이곳 저곳 땜빵식 코딩을 했고, 기능이 하나로 통합되지 못한단 느낌을 개발하면서 받았다.</p>\n<p>당연히 이곳저곳에 파편화 되어 작업하다보니 뭘 작업했는지 기억하기도 어렵고, 수정도 어려웠으며 영향도 파악이 안되다보니 사이드 이슈가 계속 발생했다..</p>\n<p>배포 날까지 이슈가 계속 나올정도였으니.. 개인적으로도 많이 힘들고, 팀에게도 미안하고 창피했던 일주일이었다.</p>\n<h3 id=\"고칠점\"><a href=\"#고칠점\" class=\"headerlink\" title=\"고칠점\"></a>고칠점</h3><p>이번 경험을 통해 배운점, 고칠점을 적어보며 다시는 이런 땜빵식 개발을 하지 않도록 해야겠다.</p>\n<ul>\n<li>최대한 적극적으로 영향도 및 히스토리를 파악하자.<ul>\n<li>이번 경험을 통해 내 행동의 책임감의 무게를 좀 알게 된 것 같다. 생각없이 순간 순간의 이슈를 해결하기 위해서 땜빵식으로 개발하다보면 이게 쌓여서 나중에 더 큰 위험으로 내게 돌아오는 것 같다. 처음부터 책임감을 가지고 적극적으로 개발 범위, 영향도, 히스토리 파악, 소스파악 등을 하자!</li>\n</ul>\n</li>\n<li>이슈를 해결했으면, 그에 대한 영향도 파악을 제대로 진행하자..<ul>\n<li>사이드 이슈 발생은 절대로 있으면 안됨.. 기존 개발했던 내용 파악이 잘 정리되어있어야 영향도 파악이 더 쉬울것 같다! 잘 정리하자.</li>\n</ul>\n</li>\n<li>너무 스트레스 받고 압박 받지 말자.<ul>\n<li>일이 딱딱 진행되지 않으면 너무 스스로 압박을 느껴 스트레스를 받는것 같다.. 그럴때 일수록 침착하고 <em>숲을 보려고</em> 노력하자! 하나하나 해결하면 된다!</li>\n</ul>\n</li>\n<li>정신 차리자<ul>\n<li>정신 차리라는 말 듣기 싫지만, 하시는 분들도 답답하니까 하는것 같다,, 긍정적으로 받아들이고 열심히하자!</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"VOC-회고\"><a href=\"#VOC-회고\" class=\"headerlink\" title=\"VOC 회고\"></a>VOC 회고</h2><p>이번에 동영상 리사이징 VOC를 진행하면서 개인적으로 많이 스트레스를 받았던 것 같다.</p>\n<p>여러 이유가 있었겠지만, 급하게 개발하다보니 영향도 및 기존 히스토리 파악이 되지 않은 상태에서 작업을 시작했던게 첫번쨰 문제인 것 같다.</p>\n<p>이렇게 완벽하게 파악하지 못하고 개발하다보니, 이슈가 나오는대로 이곳 저곳 땜빵식 코딩을 했고, 기능이 하나로 통합되지 못한단 느낌을 개발하면서 받았다.</p>\n<p>당연히 이곳저곳에 파편화 되어 작업하다보니 뭘 작업했는지 기억하기도 어렵고, 수정도 어려웠으며 영향도 파악이 안되다보니 사이드 이슈가 계속 발생했다..</p>\n<p>배포 날까지 이슈가 계속 나올정도였으니.. 개인적으로도 많이 힘들고, 팀에게도 미안하고 창피했던 일주일이었다.</p>\n<h3 id=\"고칠점\"><a href=\"#고칠점\" class=\"headerlink\" title=\"고칠점\"></a>고칠점</h3><p>이번 경험을 통해 배운점, 고칠점을 적어보며 다시는 이런 땜빵식 개발을 하지 않도록 해야겠다.</p>\n<ul>\n<li>최대한 적극적으로 영향도 및 히스토리를 파악하자.<ul>\n<li>이번 경험을 통해 내 행동의 책임감의 무게를 좀 알게 된 것 같다. 생각없이 순간 순간의 이슈를 해결하기 위해서 땜빵식으로 개발하다보면 이게 쌓여서 나중에 더 큰 위험으로 내게 돌아오는 것 같다. 처음부터 책임감을 가지고 적극적으로 개발 범위, 영향도, 히스토리 파악, 소스파악 등을 하자!</li>\n</ul>\n</li>\n<li>이슈를 해결했으면, 그에 대한 영향도 파악을 제대로 진행하자..<ul>\n<li>사이드 이슈 발생은 절대로 있으면 안됨.. 기존 개발했던 내용 파악이 잘 정리되어있어야 영향도 파악이 더 쉬울것 같다! 잘 정리하자.</li>\n</ul>\n</li>\n<li>너무 스트레스 받고 압박 받지 말자.<ul>\n<li>일이 딱딱 진행되지 않으면 너무 스스로 압박을 느껴 스트레스를 받는것 같다.. 그럴때 일수록 침착하고 <em>숲을 보려고</em> 노력하자! 하나하나 해결하면 된다!</li>\n</ul>\n</li>\n<li>정신 차리자<ul>\n<li>정신 차리라는 말 듣기 싫지만, 하시는 분들도 답답하니까 하는것 같다,, 긍정적으로 받아들이고 열심히하자!</li>\n</ul>\n</li>\n</ul>\n"},{"title":"TIL","date":"2019-05-03T05:38:14.000Z","_content":"\n## Github 블로그에 댓글 붙이기\n\nhexo 기반으로 만든 블로그에 disqus를 사용하여 댓글을 연동해보자.\n\n[매우 잘정리된 글](https://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/)이 있어 참고했다.\n\n### \"We were unable to load Disqus\"\n\n\\_config.yml 파일에 disqus_shortname을 등록 후에 deploy하고 확인해보니 위와 같은 메시지가 나왔다.\n\n[트러블슈팅 법을 적어놓은 문서](https://help.disqus.com/troubleshooting/im-receiving-the-message-we-were-unable-to-load-disqus)를 보고, 해결해보자.\n\n> 원인: shortname이 잘못됐었다!\n\nprofile에서 설정한 유저네임을 입력하는게 아니라, Admin > 내 사이트를 들어가서, 거기에 있는 shortname을 등록해주니까 됨. 아마 예전에 사이트 연동한다고 시도했을때 shortname까지 입력해둔 것 같다.\n","source":"_posts/TIL-2019-05-03.md","raw":"---\ntitle: TIL\ndate: 2019-05-03 14:38:14\ncategories:\n    - TIL\ntags:\n---\n\n## Github 블로그에 댓글 붙이기\n\nhexo 기반으로 만든 블로그에 disqus를 사용하여 댓글을 연동해보자.\n\n[매우 잘정리된 글](https://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/)이 있어 참고했다.\n\n### \"We were unable to load Disqus\"\n\n\\_config.yml 파일에 disqus_shortname을 등록 후에 deploy하고 확인해보니 위와 같은 메시지가 나왔다.\n\n[트러블슈팅 법을 적어놓은 문서](https://help.disqus.com/troubleshooting/im-receiving-the-message-we-were-unable-to-load-disqus)를 보고, 해결해보자.\n\n> 원인: shortname이 잘못됐었다!\n\nprofile에서 설정한 유저네임을 입력하는게 아니라, Admin > 내 사이트를 들어가서, 거기에 있는 shortname을 등록해주니까 됨. 아마 예전에 사이트 연동한다고 시도했을때 shortname까지 입력해둔 것 같다.\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqy003jbqwxa1021hrs","content":"<h2 id=\"Github-블로그에-댓글-붙이기\"><a href=\"#Github-블로그에-댓글-붙이기\" class=\"headerlink\" title=\"Github 블로그에 댓글 붙이기\"></a>Github 블로그에 댓글 붙이기</h2><p>hexo 기반으로 만든 블로그에 disqus를 사용하여 댓글을 연동해보자.</p>\n<p><a href=\"https://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/\">매우 잘정리된 글</a>이 있어 참고했다.</p>\n<h3 id=\"“We-were-unable-to-load-Disqus”\"><a href=\"#“We-were-unable-to-load-Disqus”\" class=\"headerlink\" title=\"“We were unable to load Disqus”\"></a>“We were unable to load Disqus”</h3><p>_config.yml 파일에 disqus_shortname을 등록 후에 deploy하고 확인해보니 위와 같은 메시지가 나왔다.</p>\n<p><a href=\"https://help.disqus.com/troubleshooting/im-receiving-the-message-we-were-unable-to-load-disqus\">트러블슈팅 법을 적어놓은 문서</a>를 보고, 해결해보자.</p>\n<blockquote>\n<p>원인: shortname이 잘못됐었다!</p>\n</blockquote>\n<p>profile에서 설정한 유저네임을 입력하는게 아니라, Admin &gt; 내 사이트를 들어가서, 거기에 있는 shortname을 등록해주니까 됨. 아마 예전에 사이트 연동한다고 시도했을때 shortname까지 입력해둔 것 같다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Github-블로그에-댓글-붙이기\"><a href=\"#Github-블로그에-댓글-붙이기\" class=\"headerlink\" title=\"Github 블로그에 댓글 붙이기\"></a>Github 블로그에 댓글 붙이기</h2><p>hexo 기반으로 만든 블로그에 disqus를 사용하여 댓글을 연동해보자.</p>\n<p><a href=\"https://khackskjs.github.io/2017/06/22/Setting-Hexo-github-pages/\">매우 잘정리된 글</a>이 있어 참고했다.</p>\n<h3 id=\"“We-were-unable-to-load-Disqus”\"><a href=\"#“We-were-unable-to-load-Disqus”\" class=\"headerlink\" title=\"“We were unable to load Disqus”\"></a>“We were unable to load Disqus”</h3><p>_config.yml 파일에 disqus_shortname을 등록 후에 deploy하고 확인해보니 위와 같은 메시지가 나왔다.</p>\n<p><a href=\"https://help.disqus.com/troubleshooting/im-receiving-the-message-we-were-unable-to-load-disqus\">트러블슈팅 법을 적어놓은 문서</a>를 보고, 해결해보자.</p>\n<blockquote>\n<p>원인: shortname이 잘못됐었다!</p>\n</blockquote>\n<p>profile에서 설정한 유저네임을 입력하는게 아니라, Admin &gt; 내 사이트를 들어가서, 거기에 있는 shortname을 등록해주니까 됨. 아마 예전에 사이트 연동한다고 시도했을때 shortname까지 입력해둔 것 같다.</p>\n"},{"title":"TIL","date":"2019-05-07T01:03:57.000Z","_content":"\n## Babel의 동작 원리 및 흐름에 대해 알아보기\n\n공유 받은 [좋은 글](https://moonformeli.tistory.com/28)이 있어서 정리해두겠습니다.\n\n## Promise 한번 더 되짚어보기\n\n캡틴 판교님의 [Promise에 대한 글](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/)을 다시 한번 읽고 머리에 정리해보자\n\n","source":"_posts/TIL-2019-05-07.md","raw":"---\ntitle: TIL\ndate: 2019-05-07 10:03:57\ncategories:\n    - TIL\ntags:\n---\n\n## Babel의 동작 원리 및 흐름에 대해 알아보기\n\n공유 받은 [좋은 글](https://moonformeli.tistory.com/28)이 있어서 정리해두겠습니다.\n\n## Promise 한번 더 되짚어보기\n\n캡틴 판교님의 [Promise에 대한 글](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/)을 다시 한번 읽고 머리에 정리해보자\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hqz003mbqwx9xcxgt77","content":"<h2 id=\"Babel의-동작-원리-및-흐름에-대해-알아보기\"><a href=\"#Babel의-동작-원리-및-흐름에-대해-알아보기\" class=\"headerlink\" title=\"Babel의 동작 원리 및 흐름에 대해 알아보기\"></a>Babel의 동작 원리 및 흐름에 대해 알아보기</h2><p>공유 받은 <a href=\"https://moonformeli.tistory.com/28\">좋은 글</a>이 있어서 정리해두겠습니다.</p>\n<h2 id=\"Promise-한번-더-되짚어보기\"><a href=\"#Promise-한번-더-되짚어보기\" class=\"headerlink\" title=\"Promise 한번 더 되짚어보기\"></a>Promise 한번 더 되짚어보기</h2><p>캡틴 판교님의 <a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">Promise에 대한 글</a>을 다시 한번 읽고 머리에 정리해보자</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Babel의-동작-원리-및-흐름에-대해-알아보기\"><a href=\"#Babel의-동작-원리-및-흐름에-대해-알아보기\" class=\"headerlink\" title=\"Babel의 동작 원리 및 흐름에 대해 알아보기\"></a>Babel의 동작 원리 및 흐름에 대해 알아보기</h2><p>공유 받은 <a href=\"https://moonformeli.tistory.com/28\">좋은 글</a>이 있어서 정리해두겠습니다.</p>\n<h2 id=\"Promise-한번-더-되짚어보기\"><a href=\"#Promise-한번-더-되짚어보기\" class=\"headerlink\" title=\"Promise 한번 더 되짚어보기\"></a>Promise 한번 더 되짚어보기</h2><p>캡틴 판교님의 <a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">Promise에 대한 글</a>을 다시 한번 읽고 머리에 정리해보자</p>\n"},{"title":"TIL","date":"2019-04-23T00:58:46.000Z","_content":"\n## 웹 서버 개발의 Session 전략\n\n[잘 정리된 글](https://devhaks.github.io/2019/04/20/session-strategy/)\n\n## Preflight request?\n\n[참고](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request)\n","source":"_posts/TIL-2019-04-23.md","raw":"---\ntitle: TIL\ndate: 2019-04-23 09:58:46\ncategories:\n    - TIL\ntags:\n---\n\n## 웹 서버 개발의 Session 전략\n\n[잘 정리된 글](https://devhaks.github.io/2019/04/20/session-strategy/)\n\n## Preflight request?\n\n[참고](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr0003pbqwxb600ch3d","content":"<h2 id=\"웹-서버-개발의-Session-전략\"><a href=\"#웹-서버-개발의-Session-전략\" class=\"headerlink\" title=\"웹 서버 개발의 Session 전략\"></a>웹 서버 개발의 Session 전략</h2><p><a href=\"https://devhaks.github.io/2019/04/20/session-strategy/\">잘 정리된 글</a></p>\n<h2 id=\"Preflight-request\"><a href=\"#Preflight-request\" class=\"headerlink\" title=\"Preflight request?\"></a>Preflight request?</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"웹-서버-개발의-Session-전략\"><a href=\"#웹-서버-개발의-Session-전략\" class=\"headerlink\" title=\"웹 서버 개발의 Session 전략\"></a>웹 서버 개발의 Session 전략</h2><p><a href=\"https://devhaks.github.io/2019/04/20/session-strategy/\">잘 정리된 글</a></p>\n<h2 id=\"Preflight-request\"><a href=\"#Preflight-request\" class=\"headerlink\" title=\"Preflight request?\"></a>Preflight request?</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\">참고</a></p>\n"},{"title":"TIL","date":"2019-05-08T01:16:03.000Z","_content":"\n## vue, event.stopPropagation()\n\n여러 레이어가 떠있을때, 특정 영역을 클릭하였을때, 레이어가 바깥쪽이 클릭됐다고 인식하여 레이어 팝업이 닫히는 이슈가 있었음.\n\nclick.prevent 같이, vue에도 stop 이벤트가 존재한다. [참고](https://kr.vuejs.org/v2/guide/events.html)\n\nevent.stopPropagation();\n\n원인 : 하위 엘리먼트에서 이벤트를 처리하기 전에 click.capture 이벤트로 인해, 딤드 영역 클릭시 팝업을 닫는 로직(상위 엘리먼트)을 먼저체크해서 발생했음\n\n해결: vuex를 통해 해당 체크 여부 관리함\n","source":"_posts/TIL-2019-05-08.md","raw":"---\ntitle: TIL\ndate: 2019-05-08 10:16:03\ncategories:\n    - TIL\ntags:\n---\n\n## vue, event.stopPropagation()\n\n여러 레이어가 떠있을때, 특정 영역을 클릭하였을때, 레이어가 바깥쪽이 클릭됐다고 인식하여 레이어 팝업이 닫히는 이슈가 있었음.\n\nclick.prevent 같이, vue에도 stop 이벤트가 존재한다. [참고](https://kr.vuejs.org/v2/guide/events.html)\n\nevent.stopPropagation();\n\n원인 : 하위 엘리먼트에서 이벤트를 처리하기 전에 click.capture 이벤트로 인해, 딤드 영역 클릭시 팝업을 닫는 로직(상위 엘리먼트)을 먼저체크해서 발생했음\n\n해결: vuex를 통해 해당 체크 여부 관리함\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr0003tbqwxb0od3yuk","content":"<h2 id=\"vue-event-stopPropagation\"><a href=\"#vue-event-stopPropagation\" class=\"headerlink\" title=\"vue, event.stopPropagation()\"></a>vue, event.stopPropagation()</h2><p>여러 레이어가 떠있을때, 특정 영역을 클릭하였을때, 레이어가 바깥쪽이 클릭됐다고 인식하여 레이어 팝업이 닫히는 이슈가 있었음.</p>\n<p>click.prevent 같이, vue에도 stop 이벤트가 존재한다. <a href=\"https://kr.vuejs.org/v2/guide/events.html\">참고</a></p>\n<p>event.stopPropagation();</p>\n<p>원인 : 하위 엘리먼트에서 이벤트를 처리하기 전에 click.capture 이벤트로 인해, 딤드 영역 클릭시 팝업을 닫는 로직(상위 엘리먼트)을 먼저체크해서 발생했음</p>\n<p>해결: vuex를 통해 해당 체크 여부 관리함</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue-event-stopPropagation\"><a href=\"#vue-event-stopPropagation\" class=\"headerlink\" title=\"vue, event.stopPropagation()\"></a>vue, event.stopPropagation()</h2><p>여러 레이어가 떠있을때, 특정 영역을 클릭하였을때, 레이어가 바깥쪽이 클릭됐다고 인식하여 레이어 팝업이 닫히는 이슈가 있었음.</p>\n<p>click.prevent 같이, vue에도 stop 이벤트가 존재한다. <a href=\"https://kr.vuejs.org/v2/guide/events.html\">참고</a></p>\n<p>event.stopPropagation();</p>\n<p>원인 : 하위 엘리먼트에서 이벤트를 처리하기 전에 click.capture 이벤트로 인해, 딤드 영역 클릭시 팝업을 닫는 로직(상위 엘리먼트)을 먼저체크해서 발생했음</p>\n<p>해결: vuex를 통해 해당 체크 여부 관리함</p>\n"},{"title":"TIL","date":"2019-05-10T00:55:50.000Z","_content":"\n## Google I/O 2019 볼만한 것들\n\n공유받은 자료들을 정리해보자.\n\n[1](https://youtu.be/c0oy0vQKEZE)\n\n[2](https://www.youtube.com/watch?v=MbnATLCuKI4&list=WL&index=5&t=0s)\n\n[3](https://www.youtube.com/watch?v=k-A2VfuUROg&list=WL&index=6&t=0s)\n\n[4](https://www.youtube.com/watch?v=rUUazNIZW7I&list=WL&index=7&t=0s)\n\n[5](https://www.youtube.com/watch?v=-xZHWK-vHbQ&list=WL&index=25&t=0s)\n\n[js 알아 둬야 될 것](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis)\n","source":"_posts/TIL-2019-05-10.md","raw":"---\ntitle: TIL\ndate: 2019-05-10 09:55:50\ncategories:\n    - TIL\ntags:\n---\n\n## Google I/O 2019 볼만한 것들\n\n공유받은 자료들을 정리해보자.\n\n[1](https://youtu.be/c0oy0vQKEZE)\n\n[2](https://www.youtube.com/watch?v=MbnATLCuKI4&list=WL&index=5&t=0s)\n\n[3](https://www.youtube.com/watch?v=k-A2VfuUROg&list=WL&index=6&t=0s)\n\n[4](https://www.youtube.com/watch?v=rUUazNIZW7I&list=WL&index=7&t=0s)\n\n[5](https://www.youtube.com/watch?v=-xZHWK-vHbQ&list=WL&index=25&t=0s)\n\n[js 알아 둬야 될 것](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr0003vbqwx5sq57hkd","content":"<h2 id=\"Google-I-O-2019-볼만한-것들\"><a href=\"#Google-I-O-2019-볼만한-것들\" class=\"headerlink\" title=\"Google I/O 2019 볼만한 것들\"></a>Google I/O 2019 볼만한 것들</h2><p>공유받은 자료들을 정리해보자.</p>\n<p><a href=\"https://youtu.be/c0oy0vQKEZE\">1</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=MbnATLCuKI4&amp;list=WL&amp;index=5&amp;t=0s\">2</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=k-A2VfuUROg&amp;list=WL&amp;index=6&amp;t=0s\">3</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=rUUazNIZW7I&amp;list=WL&amp;index=7&amp;t=0s\">4</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-xZHWK-vHbQ&amp;list=WL&amp;index=25&amp;t=0s\">5</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">js 알아 둬야 될 것</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Google-I-O-2019-볼만한-것들\"><a href=\"#Google-I-O-2019-볼만한-것들\" class=\"headerlink\" title=\"Google I/O 2019 볼만한 것들\"></a>Google I/O 2019 볼만한 것들</h2><p>공유받은 자료들을 정리해보자.</p>\n<p><a href=\"https://youtu.be/c0oy0vQKEZE\">1</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=MbnATLCuKI4&amp;list=WL&amp;index=5&amp;t=0s\">2</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=k-A2VfuUROg&amp;list=WL&amp;index=6&amp;t=0s\">3</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=rUUazNIZW7I&amp;list=WL&amp;index=7&amp;t=0s\">4</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-xZHWK-vHbQ&amp;list=WL&amp;index=25&amp;t=0s\">5</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">js 알아 둬야 될 것</a></p>\n"},{"title":"TIL","date":"2019-05-09T06:43:53.000Z","_content":"\n## 프론트 공유\n\n시간내서 한번 봐보자.\n\n[vue 디자인 패턴](https://www.youtube.com/watch?v=RF1bbhRw9sg)\n\n[Javascript SEO Video](https://webmasters.googleblog.com/2019/03/introducing-new-javascript-seo-video.html)\n\n[Web performance](https://developers.google.com/web/tools/lighthouse/audits/budgets)\n\n[web.dev](https://web.dev/)\n\n## Javascript Array.prototype.find\n\n[find() 메서드](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find)를 오랜만에 썼더니 잊어버렸다. 다시 숙지하자~\n","source":"_posts/TIL-2019-05-09.md","raw":"---\ntitle: TIL\ndate: 2019-05-09 15:43:53\ncategories:\n    - TIL\ntags:\n---\n\n## 프론트 공유\n\n시간내서 한번 봐보자.\n\n[vue 디자인 패턴](https://www.youtube.com/watch?v=RF1bbhRw9sg)\n\n[Javascript SEO Video](https://webmasters.googleblog.com/2019/03/introducing-new-javascript-seo-video.html)\n\n[Web performance](https://developers.google.com/web/tools/lighthouse/audits/budgets)\n\n[web.dev](https://web.dev/)\n\n## Javascript Array.prototype.find\n\n[find() 메서드](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find)를 오랜만에 썼더니 잊어버렸다. 다시 숙지하자~\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr2003ybqwxb2qr4of3","content":"<h2 id=\"프론트-공유\"><a href=\"#프론트-공유\" class=\"headerlink\" title=\"프론트 공유\"></a>프론트 공유</h2><p>시간내서 한번 봐보자.</p>\n<p><a href=\"https://www.youtube.com/watch?v=RF1bbhRw9sg\">vue 디자인 패턴</a></p>\n<p><a href=\"https://webmasters.googleblog.com/2019/03/introducing-new-javascript-seo-video.html\">Javascript SEO Video</a></p>\n<p><a href=\"https://developers.google.com/web/tools/lighthouse/audits/budgets\">Web performance</a></p>\n<p><a href=\"https://web.dev/\">web.dev</a></p>\n<h2 id=\"Javascript-Array-prototype-find\"><a href=\"#Javascript-Array-prototype-find\" class=\"headerlink\" title=\"Javascript Array.prototype.find\"></a>Javascript Array.prototype.find</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">find() 메서드</a>를 오랜만에 썼더니 잊어버렸다. 다시 숙지하자~</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"프론트-공유\"><a href=\"#프론트-공유\" class=\"headerlink\" title=\"프론트 공유\"></a>프론트 공유</h2><p>시간내서 한번 봐보자.</p>\n<p><a href=\"https://www.youtube.com/watch?v=RF1bbhRw9sg\">vue 디자인 패턴</a></p>\n<p><a href=\"https://webmasters.googleblog.com/2019/03/introducing-new-javascript-seo-video.html\">Javascript SEO Video</a></p>\n<p><a href=\"https://developers.google.com/web/tools/lighthouse/audits/budgets\">Web performance</a></p>\n<p><a href=\"https://web.dev/\">web.dev</a></p>\n<h2 id=\"Javascript-Array-prototype-find\"><a href=\"#Javascript-Array-prototype-find\" class=\"headerlink\" title=\"Javascript Array.prototype.find\"></a>Javascript Array.prototype.find</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">find() 메서드</a>를 오랜만에 썼더니 잊어버렸다. 다시 숙지하자~</p>\n"},{"title":"TIL","date":"2019-05-20T05:24:07.000Z","_content":"\n## Javascript for of, for in 차이 이해하기\n\n`for of`와 `for in`의 차이를 이해하면서 사용하자!\n[잘 정리된 글](https://2dubbing.tistory.com/9)을 찾았다. 참고하자\n\n## 다시 머리에 넣을 것들\n\n-   `for of` 는 순회하려는 대상이 `Symbol`이 아니면 에러를 발생\n-   `Symbol`은 ES6에서 추가됨\n-   `for of`를 사용하는데 인덱스 값도 사용하고 싶을땐 `Array.entries()`를 사용하자\n\n```javascript\nfor (let [item, index] of array.endtries()) {\n}\n```\n\n[모질라 문서](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...of)\n\n## FileReader 객체\n\n[참고](https://developer.mozilla.org/ko/docs/Web/API/FileReader)\n업로드한 이미지의 섬네일 정보를 노출시킬때 사용하면 될듯\n\n[잘 정리된 글](https://programmingsummaries.tistory.com/367)\n","source":"_posts/TIL-2019-05-20.md","raw":"---\ntitle: TIL\ndate: 2019-05-20 14:24:07\ncategories:\n    - TIL\ntags:\n---\n\n## Javascript for of, for in 차이 이해하기\n\n`for of`와 `for in`의 차이를 이해하면서 사용하자!\n[잘 정리된 글](https://2dubbing.tistory.com/9)을 찾았다. 참고하자\n\n## 다시 머리에 넣을 것들\n\n-   `for of` 는 순회하려는 대상이 `Symbol`이 아니면 에러를 발생\n-   `Symbol`은 ES6에서 추가됨\n-   `for of`를 사용하는데 인덱스 값도 사용하고 싶을땐 `Array.entries()`를 사용하자\n\n```javascript\nfor (let [item, index] of array.endtries()) {\n}\n```\n\n[모질라 문서](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...of)\n\n## FileReader 객체\n\n[참고](https://developer.mozilla.org/ko/docs/Web/API/FileReader)\n업로드한 이미지의 섬네일 정보를 노출시킬때 사용하면 될듯\n\n[잘 정리된 글](https://programmingsummaries.tistory.com/367)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr40041bqwxd9qudkss","content":"<h2 id=\"Javascript-for-of-for-in-차이-이해하기\"><a href=\"#Javascript-for-of-for-in-차이-이해하기\" class=\"headerlink\" title=\"Javascript for of, for in 차이 이해하기\"></a>Javascript for of, for in 차이 이해하기</h2><p><code>for of</code>와 <code>for in</code>의 차이를 이해하면서 사용하자!<br><a href=\"https://2dubbing.tistory.com/9\">잘 정리된 글</a>을 찾았다. 참고하자</p>\n<h2 id=\"다시-머리에-넣을-것들\"><a href=\"#다시-머리에-넣을-것들\" class=\"headerlink\" title=\"다시 머리에 넣을 것들\"></a>다시 머리에 넣을 것들</h2><ul>\n<li><code>for of</code> 는 순회하려는 대상이 <code>Symbol</code>이 아니면 에러를 발생</li>\n<li><code>Symbol</code>은 ES6에서 추가됨</li>\n<li><code>for of</code>를 사용하는데 인덱스 값도 사용하고 싶을땐 <code>Array.entries()</code>를 사용하자</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [item, index] <span class=\"keyword\">of</span> array.endtries()) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...of\">모질라 문서</a></p>\n<h2 id=\"FileReader-객체\"><a href=\"#FileReader-객체\" class=\"headerlink\" title=\"FileReader 객체\"></a>FileReader 객체</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/FileReader\">참고</a><br>업로드한 이미지의 섬네일 정보를 노출시킬때 사용하면 될듯</p>\n<p><a href=\"https://programmingsummaries.tistory.com/367\">잘 정리된 글</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Javascript-for-of-for-in-차이-이해하기\"><a href=\"#Javascript-for-of-for-in-차이-이해하기\" class=\"headerlink\" title=\"Javascript for of, for in 차이 이해하기\"></a>Javascript for of, for in 차이 이해하기</h2><p><code>for of</code>와 <code>for in</code>의 차이를 이해하면서 사용하자!<br><a href=\"https://2dubbing.tistory.com/9\">잘 정리된 글</a>을 찾았다. 참고하자</p>\n<h2 id=\"다시-머리에-넣을-것들\"><a href=\"#다시-머리에-넣을-것들\" class=\"headerlink\" title=\"다시 머리에 넣을 것들\"></a>다시 머리에 넣을 것들</h2><ul>\n<li><code>for of</code> 는 순회하려는 대상이 <code>Symbol</code>이 아니면 에러를 발생</li>\n<li><code>Symbol</code>은 ES6에서 추가됨</li>\n<li><code>for of</code>를 사용하는데 인덱스 값도 사용하고 싶을땐 <code>Array.entries()</code>를 사용하자</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [item, index] <span class=\"keyword\">of</span> array.endtries()) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/for...of\">모질라 문서</a></p>\n<h2 id=\"FileReader-객체\"><a href=\"#FileReader-객체\" class=\"headerlink\" title=\"FileReader 객체\"></a>FileReader 객체</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/FileReader\">참고</a><br>업로드한 이미지의 섬네일 정보를 노출시킬때 사용하면 될듯</p>\n<p><a href=\"https://programmingsummaries.tistory.com/367\">잘 정리된 글</a></p>\n"},{"title":"TIL","date":"2019-05-17T03:11:51.000Z","_content":"\n## git stash\n\n작업하던 내용을 `git stash`로 저장하고, 해당 브랜치에서 다시 `git stash pop`을 해야하는데\n\n잘못하여 다른 브랜치에서 `git stash pop`을 해버려서 들어갔다.. 어떻게 해결해야할까\n\n일단 git stash에 대해서 정확히 공부하자\n[참고](https://gmlwjd9405.github.io/2018/05/18/git-stash.html)\n\n","source":"_posts/TIL-2019-05-17.md","raw":"---\ntitle: TIL\ndate: 2019-05-17 12:11:51\ncategories:\n    - TIL\ntags:\n---\n\n## git stash\n\n작업하던 내용을 `git stash`로 저장하고, 해당 브랜치에서 다시 `git stash pop`을 해야하는데\n\n잘못하여 다른 브랜치에서 `git stash pop`을 해버려서 들어갔다.. 어떻게 해결해야할까\n\n일단 git stash에 대해서 정확히 공부하자\n[참고](https://gmlwjd9405.github.io/2018/05/18/git-stash.html)\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr70045bqwx4lccguv4","content":"<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><p>작업하던 내용을 <code>git stash</code>로 저장하고, 해당 브랜치에서 다시 <code>git stash pop</code>을 해야하는데</p>\n<p>잘못하여 다른 브랜치에서 <code>git stash pop</code>을 해버려서 들어갔다.. 어떻게 해결해야할까</p>\n<p>일단 git stash에 대해서 정확히 공부하자<br><a href=\"https://gmlwjd9405.github.io/2018/05/18/git-stash.html\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"git stash\"></a>git stash</h2><p>작업하던 내용을 <code>git stash</code>로 저장하고, 해당 브랜치에서 다시 <code>git stash pop</code>을 해야하는데</p>\n<p>잘못하여 다른 브랜치에서 <code>git stash pop</code>을 해버려서 들어갔다.. 어떻게 해결해야할까</p>\n<p>일단 git stash에 대해서 정확히 공부하자<br><a href=\"https://gmlwjd9405.github.io/2018/05/18/git-stash.html\">참고</a></p>\n"},{"title":"TIL","date":"2019-05-22T00:55:16.000Z","_content":"\n## 자바스크립트 성능 비교\n\n성능 비교 관련한 [좋은 글](https://12bme.tistory.com/134?category=682905)을 공유받았다.\n\n이걸 보고 `for-of`는 성능이 어떨지 궁금해졌다. 순환하려는 대상이 undefined일때 에러를 뱉기 때문에, 실제로 사용하려면 앞에 예외 처리도 추가해야한다고 하셔서 잘 안쓴다고 하시는데, 이렇게 만든 이유가 있지 않을까라는 생각이 들었다. 시간이 되면 성능 체크를 해보자!\n\n## ie9 예외처리\n\njavascript에서 ie9 예외처리를 할 일이 생겼다.\n\nnavigator.userAgent에 뭔가 브라우저 정보가 담겨있음. [MDN 참고](https://developer.mozilla.org/ko/docs/Web/HTTP/User_agent%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EA%B0%90%EC%A7%80)\n\n-   IE 8.0 부터는 `Trident`라는 값이 유저정보에 붙음\n\n```\n// Example\nIE6.0 = null\nIE7.0 = null\nIE8.0 = Trident/4.0\nIE9.0 = Trident/5.0\nIE10.0 = Trident/6.0\n```\n\n[조건부 주석](https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%B6%80_%EC%A3%BC%EC%84%9D) 이란 것도 있는 듯하다.\n\n","source":"_posts/TIL-2019-05-22.md","raw":"---\ntitle: TIL\ndate: 2019-05-22 09:55:16\ncategories:\n    - TIL\ntags:\n    - TIL\n    - Javascript\n    - for-in\n    - for-of\n---\n\n## 자바스크립트 성능 비교\n\n성능 비교 관련한 [좋은 글](https://12bme.tistory.com/134?category=682905)을 공유받았다.\n\n이걸 보고 `for-of`는 성능이 어떨지 궁금해졌다. 순환하려는 대상이 undefined일때 에러를 뱉기 때문에, 실제로 사용하려면 앞에 예외 처리도 추가해야한다고 하셔서 잘 안쓴다고 하시는데, 이렇게 만든 이유가 있지 않을까라는 생각이 들었다. 시간이 되면 성능 체크를 해보자!\n\n## ie9 예외처리\n\njavascript에서 ie9 예외처리를 할 일이 생겼다.\n\nnavigator.userAgent에 뭔가 브라우저 정보가 담겨있음. [MDN 참고](https://developer.mozilla.org/ko/docs/Web/HTTP/User_agent%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EA%B0%90%EC%A7%80)\n\n-   IE 8.0 부터는 `Trident`라는 값이 유저정보에 붙음\n\n```\n// Example\nIE6.0 = null\nIE7.0 = null\nIE8.0 = Trident/4.0\nIE9.0 = Trident/5.0\nIE10.0 = Trident/6.0\n```\n\n[조건부 주석](https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%B6%80_%EC%A3%BC%EC%84%9D) 이란 것도 있는 듯하다.\n\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr80047bqwxdttiej21","content":"<h2 id=\"자바스크립트-성능-비교\"><a href=\"#자바스크립트-성능-비교\" class=\"headerlink\" title=\"자바스크립트 성능 비교\"></a>자바스크립트 성능 비교</h2><p>성능 비교 관련한 <a href=\"https://12bme.tistory.com/134?category=682905\">좋은 글</a>을 공유받았다.</p>\n<p>이걸 보고 <code>for-of</code>는 성능이 어떨지 궁금해졌다. 순환하려는 대상이 undefined일때 에러를 뱉기 때문에, 실제로 사용하려면 앞에 예외 처리도 추가해야한다고 하셔서 잘 안쓴다고 하시는데, 이렇게 만든 이유가 있지 않을까라는 생각이 들었다. 시간이 되면 성능 체크를 해보자!</p>\n<h2 id=\"ie9-예외처리\"><a href=\"#ie9-예외처리\" class=\"headerlink\" title=\"ie9 예외처리\"></a>ie9 예외처리</h2><p>javascript에서 ie9 예외처리를 할 일이 생겼다.</p>\n<p>navigator.userAgent에 뭔가 브라우저 정보가 담겨있음. <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/User_agent%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EA%B0%90%EC%A7%80\">MDN 참고</a></p>\n<ul>\n<li>IE 8.0 부터는 <code>Trident</code>라는 값이 유저정보에 붙음</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Example</span><br><span class=\"line\">IE6.0 &#x3D; null</span><br><span class=\"line\">IE7.0 &#x3D; null</span><br><span class=\"line\">IE8.0 &#x3D; Trident&#x2F;4.0</span><br><span class=\"line\">IE9.0 &#x3D; Trident&#x2F;5.0</span><br><span class=\"line\">IE10.0 &#x3D; Trident&#x2F;6.0</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%B6%80_%EC%A3%BC%EC%84%9D\">조건부 주석</a> 이란 것도 있는 듯하다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"자바스크립트-성능-비교\"><a href=\"#자바스크립트-성능-비교\" class=\"headerlink\" title=\"자바스크립트 성능 비교\"></a>자바스크립트 성능 비교</h2><p>성능 비교 관련한 <a href=\"https://12bme.tistory.com/134?category=682905\">좋은 글</a>을 공유받았다.</p>\n<p>이걸 보고 <code>for-of</code>는 성능이 어떨지 궁금해졌다. 순환하려는 대상이 undefined일때 에러를 뱉기 때문에, 실제로 사용하려면 앞에 예외 처리도 추가해야한다고 하셔서 잘 안쓴다고 하시는데, 이렇게 만든 이유가 있지 않을까라는 생각이 들었다. 시간이 되면 성능 체크를 해보자!</p>\n<h2 id=\"ie9-예외처리\"><a href=\"#ie9-예외처리\" class=\"headerlink\" title=\"ie9 예외처리\"></a>ie9 예외처리</h2><p>javascript에서 ie9 예외처리를 할 일이 생겼다.</p>\n<p>navigator.userAgent에 뭔가 브라우저 정보가 담겨있음. <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/User_agent%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EA%B0%90%EC%A7%80\">MDN 참고</a></p>\n<ul>\n<li>IE 8.0 부터는 <code>Trident</code>라는 값이 유저정보에 붙음</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Example</span><br><span class=\"line\">IE6.0 &#x3D; null</span><br><span class=\"line\">IE7.0 &#x3D; null</span><br><span class=\"line\">IE8.0 &#x3D; Trident&#x2F;4.0</span><br><span class=\"line\">IE9.0 &#x3D; Trident&#x2F;5.0</span><br><span class=\"line\">IE10.0 &#x3D; Trident&#x2F;6.0</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EC%A1%B0%EA%B1%B4%EB%B6%80_%EC%A3%BC%EC%84%9D\">조건부 주석</a> 이란 것도 있는 듯하다.</p>\n"},{"title":"TIL","date":"2019-05-14T05:26:47.000Z","_content":"\n## vue filter\n\n현재 Vue instance에 선언된 `fileSize`라는 `view filter`를 `method`내에서 사용하고 싶을때, -> `this.$options.fileSize(file).`로 참조 가능하다. [참고](https://vuejs.org/v2/api/#vm-options)\n","source":"_posts/TIL-2019-05-14.md","raw":"---\ntitle: TIL\ndate: 2019-05-14 14:26:47\ncategories:\n    - TIL\ntags:\n---\n\n## vue filter\n\n현재 Vue instance에 선언된 `fileSize`라는 `view filter`를 `method`내에서 사용하고 싶을때, -> `this.$options.fileSize(file).`로 참조 가능하다. [참고](https://vuejs.org/v2/api/#vm-options)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr80049bqwxg60u4x4s","content":"<h2 id=\"vue-filter\"><a href=\"#vue-filter\" class=\"headerlink\" title=\"vue filter\"></a>vue filter</h2><p>현재 Vue instance에 선언된 <code>fileSize</code>라는 <code>view filter</code>를 <code>method</code>내에서 사용하고 싶을때, -&gt; <code>this.$options.fileSize(file).</code>로 참조 가능하다. <a href=\"https://vuejs.org/v2/api/#vm-options\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue-filter\"><a href=\"#vue-filter\" class=\"headerlink\" title=\"vue filter\"></a>vue filter</h2><p>현재 Vue instance에 선언된 <code>fileSize</code>라는 <code>view filter</code>를 <code>method</code>내에서 사용하고 싶을때, -&gt; <code>this.$options.fileSize(file).</code>로 참조 가능하다. <a href=\"https://vuejs.org/v2/api/#vm-options\">참고</a></p>\n"},{"title":"TIL","date":"2019-05-24T10:59:35.000Z","_content":"\n## VIM\n\n한번 읽어보면 [좋을 글](https://johngrib.github.io/wiki/two-views-of-vim/)을 공유받았다. 읽어보자.\n\n## 성능이 중요한 이유\n\n[참고](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n","source":"_posts/TIL-2019-05-24.md","raw":"---\ntitle: TIL\ndate: 2019-05-24 19:59:35\ncategories:\n    - TIL\ntags:\n    - VIM\n---\n\n## VIM\n\n한번 읽어보면 [좋을 글](https://johngrib.github.io/wiki/two-views-of-vim/)을 공유받았다. 읽어보자.\n\n## 성능이 중요한 이유\n\n[참고](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hr9004dbqwxfe190vbl","content":"<h2 id=\"VIM\"><a href=\"#VIM\" class=\"headerlink\" title=\"VIM\"></a>VIM</h2><p>한번 읽어보면 <a href=\"https://johngrib.github.io/wiki/two-views-of-vim/\">좋을 글</a>을 공유받았다. 읽어보자.</p>\n<h2 id=\"성능이-중요한-이유\"><a href=\"#성능이-중요한-이유\" class=\"headerlink\" title=\"성능이 중요한 이유\"></a>성능이 중요한 이유</h2><p><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"VIM\"><a href=\"#VIM\" class=\"headerlink\" title=\"VIM\"></a>VIM</h2><p>한번 읽어보면 <a href=\"https://johngrib.github.io/wiki/two-views-of-vim/\">좋을 글</a>을 공유받았다. 읽어보자.</p>\n<h2 id=\"성능이-중요한-이유\"><a href=\"#성능이-중요한-이유\" class=\"headerlink\" title=\"성능이 중요한 이유\"></a>성능이 중요한 이유</h2><p><a href=\"https://developers.google.com/web/fundamentals/performance/why-performance-matters/\">참고</a></p>\n"},{"title":"TIL","date":"2019-06-03T01:22:58.000Z","_content":"\n## 웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.\n[참고](https://m.zdnet.co.kr/news_view.asp?article_id=20190531184644)\n\n## HTTP/2\n[참고](https://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/)","source":"_posts/TIL-2019-06-03.md","raw":"---\ntitle: TIL\ndate: 2019-06-03 10:22:58\ncategories:\n    - til\ntags:\n---\n\n## 웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.\n[참고](https://m.zdnet.co.kr/news_view.asp?article_id=20190531184644)\n\n## HTTP/2\n[참고](https://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/)","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hra004gbqwxh1m67vvy","content":"<h2 id=\"웹-표준이-하나로-합쳐진다는-글을-기사를-공유받았다\"><a href=\"#웹-표준이-하나로-합쳐진다는-글을-기사를-공유받았다\" class=\"headerlink\" title=\"웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.\"></a>웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.</h2><p><a href=\"https://m.zdnet.co.kr/news_view.asp?article_id=20190531184644\">참고</a></p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p><a href=\"https://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"웹-표준이-하나로-합쳐진다는-글을-기사를-공유받았다\"><a href=\"#웹-표준이-하나로-합쳐진다는-글을-기사를-공유받았다\" class=\"headerlink\" title=\"웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.\"></a>웹 표준이 하나로 합쳐진다는 글을 기사를 공유받았다.</h2><p><a href=\"https://m.zdnet.co.kr/news_view.asp?article_id=20190531184644\">참고</a></p>\n<h2 id=\"HTTP-2\"><a href=\"#HTTP-2\" class=\"headerlink\" title=\"HTTP/2\"></a>HTTP/2</h2><p><a href=\"https://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/\">참고</a></p>\n"},{"title":"TIL","date":"2019-06-05T02:06:38.000Z","_content":"\n## Docker, Jenkins를 잘 요약설명한 글이 있다\n\n[참고](https://tora-it-kingdom.tistory.com/21)\n\n## 레거시코드 리펙토링에 관한 글\n\n[참고](https://chodragon9.github.io//blog/legacy-code-to-easy-code-2/)\n\n## 객체지향프로그래밍과 디자인패턴에 관한 글\n\n[참고](https://hanwong.github.io/2019/06/02/codespitz-01/index.html)\n\n## 코드 포매팅 자동화 관련 글\n\n한번 읽어보자\n[참고](https://jbee.io/web/formatting-code-automatically/?fbclid=IwAR2MR1WBkvlR_-r_RLSnEopaAvIvQ_CVc8oZT1LLRZ4VPLWkYYtSdJtSA1s)\n\n## 코드스피츠 - CSS Rendering\n\n아주 좋은 강의같다. 봐보자!\n[1회차 1/2](https://youtu.be/_o1zsrBkZyg)\n그래픽 시스템, 랜더링 시스템\n영역을 나눈 뒤에 채운다.\n\n어떡하면 고정되어있는 숫자를 사용하지 않고 계산된 체계로 그래픽을 표현할까\n","source":"_posts/TIL-2019-06-05.md","raw":"---\ntitle: TIL\ndate: 2019-06-05 11:06:38\ncategories:\n    - TIL\ntags:\n    - docker\n---\n\n## Docker, Jenkins를 잘 요약설명한 글이 있다\n\n[참고](https://tora-it-kingdom.tistory.com/21)\n\n## 레거시코드 리펙토링에 관한 글\n\n[참고](https://chodragon9.github.io//blog/legacy-code-to-easy-code-2/)\n\n## 객체지향프로그래밍과 디자인패턴에 관한 글\n\n[참고](https://hanwong.github.io/2019/06/02/codespitz-01/index.html)\n\n## 코드 포매팅 자동화 관련 글\n\n한번 읽어보자\n[참고](https://jbee.io/web/formatting-code-automatically/?fbclid=IwAR2MR1WBkvlR_-r_RLSnEopaAvIvQ_CVc8oZT1LLRZ4VPLWkYYtSdJtSA1s)\n\n## 코드스피츠 - CSS Rendering\n\n아주 좋은 강의같다. 봐보자!\n[1회차 1/2](https://youtu.be/_o1zsrBkZyg)\n그래픽 시스템, 랜더링 시스템\n영역을 나눈 뒤에 채운다.\n\n어떡하면 고정되어있는 숫자를 사용하지 않고 계산된 체계로 그래픽을 표현할까\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrc004jbqwx3ey5frwb","content":"<h2 id=\"Docker-Jenkins를-잘-요약설명한-글이-있다\"><a href=\"#Docker-Jenkins를-잘-요약설명한-글이-있다\" class=\"headerlink\" title=\"Docker, Jenkins를 잘 요약설명한 글이 있다\"></a>Docker, Jenkins를 잘 요약설명한 글이 있다</h2><p><a href=\"https://tora-it-kingdom.tistory.com/21\">참고</a></p>\n<h2 id=\"레거시코드-리펙토링에-관한-글\"><a href=\"#레거시코드-리펙토링에-관한-글\" class=\"headerlink\" title=\"레거시코드 리펙토링에 관한 글\"></a>레거시코드 리펙토링에 관한 글</h2><p><a href=\"https://chodragon9.github.io//blog/legacy-code-to-easy-code-2/\">참고</a></p>\n<h2 id=\"객체지향프로그래밍과-디자인패턴에-관한-글\"><a href=\"#객체지향프로그래밍과-디자인패턴에-관한-글\" class=\"headerlink\" title=\"객체지향프로그래밍과 디자인패턴에 관한 글\"></a>객체지향프로그래밍과 디자인패턴에 관한 글</h2><p><a href=\"https://hanwong.github.io/2019/06/02/codespitz-01/index.html\">참고</a></p>\n<h2 id=\"코드-포매팅-자동화-관련-글\"><a href=\"#코드-포매팅-자동화-관련-글\" class=\"headerlink\" title=\"코드 포매팅 자동화 관련 글\"></a>코드 포매팅 자동화 관련 글</h2><p>한번 읽어보자<br><a href=\"https://jbee.io/web/formatting-code-automatically/?fbclid=IwAR2MR1WBkvlR_-r_RLSnEopaAvIvQ_CVc8oZT1LLRZ4VPLWkYYtSdJtSA1s\">참고</a></p>\n<h2 id=\"코드스피츠-CSS-Rendering\"><a href=\"#코드스피츠-CSS-Rendering\" class=\"headerlink\" title=\"코드스피츠 - CSS Rendering\"></a>코드스피츠 - CSS Rendering</h2><p>아주 좋은 강의같다. 봐보자!<br><a href=\"https://youtu.be/_o1zsrBkZyg\">1회차 1/2</a><br>그래픽 시스템, 랜더링 시스템<br>영역을 나눈 뒤에 채운다.</p>\n<p>어떡하면 고정되어있는 숫자를 사용하지 않고 계산된 체계로 그래픽을 표현할까</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Docker-Jenkins를-잘-요약설명한-글이-있다\"><a href=\"#Docker-Jenkins를-잘-요약설명한-글이-있다\" class=\"headerlink\" title=\"Docker, Jenkins를 잘 요약설명한 글이 있다\"></a>Docker, Jenkins를 잘 요약설명한 글이 있다</h2><p><a href=\"https://tora-it-kingdom.tistory.com/21\">참고</a></p>\n<h2 id=\"레거시코드-리펙토링에-관한-글\"><a href=\"#레거시코드-리펙토링에-관한-글\" class=\"headerlink\" title=\"레거시코드 리펙토링에 관한 글\"></a>레거시코드 리펙토링에 관한 글</h2><p><a href=\"https://chodragon9.github.io//blog/legacy-code-to-easy-code-2/\">참고</a></p>\n<h2 id=\"객체지향프로그래밍과-디자인패턴에-관한-글\"><a href=\"#객체지향프로그래밍과-디자인패턴에-관한-글\" class=\"headerlink\" title=\"객체지향프로그래밍과 디자인패턴에 관한 글\"></a>객체지향프로그래밍과 디자인패턴에 관한 글</h2><p><a href=\"https://hanwong.github.io/2019/06/02/codespitz-01/index.html\">참고</a></p>\n<h2 id=\"코드-포매팅-자동화-관련-글\"><a href=\"#코드-포매팅-자동화-관련-글\" class=\"headerlink\" title=\"코드 포매팅 자동화 관련 글\"></a>코드 포매팅 자동화 관련 글</h2><p>한번 읽어보자<br><a href=\"https://jbee.io/web/formatting-code-automatically/?fbclid=IwAR2MR1WBkvlR_-r_RLSnEopaAvIvQ_CVc8oZT1LLRZ4VPLWkYYtSdJtSA1s\">참고</a></p>\n<h2 id=\"코드스피츠-CSS-Rendering\"><a href=\"#코드스피츠-CSS-Rendering\" class=\"headerlink\" title=\"코드스피츠 - CSS Rendering\"></a>코드스피츠 - CSS Rendering</h2><p>아주 좋은 강의같다. 봐보자!<br><a href=\"https://youtu.be/_o1zsrBkZyg\">1회차 1/2</a><br>그래픽 시스템, 랜더링 시스템<br>영역을 나눈 뒤에 채운다.</p>\n<p>어떡하면 고정되어있는 숫자를 사용하지 않고 계산된 체계로 그래픽을 표현할까</p>\n"},{"title":"TIL","date":"2019-06-12T02:03:40.000Z","_content":"\n## 자바스크립트 2019 동향\n\n[네이버 D2에 좋은 글](https://d2.naver.com/helloworld/4007447)이 있다. 읽어보자!\n\n## 반응형 프로그래밍과 RxJS 이해하기\n\n[좋은 글](https://hyunseob.github.io/2016/10/09/understanding-reactive-programming-and-rxjs/)이 있다. 한번 봐보자!\n","source":"_posts/TIL-2019-06-12.md","raw":"---\ntitle: TIL\ndate: 2019-06-12 11:03:40\ncategories:\n    - TIL\ntags:\n---\n\n## 자바스크립트 2019 동향\n\n[네이버 D2에 좋은 글](https://d2.naver.com/helloworld/4007447)이 있다. 읽어보자!\n\n## 반응형 프로그래밍과 RxJS 이해하기\n\n[좋은 글](https://hyunseob.github.io/2016/10/09/understanding-reactive-programming-and-rxjs/)이 있다. 한번 봐보자!\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrc004lbqwxbk016wfk","content":"<h2 id=\"자바스크립트-2019-동향\"><a href=\"#자바스크립트-2019-동향\" class=\"headerlink\" title=\"자바스크립트 2019 동향\"></a>자바스크립트 2019 동향</h2><p><a href=\"https://d2.naver.com/helloworld/4007447\">네이버 D2에 좋은 글</a>이 있다. 읽어보자!</p>\n<h2 id=\"반응형-프로그래밍과-RxJS-이해하기\"><a href=\"#반응형-프로그래밍과-RxJS-이해하기\" class=\"headerlink\" title=\"반응형 프로그래밍과 RxJS 이해하기\"></a>반응형 프로그래밍과 RxJS 이해하기</h2><p><a href=\"https://hyunseob.github.io/2016/10/09/understanding-reactive-programming-and-rxjs/\">좋은 글</a>이 있다. 한번 봐보자!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"자바스크립트-2019-동향\"><a href=\"#자바스크립트-2019-동향\" class=\"headerlink\" title=\"자바스크립트 2019 동향\"></a>자바스크립트 2019 동향</h2><p><a href=\"https://d2.naver.com/helloworld/4007447\">네이버 D2에 좋은 글</a>이 있다. 읽어보자!</p>\n<h2 id=\"반응형-프로그래밍과-RxJS-이해하기\"><a href=\"#반응형-프로그래밍과-RxJS-이해하기\" class=\"headerlink\" title=\"반응형 프로그래밍과 RxJS 이해하기\"></a>반응형 프로그래밍과 RxJS 이해하기</h2><p><a href=\"https://hyunseob.github.io/2016/10/09/understanding-reactive-programming-and-rxjs/\">좋은 글</a>이 있다. 한번 봐보자!</p>\n"},{"title":"TIL","date":"2019-06-11T00:35:42.000Z","_content":"\n## Array.prototype.reduce()\n\n[reduce()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n\n## 한번 읽어볼 글\n\n[PWA 1편](https://medium.com/@euncho/pwa-%EC%BD%94%EB%93%9C%EB%9E%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-597049b2df40)\n[PWA 2편](https://medium.com/@euncho/pwa%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4-a5be57df5575?fbclid=IwAR07zKmpGoPy12LTC_hxmbKg6vLaLFr86T9KMpFZerh4yWQdNE2Mgy0b1-I)\n[올해 브라우저 근황?](https://medium.com/@euncho/2019%EB%85%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%83%81%ED%83%9C-e73ab86bcbd0?fbclid=IwAR3chxuL4Sb6XTHhL31qxE62notX17bXZLTkEjlVgORyECcpn86bRKjLAQA)\n","source":"_posts/TIL-2019-06-11.md","raw":"---\ntitle: TIL\ndate: 2019-06-11 09:35:42\ncategories:\ntags:\n---\n\n## Array.prototype.reduce()\n\n[reduce()](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)\n\n## 한번 읽어볼 글\n\n[PWA 1편](https://medium.com/@euncho/pwa-%EC%BD%94%EB%93%9C%EB%9E%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-597049b2df40)\n[PWA 2편](https://medium.com/@euncho/pwa%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4-a5be57df5575?fbclid=IwAR07zKmpGoPy12LTC_hxmbKg6vLaLFr86T9KMpFZerh4yWQdNE2Mgy0b1-I)\n[올해 브라우저 근황?](https://medium.com/@euncho/2019%EB%85%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%83%81%ED%83%9C-e73ab86bcbd0?fbclid=IwAR3chxuL4Sb6XTHhL31qxE62notX17bXZLTkEjlVgORyECcpn86bRKjLAQA)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrd004obqwxenw50kj7","content":"<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce()</a></p>\n<h2 id=\"한번-읽어볼-글\"><a href=\"#한번-읽어볼-글\" class=\"headerlink\" title=\"한번 읽어볼 글\"></a>한번 읽어볼 글</h2><p><a href=\"https://medium.com/@euncho/pwa-%EC%BD%94%EB%93%9C%EB%9E%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-597049b2df40\">PWA 1편</a><br><a href=\"https://medium.com/@euncho/pwa%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4-a5be57df5575?fbclid=IwAR07zKmpGoPy12LTC_hxmbKg6vLaLFr86T9KMpFZerh4yWQdNE2Mgy0b1-I\">PWA 2편</a><br><a href=\"https://medium.com/@euncho/2019%EB%85%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%83%81%ED%83%9C-e73ab86bcbd0?fbclid=IwAR3chxuL4Sb6XTHhL31qxE62notX17bXZLTkEjlVgORyECcpn86bRKjLAQA\">올해 브라우저 근황?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Array-prototype-reduce\"><a href=\"#Array-prototype-reduce\" class=\"headerlink\" title=\"Array.prototype.reduce()\"></a>Array.prototype.reduce()</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce()</a></p>\n<h2 id=\"한번-읽어볼-글\"><a href=\"#한번-읽어볼-글\" class=\"headerlink\" title=\"한번 읽어볼 글\"></a>한번 읽어볼 글</h2><p><a href=\"https://medium.com/@euncho/pwa-%EC%BD%94%EB%93%9C%EB%9E%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8-597049b2df40\">PWA 1편</a><br><a href=\"https://medium.com/@euncho/pwa%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0%EB%93%A4-a5be57df5575?fbclid=IwAR07zKmpGoPy12LTC_hxmbKg6vLaLFr86T9KMpFZerh4yWQdNE2Mgy0b1-I\">PWA 2편</a><br><a href=\"https://medium.com/@euncho/2019%EB%85%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EC%83%81%ED%83%9C-e73ab86bcbd0?fbclid=IwAR3chxuL4Sb6XTHhL31qxE62notX17bXZLTkEjlVgORyECcpn86bRKjLAQA\">올해 브라우저 근황?</a></p>\n"},{"title":"TIL","date":"2019-06-14T02:05:03.000Z","_content":"\n## display 속성\n\ndisplay 스타일의 속성들에 대해서 알아보자.\n[참고](https://aboooks.tistory.com/85)\n\n## NodeJS로 크롤링하기\n\n시작하기전에 읽어보면 [좋은 경험 글](https://velog.io/@yesdoing/Node.js-%EC%97%90%EC%84%9C-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0-wtjugync1m)을 찾았다. 읽어보자\n\n## reduce를 이용해서 프로미스를 순차적으로 해결하는 방법\n\n[좋은 글](<https://shiren.dev/2018-10-24-reduce()%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/>)을 공유받았다!\n","source":"_posts/TIL-2019-06-14.md","raw":"---\ntitle: TIL\ndate: 2019-06-14 11:05:03\ncategories:\n    - TIL\ntags:\n---\n\n## display 속성\n\ndisplay 스타일의 속성들에 대해서 알아보자.\n[참고](https://aboooks.tistory.com/85)\n\n## NodeJS로 크롤링하기\n\n시작하기전에 읽어보면 [좋은 경험 글](https://velog.io/@yesdoing/Node.js-%EC%97%90%EC%84%9C-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0-wtjugync1m)을 찾았다. 읽어보자\n\n## reduce를 이용해서 프로미스를 순차적으로 해결하는 방법\n\n[좋은 글](<https://shiren.dev/2018-10-24-reduce()%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/>)을 공유받았다!\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hre004qbqwx14wxa5pj","content":"<h2 id=\"display-속성\"><a href=\"#display-속성\" class=\"headerlink\" title=\"display 속성\"></a>display 속성</h2><p>display 스타일의 속성들에 대해서 알아보자.<br><a href=\"https://aboooks.tistory.com/85\">참고</a></p>\n<h2 id=\"NodeJS로-크롤링하기\"><a href=\"#NodeJS로-크롤링하기\" class=\"headerlink\" title=\"NodeJS로 크롤링하기\"></a>NodeJS로 크롤링하기</h2><p>시작하기전에 읽어보면 <a href=\"https://velog.io/@yesdoing/Node.js-%EC%97%90%EC%84%9C-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0-wtjugync1m\">좋은 경험 글</a>을 찾았다. 읽어보자</p>\n<h2 id=\"reduce를-이용해서-프로미스를-순차적으로-해결하는-방법\"><a href=\"#reduce를-이용해서-프로미스를-순차적으로-해결하는-방법\" class=\"headerlink\" title=\"reduce를 이용해서 프로미스를 순차적으로 해결하는 방법\"></a>reduce를 이용해서 프로미스를 순차적으로 해결하는 방법</h2><p><a href=\"https://shiren.dev/2018-10-24-reduce(\">좋은 글</a>%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/&gt;)을 공유받았다!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"display-속성\"><a href=\"#display-속성\" class=\"headerlink\" title=\"display 속성\"></a>display 속성</h2><p>display 스타일의 속성들에 대해서 알아보자.<br><a href=\"https://aboooks.tistory.com/85\">참고</a></p>\n<h2 id=\"NodeJS로-크롤링하기\"><a href=\"#NodeJS로-크롤링하기\" class=\"headerlink\" title=\"NodeJS로 크롤링하기\"></a>NodeJS로 크롤링하기</h2><p>시작하기전에 읽어보면 <a href=\"https://velog.io/@yesdoing/Node.js-%EC%97%90%EC%84%9C-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0-wtjugync1m\">좋은 경험 글</a>을 찾았다. 읽어보자</p>\n<h2 id=\"reduce를-이용해서-프로미스를-순차적으로-해결하는-방법\"><a href=\"#reduce를-이용해서-프로미스를-순차적으로-해결하는-방법\" class=\"headerlink\" title=\"reduce를 이용해서 프로미스를 순차적으로 해결하는 방법\"></a>reduce를 이용해서 프로미스를 순차적으로 해결하는 방법</h2><p><a href=\"https://shiren.dev/2018-10-24-reduce(\">좋은 글</a>%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%88%9C%EC%B0%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/&gt;)을 공유받았다!</p>\n"},{"title":"TIL","date":"2019-06-19T06:37:36.000Z","_content":"\n## javascript memory model에 관한 글\n\n[읽어보기](https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239)\n","source":"_posts/TIL-2019-06-19.md","raw":"---\ntitle: TIL\ndate: 2019-06-19 15:37:36\ncategories:\n    - TIL\ntags:\n---\n\n## javascript memory model에 관한 글\n\n[읽어보기](https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrf004tbqwx0dv53auk","content":"<h2 id=\"javascript-memory-model에-관한-글\"><a href=\"#javascript-memory-model에-관한-글\" class=\"headerlink\" title=\"javascript memory model에 관한 글\"></a>javascript memory model에 관한 글</h2><p><a href=\"https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239\">읽어보기</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript-memory-model에-관한-글\"><a href=\"#javascript-memory-model에-관한-글\" class=\"headerlink\" title=\"javascript memory model에 관한 글\"></a>javascript memory model에 관한 글</h2><p><a href=\"https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239\">읽어보기</a></p>\n"},{"title":"TIL","date":"2019-06-25T01:51:28.000Z","_content":"\n## URI, URL\n\nURI, URL의 차이를 잘 정리해놓은 글이 있다. [참조](https://blog.lael.be/post/61)\n","source":"_posts/TIL-2019-06-25.md","raw":"---\ntitle: TIL\ndate: 2019-06-25 10:51:28\ncategories:\n    - TIL\ntags:\n---\n\n## URI, URL\n\nURI, URL의 차이를 잘 정리해놓은 글이 있다. [참조](https://blog.lael.be/post/61)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrg004wbqwxc4widwbb","content":"<h2 id=\"URI-URL\"><a href=\"#URI-URL\" class=\"headerlink\" title=\"URI, URL\"></a>URI, URL</h2><p>URI, URL의 차이를 잘 정리해놓은 글이 있다. <a href=\"https://blog.lael.be/post/61\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"URI-URL\"><a href=\"#URI-URL\" class=\"headerlink\" title=\"URI, URL\"></a>URI, URL</h2><p>URI, URL의 차이를 잘 정리해놓은 글이 있다. <a href=\"https://blog.lael.be/post/61\">참조</a></p>\n"},{"title":"TIL","date":"2019-06-10T07:06:33.000Z","_content":"\n## 브라우저 렌더링 엔진\n\n브라우저 렌더링 엔진 관련해서 [좋은 글](https://12bme.tistory.com/208)을 찾았다. 읽어보자!\n\n### 렌더링 엔진 종류\n-   WebKit\n-   Blink\n-   Gecko\n","source":"_posts/TIL-2019-06-10.md","raw":"---\ntitle: TIL\ndate: 2019-06-10 16:06:33\ncategories:\n    - TIL\ntags:\n---\n\n## 브라우저 렌더링 엔진\n\n브라우저 렌더링 엔진 관련해서 [좋은 글](https://12bme.tistory.com/208)을 찾았다. 읽어보자!\n\n### 렌더링 엔진 종류\n-   WebKit\n-   Blink\n-   Gecko\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrh004zbqwx98yf8ohm","content":"<h2 id=\"브라우저-렌더링-엔진\"><a href=\"#브라우저-렌더링-엔진\" class=\"headerlink\" title=\"브라우저 렌더링 엔진\"></a>브라우저 렌더링 엔진</h2><p>브라우저 렌더링 엔진 관련해서 <a href=\"https://12bme.tistory.com/208\">좋은 글</a>을 찾았다. 읽어보자!</p>\n<h3 id=\"렌더링-엔진-종류\"><a href=\"#렌더링-엔진-종류\" class=\"headerlink\" title=\"렌더링 엔진 종류\"></a>렌더링 엔진 종류</h3><ul>\n<li>WebKit</li>\n<li>Blink</li>\n<li>Gecko</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"브라우저-렌더링-엔진\"><a href=\"#브라우저-렌더링-엔진\" class=\"headerlink\" title=\"브라우저 렌더링 엔진\"></a>브라우저 렌더링 엔진</h2><p>브라우저 렌더링 엔진 관련해서 <a href=\"https://12bme.tistory.com/208\">좋은 글</a>을 찾았다. 읽어보자!</p>\n<h3 id=\"렌더링-엔진-종류\"><a href=\"#렌더링-엔진-종류\" class=\"headerlink\" title=\"렌더링 엔진 종류\"></a>렌더링 엔진 종류</h3><ul>\n<li>WebKit</li>\n<li>Blink</li>\n<li>Gecko</li>\n</ul>\n"},{"title":"TIL","date":"2019-06-26T02:36:05.000Z","_content":"\n## [Jest] toBe 와 toEqual은 어떻게 다를까?\n\n테스트 케이스를 작성하면서, toBe와 toEqual을 많이 사용했는데, 둘이 비슷한 기능을 수행하지만, 어떤 차이가 있는지 알고 싶어서 찾아본걸 정리해보자.\n\n[참조](https://stackoverflow.com/questions/45195025/what-is-the-difference-between-tobe-and-toequal-in-jest)\n","source":"_posts/TIL-2019-06-26.md","raw":"---\ntitle: TIL\ndate: 2019-06-26 11:36:05\ncategories:\n    - TIL\ntags:\n---\n\n## [Jest] toBe 와 toEqual은 어떻게 다를까?\n\n테스트 케이스를 작성하면서, toBe와 toEqual을 많이 사용했는데, 둘이 비슷한 기능을 수행하지만, 어떤 차이가 있는지 알고 싶어서 찾아본걸 정리해보자.\n\n[참조](https://stackoverflow.com/questions/45195025/what-is-the-difference-between-tobe-and-toequal-in-jest)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrk0053bqwxcs4ydkci","content":"<h2 id=\"Jest-toBe-와-toEqual은-어떻게-다를까\"><a href=\"#Jest-toBe-와-toEqual은-어떻게-다를까\" class=\"headerlink\" title=\"[Jest] toBe 와 toEqual은 어떻게 다를까?\"></a>[Jest] toBe 와 toEqual은 어떻게 다를까?</h2><p>테스트 케이스를 작성하면서, toBe와 toEqual을 많이 사용했는데, 둘이 비슷한 기능을 수행하지만, 어떤 차이가 있는지 알고 싶어서 찾아본걸 정리해보자.</p>\n<p><a href=\"https://stackoverflow.com/questions/45195025/what-is-the-difference-between-tobe-and-toequal-in-jest\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Jest-toBe-와-toEqual은-어떻게-다를까\"><a href=\"#Jest-toBe-와-toEqual은-어떻게-다를까\" class=\"headerlink\" title=\"[Jest] toBe 와 toEqual은 어떻게 다를까?\"></a>[Jest] toBe 와 toEqual은 어떻게 다를까?</h2><p>테스트 케이스를 작성하면서, toBe와 toEqual을 많이 사용했는데, 둘이 비슷한 기능을 수행하지만, 어떤 차이가 있는지 알고 싶어서 찾아본걸 정리해보자.</p>\n<p><a href=\"https://stackoverflow.com/questions/45195025/what-is-the-difference-between-tobe-and-toequal-in-jest\">참조</a></p>\n"},{"title":"TIL","date":"2019-07-25T04:53:45.000Z","_content":"\n## 브라우저로 웹사이트 접속시 일어나는 과정\n\n잘 정리해둔 글이있다 참고하자! [참고](https://preamtree.tistory.com/35)\n\n-   DNS 서버는 누가 만들고, 관리하는거지?\n    -> 우리나라의 경우 통신사 별로 지정된 DNS서버가 있다고 함\n","source":"_posts/TIL-2019-07-25.md","raw":"---\ntitle: TIL\ndate: 2019-07-25 13:53:45\ncategories:\n    - TIL\ntags:\n---\n\n## 브라우저로 웹사이트 접속시 일어나는 과정\n\n잘 정리해둔 글이있다 참고하자! [참고](https://preamtree.tistory.com/35)\n\n-   DNS 서버는 누가 만들고, 관리하는거지?\n    -> 우리나라의 경우 통신사 별로 지정된 DNS서버가 있다고 함\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrk0056bqwxg1jg0uzw","content":"<h2 id=\"브라우저로-웹사이트-접속시-일어나는-과정\"><a href=\"#브라우저로-웹사이트-접속시-일어나는-과정\" class=\"headerlink\" title=\"브라우저로 웹사이트 접속시 일어나는 과정\"></a>브라우저로 웹사이트 접속시 일어나는 과정</h2><p>잘 정리해둔 글이있다 참고하자! <a href=\"https://preamtree.tistory.com/35\">참고</a></p>\n<ul>\n<li>DNS 서버는 누가 만들고, 관리하는거지?<br>-&gt; 우리나라의 경우 통신사 별로 지정된 DNS서버가 있다고 함</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"브라우저로-웹사이트-접속시-일어나는-과정\"><a href=\"#브라우저로-웹사이트-접속시-일어나는-과정\" class=\"headerlink\" title=\"브라우저로 웹사이트 접속시 일어나는 과정\"></a>브라우저로 웹사이트 접속시 일어나는 과정</h2><p>잘 정리해둔 글이있다 참고하자! <a href=\"https://preamtree.tistory.com/35\">참고</a></p>\n<ul>\n<li>DNS 서버는 누가 만들고, 관리하는거지?<br>-&gt; 우리나라의 경우 통신사 별로 지정된 DNS서버가 있다고 함</li>\n</ul>\n"},{"title":"TIL","date":"2019-07-02T05:56:57.000Z","_content":"\n## 스타일 가이드\n\n웹 디자인을 위한 괜찮은 사이트를 공유받았다. 꼭 읽어보자! [참조](http://styleguide.co.kr/index.php)\n\n## 프론트엔드 테스트 전략\n\n[참조](https://meetup.toast.com/posts/180)\n","source":"_posts/TIL-2019-07-02.md","raw":"---\ntitle: TIL\ndate: 2019-07-02 14:56:57\ncategories:\n    - TIL\ntags:\n---\n\n## 스타일 가이드\n\n웹 디자인을 위한 괜찮은 사이트를 공유받았다. 꼭 읽어보자! [참조](http://styleguide.co.kr/index.php)\n\n## 프론트엔드 테스트 전략\n\n[참조](https://meetup.toast.com/posts/180)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrn0059bqwxgnfchsvw","content":"<h2 id=\"스타일-가이드\"><a href=\"#스타일-가이드\" class=\"headerlink\" title=\"스타일 가이드\"></a>스타일 가이드</h2><p>웹 디자인을 위한 괜찮은 사이트를 공유받았다. 꼭 읽어보자! <a href=\"http://styleguide.co.kr/index.php\">참조</a></p>\n<h2 id=\"프론트엔드-테스트-전략\"><a href=\"#프론트엔드-테스트-전략\" class=\"headerlink\" title=\"프론트엔드 테스트 전략\"></a>프론트엔드 테스트 전략</h2><p><a href=\"https://meetup.toast.com/posts/180\">참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"스타일-가이드\"><a href=\"#스타일-가이드\" class=\"headerlink\" title=\"스타일 가이드\"></a>스타일 가이드</h2><p>웹 디자인을 위한 괜찮은 사이트를 공유받았다. 꼭 읽어보자! <a href=\"http://styleguide.co.kr/index.php\">참조</a></p>\n<h2 id=\"프론트엔드-테스트-전략\"><a href=\"#프론트엔드-테스트-전략\" class=\"headerlink\" title=\"프론트엔드 테스트 전략\"></a>프론트엔드 테스트 전략</h2><p><a href=\"https://meetup.toast.com/posts/180\">참조</a></p>\n"},{"title":"TIL","date":"2019-07-04T05:13:28.000Z","_content":"\n## FE 가이드\n\n[참고](https://ui.toast.com/fe-guide/ko/)\n","source":"_posts/TIL-2019-07-04.md","raw":"---\ntitle: TIL\ndate: 2019-07-04 14:13:28\ncategories:\n    - TIL\ntags:\n---\n\n## FE 가이드\n\n[참고](https://ui.toast.com/fe-guide/ko/)\n","slug":"TIL","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hro005bbqwxbu8q2ipf","content":"<h2 id=\"FE-가이드\"><a href=\"#FE-가이드\" class=\"headerlink\" title=\"FE 가이드\"></a>FE 가이드</h2><p><a href=\"https://ui.toast.com/fe-guide/ko/\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"FE-가이드\"><a href=\"#FE-가이드\" class=\"headerlink\" title=\"FE 가이드\"></a>FE 가이드</h2><p><a href=\"https://ui.toast.com/fe-guide/ko/\">참고</a></p>\n"},{"title":"Test","_content":"\n# 패턴\n\n## Given, When, Then\n\n[참고](https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md)\n\n## Testing Best Practices\n\n- https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md\n\n## input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기\n\n## getBy*, queryBy*\n\n`getBy*` 는 get을 했을때 못찾으면 그 자리에서 `바로 에러`를 냄\n\n`queryBy*`는 `null`을 냄\n\n## test, webpack 이슈\n\n자바스크립트는 css 파일이나 image 파일들을 import할 수 없습니다. 그래서 webpack은 css-loader나 file-loader등을 사용해서 자바스크립트가 해당 리소스를 불러올 수 있도록 해줘야 합니다. 하지만 테스트 코드에서는 webpack으로 빌드한게 아니기 때문에 올바르게 동작하지 않습니다. 따라서 실제 코드에서는 동작하지만 테스트 코드에서는 필요없는 리소스들은 mocking해야 합니다.\n\njest.config.js에 다음과 같이 코드를 추가해서 리소스 파일을 불러올 때 마다 내가 지정한 가짜 코드를 불러오도록 할 수 있습니다.\n\n```javascript\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/fileMock.js'\n  },\n};\n```\n\n`<rootDir>/__mocks__/fileMock.js`\n\n``` javascript\nmodule.exports = {};\n```\n\nSee also\n\n- https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring\n\n## jest mock 관련 문서\n\n- https://dev.to/dylanju/jest-mocks-18l9\n","source":"_posts/Test.md","raw":"---\ntitle: Test\n---\n\n# 패턴\n\n## Given, When, Then\n\n[참고](https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md)\n\n## Testing Best Practices\n\n- https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md\n\n## input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기\n\n## getBy*, queryBy*\n\n`getBy*` 는 get을 했을때 못찾으면 그 자리에서 `바로 에러`를 냄\n\n`queryBy*`는 `null`을 냄\n\n## test, webpack 이슈\n\n자바스크립트는 css 파일이나 image 파일들을 import할 수 없습니다. 그래서 webpack은 css-loader나 file-loader등을 사용해서 자바스크립트가 해당 리소스를 불러올 수 있도록 해줘야 합니다. 하지만 테스트 코드에서는 webpack으로 빌드한게 아니기 때문에 올바르게 동작하지 않습니다. 따라서 실제 코드에서는 동작하지만 테스트 코드에서는 필요없는 리소스들은 mocking해야 합니다.\n\njest.config.js에 다음과 같이 코드를 추가해서 리소스 파일을 불러올 때 마다 내가 지정한 가짜 코드를 불러오도록 할 수 있습니다.\n\n```javascript\nmodule.exports = {\n  moduleNameMapper: {\n    '\\\\.(css|less)$': '<rootDir>/__mocks__/fileMock.js'\n  },\n};\n```\n\n`<rootDir>/__mocks__/fileMock.js`\n\n``` javascript\nmodule.exports = {};\n```\n\nSee also\n\n- https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring\n\n## jest mock 관련 문서\n\n- https://dev.to/dylanju/jest-mocks-18l9\n","slug":"Test","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-15T05:26:21.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrq005ebqwx7gu973ge","content":"<h1 id=\"패턴\"><a href=\"#패턴\" class=\"headerlink\" title=\"패턴\"></a>패턴</h1><h2 id=\"Given-When-Then\"><a href=\"#Given-When-Then\" class=\"headerlink\" title=\"Given, When, Then\"></a>Given, When, Then</h2><p><a href=\"https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\">참고</a></p>\n<h2 id=\"Testing-Best-Practices\"><a href=\"#Testing-Best-Practices\" class=\"headerlink\" title=\"Testing Best Practices\"></a>Testing Best Practices</h2><ul>\n<li><a href=\"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md\">https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md</a></li>\n</ul>\n<h2 id=\"input에-있는-값을-찾게-테스트하려면-getByDisplayValue를-사용하기\"><a href=\"#input에-있는-값을-찾게-테스트하려면-getByDisplayValue를-사용하기\" class=\"headerlink\" title=\"input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기\"></a>input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기</h2><h2 id=\"getBy-queryBy\"><a href=\"#getBy-queryBy\" class=\"headerlink\" title=\"getBy, queryBy\"></a>getBy<em>, queryBy</em></h2><p><code>getBy*</code> 는 get을 했을때 못찾으면 그 자리에서 <code>바로 에러</code>를 냄</p>\n<p><code>queryBy*</code>는 <code>null</code>을 냄</p>\n<h2 id=\"test-webpack-이슈\"><a href=\"#test-webpack-이슈\" class=\"headerlink\" title=\"test, webpack 이슈\"></a>test, webpack 이슈</h2><p>자바스크립트는 css 파일이나 image 파일들을 import할 수 없습니다. 그래서 webpack은 css-loader나 file-loader등을 사용해서 자바스크립트가 해당 리소스를 불러올 수 있도록 해줘야 합니다. 하지만 테스트 코드에서는 webpack으로 빌드한게 아니기 때문에 올바르게 동작하지 않습니다. 따라서 실제 코드에서는 동작하지만 테스트 코드에서는 필요없는 리소스들은 mocking해야 합니다.</p>\n<p>jest.config.js에 다음과 같이 코드를 추가해서 리소스 파일을 불러올 때 마다 내가 지정한 가짜 코드를 불러오도록 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  moduleNameMapper: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;\\\\.(css|less)$&#x27;</span>: <span class=\"string\">&#x27;&lt;rootDir&gt;/__mocks__/fileMock.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;rootDir&gt;/__mocks__/fileMock.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>See also</p>\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring\">https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring</a></li>\n</ul>\n<h2 id=\"jest-mock-관련-문서\"><a href=\"#jest-mock-관련-문서\" class=\"headerlink\" title=\"jest mock 관련 문서\"></a>jest mock 관련 문서</h2><ul>\n<li><a href=\"https://dev.to/dylanju/jest-mocks-18l9\">https://dev.to/dylanju/jest-mocks-18l9</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"패턴\"><a href=\"#패턴\" class=\"headerlink\" title=\"패턴\"></a>패턴</h1><h2 id=\"Given-When-Then\"><a href=\"#Given-When-Then\" class=\"headerlink\" title=\"Given, When, Then\"></a>Given, When, Then</h2><p><a href=\"https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\">참고</a></p>\n<h2 id=\"Testing-Best-Practices\"><a href=\"#Testing-Best-Practices\" class=\"headerlink\" title=\"Testing Best Practices\"></a>Testing Best Practices</h2><ul>\n<li><a href=\"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md\">https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme.kr.md</a></li>\n</ul>\n<h2 id=\"input에-있는-값을-찾게-테스트하려면-getByDisplayValue를-사용하기\"><a href=\"#input에-있는-값을-찾게-테스트하려면-getByDisplayValue를-사용하기\" class=\"headerlink\" title=\"input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기\"></a>input에 있는 값을 찾게 테스트하려면 getByDisplayValue를 사용하기</h2><h2 id=\"getBy-queryBy\"><a href=\"#getBy-queryBy\" class=\"headerlink\" title=\"getBy, queryBy\"></a>getBy<em>, queryBy</em></h2><p><code>getBy*</code> 는 get을 했을때 못찾으면 그 자리에서 <code>바로 에러</code>를 냄</p>\n<p><code>queryBy*</code>는 <code>null</code>을 냄</p>\n<h2 id=\"test-webpack-이슈\"><a href=\"#test-webpack-이슈\" class=\"headerlink\" title=\"test, webpack 이슈\"></a>test, webpack 이슈</h2><p>자바스크립트는 css 파일이나 image 파일들을 import할 수 없습니다. 그래서 webpack은 css-loader나 file-loader등을 사용해서 자바스크립트가 해당 리소스를 불러올 수 있도록 해줘야 합니다. 하지만 테스트 코드에서는 webpack으로 빌드한게 아니기 때문에 올바르게 동작하지 않습니다. 따라서 실제 코드에서는 동작하지만 테스트 코드에서는 필요없는 리소스들은 mocking해야 합니다.</p>\n<p>jest.config.js에 다음과 같이 코드를 추가해서 리소스 파일을 불러올 때 마다 내가 지정한 가짜 코드를 불러오도록 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  moduleNameMapper: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;\\\\.(css|less)$&#x27;</span>: <span class=\"string\">&#x27;&lt;rootDir&gt;/__mocks__/fileMock.js&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;rootDir&gt;/__mocks__/fileMock.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>See also</p>\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring\">https://jestjs.io/docs/en/configuration#modulenamemapper-objectstring-string--arraystring</a></li>\n</ul>\n<h2 id=\"jest-mock-관련-문서\"><a href=\"#jest-mock-관련-문서\" class=\"headerlink\" title=\"jest mock 관련 문서\"></a>jest mock 관련 문서</h2><ul>\n<li><a href=\"https://dev.to/dylanju/jest-mocks-18l9\">https://dev.to/dylanju/jest-mocks-18l9</a></li>\n</ul>\n"},{"title":"Typescript-Quick-Start","date":"2019-04-15T14:47:30.000Z","_content":"\n# TypeScript Quick Start 책 정리\n오늘부터 Typescript Quick Start 책을 읽고 정리해보겠습니다!\n\n# 구성 및 안내\n1. Node.js 설치!\n2. Typescript 설치! (책의 버전은 2.7.2인데, 현재는 3.4 버전까지 나왔습니다.)\n타입스크립트를 설치했다면 타입스크립트 컴파일러인 tsc를 이용해 컴파일을 할 수 있습니다.\nhello.ts 파일을 명령 프롬프트에서 컴파일하고 실행하기\n``` bash\n    tsc hello.ts    <-컴파일\n    node hello.js   <-실행\n```\n이것 말고도 다양한 명령어들이 존재합니다.\n\n# 1. 타입스크립트 소개\n## 1.1 ECMA 스크립트와 타입스크립트\n","source":"_posts/Typescript-Quick-Start.md","raw":"---\ntitle: Typescript-Quick-Start\ndate: 2019-04-15 23:47:30\ncategories:\n    - 책 정리\n    - Typescript\ntags:\n    - Typescript\n---\n\n# TypeScript Quick Start 책 정리\n오늘부터 Typescript Quick Start 책을 읽고 정리해보겠습니다!\n\n# 구성 및 안내\n1. Node.js 설치!\n2. Typescript 설치! (책의 버전은 2.7.2인데, 현재는 3.4 버전까지 나왔습니다.)\n타입스크립트를 설치했다면 타입스크립트 컴파일러인 tsc를 이용해 컴파일을 할 수 있습니다.\nhello.ts 파일을 명령 프롬프트에서 컴파일하고 실행하기\n``` bash\n    tsc hello.ts    <-컴파일\n    node hello.js   <-실행\n```\n이것 말고도 다양한 명령어들이 존재합니다.\n\n# 1. 타입스크립트 소개\n## 1.1 ECMA 스크립트와 타입스크립트\n","slug":"Typescript-Quick-Start","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrr005hbqwxckxcbk0t","content":"<h1 id=\"TypeScript-Quick-Start-책-정리\"><a href=\"#TypeScript-Quick-Start-책-정리\" class=\"headerlink\" title=\"TypeScript Quick Start 책 정리\"></a>TypeScript Quick Start 책 정리</h1><p>오늘부터 Typescript Quick Start 책을 읽고 정리해보겠습니다!</p>\n<h1 id=\"구성-및-안내\"><a href=\"#구성-및-안내\" class=\"headerlink\" title=\"구성 및 안내\"></a>구성 및 안내</h1><ol>\n<li>Node.js 설치!</li>\n<li>Typescript 설치! (책의 버전은 2.7.2인데, 현재는 3.4 버전까지 나왔습니다.)<br>타입스크립트를 설치했다면 타입스크립트 컴파일러인 tsc를 이용해 컴파일을 할 수 있습니다.<br>hello.ts 파일을 명령 프롬프트에서 컴파일하고 실행하기<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tsc hello.ts    &lt;-컴파일</span><br><span class=\"line\">node hello.js   &lt;-실행</span><br></pre></td></tr></table></figure>\n이것 말고도 다양한 명령어들이 존재합니다.</li>\n</ol>\n<h1 id=\"1-타입스크립트-소개\"><a href=\"#1-타입스크립트-소개\" class=\"headerlink\" title=\"1. 타입스크립트 소개\"></a>1. 타입스크립트 소개</h1><h2 id=\"1-1-ECMA-스크립트와-타입스크립트\"><a href=\"#1-1-ECMA-스크립트와-타입스크립트\" class=\"headerlink\" title=\"1.1 ECMA 스크립트와 타입스크립트\"></a>1.1 ECMA 스크립트와 타입스크립트</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript-Quick-Start-책-정리\"><a href=\"#TypeScript-Quick-Start-책-정리\" class=\"headerlink\" title=\"TypeScript Quick Start 책 정리\"></a>TypeScript Quick Start 책 정리</h1><p>오늘부터 Typescript Quick Start 책을 읽고 정리해보겠습니다!</p>\n<h1 id=\"구성-및-안내\"><a href=\"#구성-및-안내\" class=\"headerlink\" title=\"구성 및 안내\"></a>구성 및 안내</h1><ol>\n<li>Node.js 설치!</li>\n<li>Typescript 설치! (책의 버전은 2.7.2인데, 현재는 3.4 버전까지 나왔습니다.)<br>타입스크립트를 설치했다면 타입스크립트 컴파일러인 tsc를 이용해 컴파일을 할 수 있습니다.<br>hello.ts 파일을 명령 프롬프트에서 컴파일하고 실행하기<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tsc hello.ts    &lt;-컴파일</span><br><span class=\"line\">node hello.js   &lt;-실행</span><br></pre></td></tr></table></figure>\n이것 말고도 다양한 명령어들이 존재합니다.</li>\n</ol>\n<h1 id=\"1-타입스크립트-소개\"><a href=\"#1-타입스크립트-소개\" class=\"headerlink\" title=\"1. 타입스크립트 소개\"></a>1. 타입스크립트 소개</h1><h2 id=\"1-1-ECMA-스크립트와-타입스크립트\"><a href=\"#1-1-ECMA-스크립트와-타입스크립트\" class=\"headerlink\" title=\"1.1 ECMA 스크립트와 타입스크립트\"></a>1.1 ECMA 스크립트와 타입스크립트</h2>"},{"title":"Typescript","_content":"\n# Typescript Wiki\n\n## Union type array map\n\nUnion 타입 배열을 맵핑할때 발생한 문제가 있다. Union type의 경우 함수인 멤버(map)도 union 타입으로 지정된다는 것!\n`Array<Test1|Test2> and (Test1 | Test2)[]` 와 같이 타입을 지정해주면 됨.\n[참고](https://stackoverflow.com/questions/49510832/typescript-how-to-map-over-union-array-type)\n\n그런데 또 다른 문제는 map 내에 인자값의 타입이 any로 지정되버림..\n\n## Record<Keys, Type>\n\n`Type`이란 type을 가지는 `Keys` 속성의 집합으로 타입을 구성한다. type의 property를 다른 type에 매핑하는데 사용한다.\n\n## Partial<Type>\n\n`Type`의 모든 property를 optional type으로 가진다. 주어진 type의 모든 하위 type을 나타내는 type을 반환합니다.\n\n## issues\n\n### A computed property name must be of type 'string', 'number', 'symbol', or 'any'\n\n```typescript\nexport enum MyEnum {\n  one = 'stringOne',\n  two = 'stringTwo',\n}\n\nexport const someMap = {\n  [ MyEnum.one ]: 'valueOne',\n  [ MyEnum.two ]: 'valueTwo',\n};\n```\n\n위와 같은 상황에서 타입 에러 발생\n찾아보니 몇가지 방법이 있지만, `as string`을 추가하는 방식으로 해결\n\n```typescript\nexport const someMap: ForceStringType = {\n  [ MyEnum.one as string ]: 'valueOne',\n  [ MyEnum.two as string ]: 'valueTwo',\n};\n```\n\n- https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b","source":"_posts/Typescript.md","raw":"---\ntitle: Typescript\n---\n\n# Typescript Wiki\n\n## Union type array map\n\nUnion 타입 배열을 맵핑할때 발생한 문제가 있다. Union type의 경우 함수인 멤버(map)도 union 타입으로 지정된다는 것!\n`Array<Test1|Test2> and (Test1 | Test2)[]` 와 같이 타입을 지정해주면 됨.\n[참고](https://stackoverflow.com/questions/49510832/typescript-how-to-map-over-union-array-type)\n\n그런데 또 다른 문제는 map 내에 인자값의 타입이 any로 지정되버림..\n\n## Record<Keys, Type>\n\n`Type`이란 type을 가지는 `Keys` 속성의 집합으로 타입을 구성한다. type의 property를 다른 type에 매핑하는데 사용한다.\n\n## Partial<Type>\n\n`Type`의 모든 property를 optional type으로 가진다. 주어진 type의 모든 하위 type을 나타내는 type을 반환합니다.\n\n## issues\n\n### A computed property name must be of type 'string', 'number', 'symbol', or 'any'\n\n```typescript\nexport enum MyEnum {\n  one = 'stringOne',\n  two = 'stringTwo',\n}\n\nexport const someMap = {\n  [ MyEnum.one ]: 'valueOne',\n  [ MyEnum.two ]: 'valueTwo',\n};\n```\n\n위와 같은 상황에서 타입 에러 발생\n찾아보니 몇가지 방법이 있지만, `as string`을 추가하는 방식으로 해결\n\n```typescript\nexport const someMap: ForceStringType = {\n  [ MyEnum.one as string ]: 'valueOne',\n  [ MyEnum.two as string ]: 'valueTwo',\n};\n```\n\n- https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b","slug":"Typescript","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrr005lbqwxaa7nh1ft","content":"<h1 id=\"Typescript-Wiki\"><a href=\"#Typescript-Wiki\" class=\"headerlink\" title=\"Typescript Wiki\"></a>Typescript Wiki</h1><h2 id=\"Union-type-array-map\"><a href=\"#Union-type-array-map\" class=\"headerlink\" title=\"Union type array map\"></a>Union type array map</h2><p>Union 타입 배열을 맵핑할때 발생한 문제가 있다. Union type의 경우 함수인 멤버(map)도 union 타입으로 지정된다는 것!<br><code>Array&lt;Test1|Test2&gt; and (Test1 | Test2)[]</code> 와 같이 타입을 지정해주면 됨.<br><a href=\"https://stackoverflow.com/questions/49510832/typescript-how-to-map-over-union-array-type\">참고</a></p>\n<p>그런데 또 다른 문제는 map 내에 인자값의 타입이 any로 지정되버림..</p>\n<h2 id=\"Record-lt-Keys-Type-gt\"><a href=\"#Record-lt-Keys-Type-gt\" class=\"headerlink\" title=\"Record&lt;Keys, Type&gt;\"></a>Record&lt;Keys, Type&gt;</h2><p><code>Type</code>이란 type을 가지는 <code>Keys</code> 속성의 집합으로 타입을 구성한다. type의 property를 다른 type에 매핑하는데 사용한다.</p>\n<h2 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial<Type></h2><p><code>Type</code>의 모든 property를 optional type으로 가진다. 주어진 type의 모든 하위 type을 나타내는 type을 반환합니다.</p>\n<h2 id=\"issues\"><a href=\"#issues\" class=\"headerlink\" title=\"issues\"></a>issues</h2><h3 id=\"A-computed-property-name-must-be-of-type-‘string’-‘number’-‘symbol’-or-‘any’\"><a href=\"#A-computed-property-name-must-be-of-type-‘string’-‘number’-‘symbol’-or-‘any’\" class=\"headerlink\" title=\"A computed property name must be of type ‘string’, ‘number’, ‘symbol’, or ‘any’\"></a>A computed property name must be of type ‘string’, ‘number’, ‘symbol’, or ‘any’</h3><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"built_in\">enum</span> MyEnum &#123;</span><br><span class=\"line\">  one = <span class=\"string\">&#x27;stringOne&#x27;</span>,</span><br><span class=\"line\">  two = <span class=\"string\">&#x27;stringTwo&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> someMap = &#123;</span><br><span class=\"line\">  [ MyEnum.one ]: <span class=\"string\">&#x27;valueOne&#x27;</span>,</span><br><span class=\"line\">  [ MyEnum.two ]: <span class=\"string\">&#x27;valueTwo&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>위와 같은 상황에서 타입 에러 발생<br>찾아보니 몇가지 방법이 있지만, <code>as string</code>을 추가하는 방식으로 해결</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> someMap: ForceStringType = &#123;</span><br><span class=\"line\">  [ MyEnum.one <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> ]: <span class=\"string\">&#x27;valueOne&#x27;</span>,</span><br><span class=\"line\">  [ MyEnum.two <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> ]: <span class=\"string\">&#x27;valueTwo&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b\">https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Typescript-Wiki\"><a href=\"#Typescript-Wiki\" class=\"headerlink\" title=\"Typescript Wiki\"></a>Typescript Wiki</h1><h2 id=\"Union-type-array-map\"><a href=\"#Union-type-array-map\" class=\"headerlink\" title=\"Union type array map\"></a>Union type array map</h2><p>Union 타입 배열을 맵핑할때 발생한 문제가 있다. Union type의 경우 함수인 멤버(map)도 union 타입으로 지정된다는 것!<br><code>Array&lt;Test1|Test2&gt; and (Test1 | Test2)[]</code> 와 같이 타입을 지정해주면 됨.<br><a href=\"https://stackoverflow.com/questions/49510832/typescript-how-to-map-over-union-array-type\">참고</a></p>\n<p>그런데 또 다른 문제는 map 내에 인자값의 타입이 any로 지정되버림..</p>\n<h2 id=\"Record-lt-Keys-Type-gt\"><a href=\"#Record-lt-Keys-Type-gt\" class=\"headerlink\" title=\"Record&lt;Keys, Type&gt;\"></a>Record&lt;Keys, Type&gt;</h2><p><code>Type</code>이란 type을 가지는 <code>Keys</code> 속성의 집합으로 타입을 구성한다. type의 property를 다른 type에 매핑하는데 사용한다.</p>\n<h2 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial<Type></h2><p><code>Type</code>의 모든 property를 optional type으로 가진다. 주어진 type의 모든 하위 type을 나타내는 type을 반환합니다.</p>\n<h2 id=\"issues\"><a href=\"#issues\" class=\"headerlink\" title=\"issues\"></a>issues</h2><h3 id=\"A-computed-property-name-must-be-of-type-‘string’-‘number’-‘symbol’-or-‘any’\"><a href=\"#A-computed-property-name-must-be-of-type-‘string’-‘number’-‘symbol’-or-‘any’\" class=\"headerlink\" title=\"A computed property name must be of type ‘string’, ‘number’, ‘symbol’, or ‘any’\"></a>A computed property name must be of type ‘string’, ‘number’, ‘symbol’, or ‘any’</h3><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"built_in\">enum</span> MyEnum &#123;</span><br><span class=\"line\">  one = <span class=\"string\">&#x27;stringOne&#x27;</span>,</span><br><span class=\"line\">  two = <span class=\"string\">&#x27;stringTwo&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> someMap = &#123;</span><br><span class=\"line\">  [ MyEnum.one ]: <span class=\"string\">&#x27;valueOne&#x27;</span>,</span><br><span class=\"line\">  [ MyEnum.two ]: <span class=\"string\">&#x27;valueTwo&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>위와 같은 상황에서 타입 에러 발생<br>찾아보니 몇가지 방법이 있지만, <code>as string</code>을 추가하는 방식으로 해결</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> someMap: ForceStringType = &#123;</span><br><span class=\"line\">  [ MyEnum.one <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> ]: <span class=\"string\">&#x27;valueOne&#x27;</span>,</span><br><span class=\"line\">  [ MyEnum.two <span class=\"keyword\">as</span> <span class=\"built_in\">string</span> ]: <span class=\"string\">&#x27;valueTwo&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b\">https://stackoverflow.com/questions/44110641/typescript-a-computed-property-name-in-a-type-literal-must-directly-refer-to-a-b</a></li>\n</ul>\n"},{"title":"Webpack","_content":"\n# Webpack\n## webpack-preprocessor-loader\n\n[참고](https://github.com/afterwind-io/preprocessor-loader)\n\n아래와 같이 주석으로 조건문을 사용해서 환경에 따라 코드를 포함시킬 수 있습니다.\n\n``` markdown\n// #!if ENV === 'development'\n여기에 작성되는 코드는 development 환경에서만 포함됩니다.\n// #!endif\n```\n\n## [HtmlWebpackPlugin](https://webpack.js.org/plugins/html-webpack-plugin/)\n\nhtmlWebpackPlugin > bundle 생성해주는걸 도와줌 (index.html)\n\n- entry, output 설정\n- plugin을 추가해줘야함\n    - template: index.html\n    - 이렇게 하면 dist/index.html에 body가 생김\n","source":"_posts/Webpack.md","raw":"---\ntitle: Webpack\n---\n\n# Webpack\n## webpack-preprocessor-loader\n\n[참고](https://github.com/afterwind-io/preprocessor-loader)\n\n아래와 같이 주석으로 조건문을 사용해서 환경에 따라 코드를 포함시킬 수 있습니다.\n\n``` markdown\n// #!if ENV === 'development'\n여기에 작성되는 코드는 development 환경에서만 포함됩니다.\n// #!endif\n```\n\n## [HtmlWebpackPlugin](https://webpack.js.org/plugins/html-webpack-plugin/)\n\nhtmlWebpackPlugin > bundle 생성해주는걸 도와줌 (index.html)\n\n- entry, output 설정\n- plugin을 추가해줘야함\n    - template: index.html\n    - 이렇게 하면 dist/index.html에 body가 생김\n","slug":"Webpack","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-21T16:18:54.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrs005obqwx3xjx1t4n","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><h2 id=\"webpack-preprocessor-loader\"><a href=\"#webpack-preprocessor-loader\" class=\"headerlink\" title=\"webpack-preprocessor-loader\"></a>webpack-preprocessor-loader</h2><p><a href=\"https://github.com/afterwind-io/preprocessor-loader\">참고</a></p>\n<p>아래와 같이 주석으로 조건문을 사용해서 환경에 따라 코드를 포함시킬 수 있습니다.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">// #!if ENV === &#x27;development&#x27;</span><br><span class=\"line\">여기에 작성되는 코드는 development 환경에서만 포함됩니다.</span><br><span class=\"line\">// #!endif</span><br></pre></td></tr></table></figure>\n<h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a><a href=\"https://webpack.js.org/plugins/html-webpack-plugin/\">HtmlWebpackPlugin</a></h2><p>htmlWebpackPlugin &gt; bundle 생성해주는걸 도와줌 (index.html)</p>\n<ul>\n<li>entry, output 설정</li>\n<li>plugin을 추가해줘야함<ul>\n<li>template: index.html</li>\n<li>이렇게 하면 dist/index.html에 body가 생김</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><h2 id=\"webpack-preprocessor-loader\"><a href=\"#webpack-preprocessor-loader\" class=\"headerlink\" title=\"webpack-preprocessor-loader\"></a>webpack-preprocessor-loader</h2><p><a href=\"https://github.com/afterwind-io/preprocessor-loader\">참고</a></p>\n<p>아래와 같이 주석으로 조건문을 사용해서 환경에 따라 코드를 포함시킬 수 있습니다.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">// #!if ENV === &#x27;development&#x27;</span><br><span class=\"line\">여기에 작성되는 코드는 development 환경에서만 포함됩니다.</span><br><span class=\"line\">// #!endif</span><br></pre></td></tr></table></figure>\n<h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a><a href=\"https://webpack.js.org/plugins/html-webpack-plugin/\">HtmlWebpackPlugin</a></h2><p>htmlWebpackPlugin &gt; bundle 생성해주는걸 도와줌 (index.html)</p>\n<ul>\n<li>entry, output 설정</li>\n<li>plugin을 추가해줘야함<ul>\n<li>template: index.html</li>\n<li>이렇게 하면 dist/index.html에 body가 생김</li>\n</ul>\n</li>\n</ul>\n"},{"title":"TIL","date":"2021-04-14T04:54:49.000Z","_content":"\n## URISearchParams\n\nhttps://developer.mozilla.org/ko/docs/Web/API/URLSearchParams\n\n특정 쿼리 스트링이 있는지 확인하고, 제거하는데 사용함.\n\n더 다양한 기능들이 있으니 살펴보자.\n","source":"_posts/TIL-2021-04-14.md","raw":"---\ntitle: TIL\ndate: 2021-04-14 13:54:49\ncategories:\ntags:\n---\n\n## URISearchParams\n\nhttps://developer.mozilla.org/ko/docs/Web/API/URLSearchParams\n\n특정 쿼리 스트링이 있는지 확인하고, 제거하는데 사용함.\n\n더 다양한 기능들이 있으니 살펴보자.\n","slug":"TIL","published":1,"updated":"2021-04-14T04:56:15.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrt005qbqwxeixrdxrw","content":"<h2 id=\"URISearchParams\"><a href=\"#URISearchParams\" class=\"headerlink\" title=\"URISearchParams\"></a>URISearchParams</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams\">https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams</a></p>\n<p>특정 쿼리 스트링이 있는지 확인하고, 제거하는데 사용함.</p>\n<p>더 다양한 기능들이 있으니 살펴보자.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"URISearchParams\"><a href=\"#URISearchParams\" class=\"headerlink\" title=\"URISearchParams\"></a>URISearchParams</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams\">https://developer.mozilla.org/ko/docs/Web/API/URLSearchParams</a></p>\n<p>특정 쿼리 스트링이 있는지 확인하고, 제거하는데 사용함.</p>\n<p>더 다양한 기능들이 있으니 살펴보자.</p>\n"},{"title":"Week2-1","_content":"\n# Week2, first assignment\n\n## 피드백\n\n### 모듈 사이에 공백 추가요청\n\nlint중에 ordered-imports를 사용해서 파일 형식에 따라 순서를 잡아주는게 있는데 이걸 쓰기도 합니다 :)\n\n### 클릭 함수 공통 처리\n\n### 변수, 함수 네이밍\n\n### 이벤트 핸들러 네이밍\n\n`onClick={handleClick}`과 같이 컨벤션을 맞춰주는건 어떨까요??\n\n참고: https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\n","source":"_posts/Week2-1.md","raw":"---\ntitle: Week2-1\n---\n\n# Week2, first assignment\n\n## 피드백\n\n### 모듈 사이에 공백 추가요청\n\nlint중에 ordered-imports를 사용해서 파일 형식에 따라 순서를 잡아주는게 있는데 이걸 쓰기도 합니다 :)\n\n### 클릭 함수 공통 처리\n\n### 변수, 함수 네이밍\n\n### 이벤트 핸들러 네이밍\n\n`onClick={handleClick}`과 같이 컨벤션을 맞춰주는건 어떨까요??\n\n참고: https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\n","slug":"Week2-1","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrt005ubqwxe8e2hlp4","content":"<h1 id=\"Week2-first-assignment\"><a href=\"#Week2-first-assignment\" class=\"headerlink\" title=\"Week2, first assignment\"></a>Week2, first assignment</h1><h2 id=\"피드백\"><a href=\"#피드백\" class=\"headerlink\" title=\"피드백\"></a>피드백</h2><h3 id=\"모듈-사이에-공백-추가요청\"><a href=\"#모듈-사이에-공백-추가요청\" class=\"headerlink\" title=\"모듈 사이에 공백 추가요청\"></a>모듈 사이에 공백 추가요청</h3><p>lint중에 ordered-imports를 사용해서 파일 형식에 따라 순서를 잡아주는게 있는데 이걸 쓰기도 합니다 :)</p>\n<h3 id=\"클릭-함수-공통-처리\"><a href=\"#클릭-함수-공통-처리\" class=\"headerlink\" title=\"클릭 함수 공통 처리\"></a>클릭 함수 공통 처리</h3><h3 id=\"변수-함수-네이밍\"><a href=\"#변수-함수-네이밍\" class=\"headerlink\" title=\"변수, 함수 네이밍\"></a>변수, 함수 네이밍</h3><h3 id=\"이벤트-핸들러-네이밍\"><a href=\"#이벤트-핸들러-네이밍\" class=\"headerlink\" title=\"이벤트 핸들러 네이밍\"></a>이벤트 핸들러 네이밍</h3><p><code>onClick=&#123;handleClick&#125;</code>과 같이 컨벤션을 맞춰주는건 어떨까요??</p>\n<p>참고: <a href=\"https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\">https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Week2-first-assignment\"><a href=\"#Week2-first-assignment\" class=\"headerlink\" title=\"Week2, first assignment\"></a>Week2, first assignment</h1><h2 id=\"피드백\"><a href=\"#피드백\" class=\"headerlink\" title=\"피드백\"></a>피드백</h2><h3 id=\"모듈-사이에-공백-추가요청\"><a href=\"#모듈-사이에-공백-추가요청\" class=\"headerlink\" title=\"모듈 사이에 공백 추가요청\"></a>모듈 사이에 공백 추가요청</h3><p>lint중에 ordered-imports를 사용해서 파일 형식에 따라 순서를 잡아주는게 있는데 이걸 쓰기도 합니다 :)</p>\n<h3 id=\"클릭-함수-공통-처리\"><a href=\"#클릭-함수-공통-처리\" class=\"headerlink\" title=\"클릭 함수 공통 처리\"></a>클릭 함수 공통 처리</h3><h3 id=\"변수-함수-네이밍\"><a href=\"#변수-함수-네이밍\" class=\"headerlink\" title=\"변수, 함수 네이밍\"></a>변수, 함수 네이밍</h3><h3 id=\"이벤트-핸들러-네이밍\"><a href=\"#이벤트-핸들러-네이밍\" class=\"headerlink\" title=\"이벤트 핸들러 네이밍\"></a>이벤트 핸들러 네이밍</h3><p><code>onClick=&#123;handleClick&#125;</code>과 같이 컨벤션을 맞춰주는건 어떨까요??</p>\n<p>참고: <a href=\"https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364\">https://medium.com/javascript-in-plain-english/handy-naming-conventions-for-event-handler-functions-props-in-react-fc1cbb791364</a></p>\n"},{"title":"Week2-2","_content":"\n# Week2, second assignment\n\n## 피드백\n","source":"_posts/Week2-2.md","raw":"---\ntitle: Week2-2\n---\n\n# Week2, second assignment\n\n## 피드백\n","slug":"Week2-2","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hru005xbqwx5hms413z","content":"<h1 id=\"Week2-second-assignment\"><a href=\"#Week2-second-assignment\" class=\"headerlink\" title=\"Week2, second assignment\"></a>Week2, second assignment</h1><h2 id=\"피드백\"><a href=\"#피드백\" class=\"headerlink\" title=\"피드백\"></a>피드백</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Week2-second-assignment\"><a href=\"#Week2-second-assignment\" class=\"headerlink\" title=\"Week2, second assignment\"></a>Week2, second assignment</h1><h2 id=\"피드백\"><a href=\"#피드백\" class=\"headerlink\" title=\"피드백\"></a>피드백</h2>"},{"title":"Week3-1","_content":"\n### dfas\n\n현재 이 테스트가 실제로 무엇을 하는지 더 자세히 설명해주면 더 좋을 것 같아요.\n테스트를 작성하실 때 `Given, When, Then`에 맞춰서 코드를 작성해보세요. 이러한 형식에 맞춰서 테스트를 작성하는 연습을 하면 좋은 테스트를 작성하는데 많은 도움이 됩니다.\n\n``` jest\ndescribe('render', () => {\n  context('tasks가 없을 떄', () => {\n    // Given\n    const tasks = [];\n\n    it('빈 메세지를 표시합니다.', () => {\n      // When\n      const { container } = render(<SomeComponent />);\n\n      // Then\n      expect(container).toHaveTextContent('투두가 없습니다.');\n    });\n  });\n  \n  context('tasks가 있을 때', () => {\n    // Given\n    const tasks = [{ id: 1, task: '밥먹기' }];\n\n    it('tasks 목록을 출력한다', () => {\n      ...\n    });\n  });\n});\n```\n\n그래서 차례대로 읽어보면 `render는 tasks가 없을 때 빈 메시지를 출력한다.`, `render는 tasks가 있을 때 tasks목록을 출력한다.`로 읽을 수 있습니다. 그래서 자연스러운 문장이 됩니다. 영어로 작성해도 마찬가지에요. 그래서 `context` 안에는 `with, without, when`만 사용하도록 권장합니다.\n\nSee also\n\n- https://ko.javascript.info/testing-mocha\n- https://www.betterspecs.org/#contexts\n\n### ff\n\n실제로 코드를 테스트하는 곳은 it함수 안에 있어야 합니다.\n\n### 수형님\n\n테스트에서 생각할 부분은 '내가 얼마나 안심할 수 있는가' 라고 생각해요. 이 과정에선 어느 정도 중복이 발생할 수 있습니다.\n예를 들어, Page 컴포넌트에서 Title 렌더링을 테스트한다면 그 하위에 실제 렌더링을 담당하는 Header 컴포넌트에서도 Title 렌더링을 테스트해야겠죠. 다만 Page에서는 Page 자체가 올바르게 렌더링 됐다는 걸 알 수 있는 수준에서 Title을 테스트한 것이고, Header에서는 더 많은 걸 테스트할 수도 있습니다. 물론 Page에 또 다른 컴포넌트가 있다면 그 컴포넌트가 가진 요소에 대해 테스트가 추가될 수 있습니다.\n\n각 컴포넌트마다 가지고 있는 관심사의 수준이 다르기 때문에 하위 컴포넌트의 구현상세를 과도하게 테스트하게 될 수 있습니다. 이 경우 상위에서 너무 많은 걸 알고 있다는 신호고 이는 설계적으로 문제가 될 수 있습니다.\n\n그러나 이 부분에 대해서 지금 너무 깊게 고민하지 않으셨으면 해요. 경험치가 누적되지 않으면 사실 판단하기 어렵습니다. 그래서 훈련할 땐 극단적으로 테스트를 작성하는 걸 권합니다. 그래야 적정 수준의 테스트가 무엇인지 알 수 있게 됩니다. 지금은 떠오르는 불안들은 잠시 넣어두시고, 테스트 커버리지 100프로에 대한 집착만 남겨둬 보셔요🙂\n\nApp 같은 경우는 이걸 App이 다 해야되나?? 라는 생각이 드실텐데 그래서 E2E 테스트가 있는 겁니다만 지금 정도 수준의 앱에선 고민 하지 않으셔도 됩니다ㅎㅎ\n\n### clearAllMocks\n\n다른 테스트에 영향을 받을 것 같습니다. 각 테스트는 독립적으로 실행되어야해요.\n\n`beforeEach`를 이용해서 mocking 함수들을 초기화 시켜주면 각 테스트가 의도치 않게 동작하는 것을 막을 수 있습니다.\n\n```\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n```\n- https://jestjs.io/docs/en/jest-object#jestclearallmocks\n\n###\n\n<App />에서 무엇을 할 수 있는지 테스트를 잘 작성해주신 것 같아요.\n무엇을 할 수 있는지도 중요하지만 무엇을 했을 때 어떤 변화가 일어나는지 더 집중해보면 좋을 것 같아요. 추가하면 어떤 변화가 일어나나요?\n\n### \n\nwith <-> without\n\nwhen log in <-> when log out\n\n처럼 같은 맥락에서 별개의 사례일 때 context를 사용합니다.\n\n지금은 3개의 context 모두 맥락이 같지 않은데 모두 context로 나눠져 있죠.\n\ncontext 사용법은 아래 문서와 아샬님의 문서를 참고해주세요.\n\nhttps://www.betterspecs.org/\nhttps://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\n\n###\n\n현재 Input 테스트에서 중복은 없는지 고민해보세요.\n\n어떻게 하면 깔끔하게 Input의 역할을 드러낼 수 있을지 고민하고\n\n사용 설명서로서 테스트 코드를 바라보시면 좋습니다.\n\n테스트를 일종의 사용설명서라고 생각해보시면 좋을 것 같아요. 해당 컴포넌트를 사용하는 사람에게 예제로 테스트를 제공하는거죠. 무엇을 보여주고 싶으신가요?\n\n다만 테스트들이 작업자 본인만 알 수 있는 테스트로 이루어져있는 것 같아요. 테스트 코드를 동료들이 읽게 될 일종의 사용 설명서로 생각하고 작성해보시면 좋습니다. 우리가 만들어둔 컴포넌트를 사용할 동료들에게 제공되는 일종의 예제가 되는거죠.\n무엇을, 어떻게 보여주는게 좋을지 한번 고민해보시고 적용해보세요 :)\n\n\n### assert 문으로 유도\ngetBy*는 해당 요소를 찾지 못하면 에러가 발생해서 충분히 테스트 가능하지만, assert 문으로 작성한다면 의도를 더 분명히 할 수 있을 것 같아요~\n\nexpect(getByText('할 일이 없어요!')).not.toBeNull();\n","source":"_posts/Week3-1.md","raw":"---\ntitle: Week3-1\n---\n\n### dfas\n\n현재 이 테스트가 실제로 무엇을 하는지 더 자세히 설명해주면 더 좋을 것 같아요.\n테스트를 작성하실 때 `Given, When, Then`에 맞춰서 코드를 작성해보세요. 이러한 형식에 맞춰서 테스트를 작성하는 연습을 하면 좋은 테스트를 작성하는데 많은 도움이 됩니다.\n\n``` jest\ndescribe('render', () => {\n  context('tasks가 없을 떄', () => {\n    // Given\n    const tasks = [];\n\n    it('빈 메세지를 표시합니다.', () => {\n      // When\n      const { container } = render(<SomeComponent />);\n\n      // Then\n      expect(container).toHaveTextContent('투두가 없습니다.');\n    });\n  });\n  \n  context('tasks가 있을 때', () => {\n    // Given\n    const tasks = [{ id: 1, task: '밥먹기' }];\n\n    it('tasks 목록을 출력한다', () => {\n      ...\n    });\n  });\n});\n```\n\n그래서 차례대로 읽어보면 `render는 tasks가 없을 때 빈 메시지를 출력한다.`, `render는 tasks가 있을 때 tasks목록을 출력한다.`로 읽을 수 있습니다. 그래서 자연스러운 문장이 됩니다. 영어로 작성해도 마찬가지에요. 그래서 `context` 안에는 `with, without, when`만 사용하도록 권장합니다.\n\nSee also\n\n- https://ko.javascript.info/testing-mocha\n- https://www.betterspecs.org/#contexts\n\n### ff\n\n실제로 코드를 테스트하는 곳은 it함수 안에 있어야 합니다.\n\n### 수형님\n\n테스트에서 생각할 부분은 '내가 얼마나 안심할 수 있는가' 라고 생각해요. 이 과정에선 어느 정도 중복이 발생할 수 있습니다.\n예를 들어, Page 컴포넌트에서 Title 렌더링을 테스트한다면 그 하위에 실제 렌더링을 담당하는 Header 컴포넌트에서도 Title 렌더링을 테스트해야겠죠. 다만 Page에서는 Page 자체가 올바르게 렌더링 됐다는 걸 알 수 있는 수준에서 Title을 테스트한 것이고, Header에서는 더 많은 걸 테스트할 수도 있습니다. 물론 Page에 또 다른 컴포넌트가 있다면 그 컴포넌트가 가진 요소에 대해 테스트가 추가될 수 있습니다.\n\n각 컴포넌트마다 가지고 있는 관심사의 수준이 다르기 때문에 하위 컴포넌트의 구현상세를 과도하게 테스트하게 될 수 있습니다. 이 경우 상위에서 너무 많은 걸 알고 있다는 신호고 이는 설계적으로 문제가 될 수 있습니다.\n\n그러나 이 부분에 대해서 지금 너무 깊게 고민하지 않으셨으면 해요. 경험치가 누적되지 않으면 사실 판단하기 어렵습니다. 그래서 훈련할 땐 극단적으로 테스트를 작성하는 걸 권합니다. 그래야 적정 수준의 테스트가 무엇인지 알 수 있게 됩니다. 지금은 떠오르는 불안들은 잠시 넣어두시고, 테스트 커버리지 100프로에 대한 집착만 남겨둬 보셔요🙂\n\nApp 같은 경우는 이걸 App이 다 해야되나?? 라는 생각이 드실텐데 그래서 E2E 테스트가 있는 겁니다만 지금 정도 수준의 앱에선 고민 하지 않으셔도 됩니다ㅎㅎ\n\n### clearAllMocks\n\n다른 테스트에 영향을 받을 것 같습니다. 각 테스트는 독립적으로 실행되어야해요.\n\n`beforeEach`를 이용해서 mocking 함수들을 초기화 시켜주면 각 테스트가 의도치 않게 동작하는 것을 막을 수 있습니다.\n\n```\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n```\n- https://jestjs.io/docs/en/jest-object#jestclearallmocks\n\n###\n\n<App />에서 무엇을 할 수 있는지 테스트를 잘 작성해주신 것 같아요.\n무엇을 할 수 있는지도 중요하지만 무엇을 했을 때 어떤 변화가 일어나는지 더 집중해보면 좋을 것 같아요. 추가하면 어떤 변화가 일어나나요?\n\n### \n\nwith <-> without\n\nwhen log in <-> when log out\n\n처럼 같은 맥락에서 별개의 사례일 때 context를 사용합니다.\n\n지금은 3개의 context 모두 맥락이 같지 않은데 모두 context로 나눠져 있죠.\n\ncontext 사용법은 아래 문서와 아샬님의 문서를 참고해주세요.\n\nhttps://www.betterspecs.org/\nhttps://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\n\n###\n\n현재 Input 테스트에서 중복은 없는지 고민해보세요.\n\n어떻게 하면 깔끔하게 Input의 역할을 드러낼 수 있을지 고민하고\n\n사용 설명서로서 테스트 코드를 바라보시면 좋습니다.\n\n테스트를 일종의 사용설명서라고 생각해보시면 좋을 것 같아요. 해당 컴포넌트를 사용하는 사람에게 예제로 테스트를 제공하는거죠. 무엇을 보여주고 싶으신가요?\n\n다만 테스트들이 작업자 본인만 알 수 있는 테스트로 이루어져있는 것 같아요. 테스트 코드를 동료들이 읽게 될 일종의 사용 설명서로 생각하고 작성해보시면 좋습니다. 우리가 만들어둔 컴포넌트를 사용할 동료들에게 제공되는 일종의 예제가 되는거죠.\n무엇을, 어떻게 보여주는게 좋을지 한번 고민해보시고 적용해보세요 :)\n\n\n### assert 문으로 유도\ngetBy*는 해당 요소를 찾지 못하면 에러가 발생해서 충분히 테스트 가능하지만, assert 문으로 작성한다면 의도를 더 분명히 할 수 있을 것 같아요~\n\nexpect(getByText('할 일이 없어요!')).not.toBeNull();\n","slug":"Week3-1","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hry0062bqwx7ucce23y","content":"<h3 id=\"dfas\"><a href=\"#dfas\" class=\"headerlink\" title=\"dfas\"></a>dfas</h3><p>현재 이 테스트가 실제로 무엇을 하는지 더 자세히 설명해주면 더 좋을 것 같아요.<br>테스트를 작성하실 때 <code>Given, When, Then</code>에 맞춰서 코드를 작성해보세요. 이러한 형식에 맞춰서 테스트를 작성하는 연습을 하면 좋은 테스트를 작성하는데 많은 도움이 됩니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">describe(&#39;render&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  context(&#39;tasks가 없을 떄&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Given</span><br><span class=\"line\">    const tasks &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    it(&#39;빈 메세지를 표시합니다.&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; When</span><br><span class=\"line\">      const &#123; container &#125; &#x3D; render(&lt;SomeComponent &#x2F;&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; Then</span><br><span class=\"line\">      expect(container).toHaveTextContent(&#39;투두가 없습니다.&#39;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  context(&#39;tasks가 있을 때&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Given</span><br><span class=\"line\">    const tasks &#x3D; [&#123; id: 1, task: &#39;밥먹기&#39; &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    it(&#39;tasks 목록을 출력한다&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>그래서 차례대로 읽어보면 <code>render는 tasks가 없을 때 빈 메시지를 출력한다.</code>, <code>render는 tasks가 있을 때 tasks목록을 출력한다.</code>로 읽을 수 있습니다. 그래서 자연스러운 문장이 됩니다. 영어로 작성해도 마찬가지에요. 그래서 <code>context</code> 안에는 <code>with, without, when</code>만 사용하도록 권장합니다.</p>\n<p>See also</p>\n<ul>\n<li><a href=\"https://ko.javascript.info/testing-mocha\">https://ko.javascript.info/testing-mocha</a></li>\n<li><a href=\"https://www.betterspecs.org/#contexts\">https://www.betterspecs.org/#contexts</a></li>\n</ul>\n<h3 id=\"ff\"><a href=\"#ff\" class=\"headerlink\" title=\"ff\"></a>ff</h3><p>실제로 코드를 테스트하는 곳은 it함수 안에 있어야 합니다.</p>\n<h3 id=\"수형님\"><a href=\"#수형님\" class=\"headerlink\" title=\"수형님\"></a>수형님</h3><p>테스트에서 생각할 부분은 ‘내가 얼마나 안심할 수 있는가’ 라고 생각해요. 이 과정에선 어느 정도 중복이 발생할 수 있습니다.<br>예를 들어, Page 컴포넌트에서 Title 렌더링을 테스트한다면 그 하위에 실제 렌더링을 담당하는 Header 컴포넌트에서도 Title 렌더링을 테스트해야겠죠. 다만 Page에서는 Page 자체가 올바르게 렌더링 됐다는 걸 알 수 있는 수준에서 Title을 테스트한 것이고, Header에서는 더 많은 걸 테스트할 수도 있습니다. 물론 Page에 또 다른 컴포넌트가 있다면 그 컴포넌트가 가진 요소에 대해 테스트가 추가될 수 있습니다.</p>\n<p>각 컴포넌트마다 가지고 있는 관심사의 수준이 다르기 때문에 하위 컴포넌트의 구현상세를 과도하게 테스트하게 될 수 있습니다. 이 경우 상위에서 너무 많은 걸 알고 있다는 신호고 이는 설계적으로 문제가 될 수 있습니다.</p>\n<p>그러나 이 부분에 대해서 지금 너무 깊게 고민하지 않으셨으면 해요. 경험치가 누적되지 않으면 사실 판단하기 어렵습니다. 그래서 훈련할 땐 극단적으로 테스트를 작성하는 걸 권합니다. 그래야 적정 수준의 테스트가 무엇인지 알 수 있게 됩니다. 지금은 떠오르는 불안들은 잠시 넣어두시고, 테스트 커버리지 100프로에 대한 집착만 남겨둬 보셔요🙂</p>\n<p>App 같은 경우는 이걸 App이 다 해야되나?? 라는 생각이 드실텐데 그래서 E2E 테스트가 있는 겁니다만 지금 정도 수준의 앱에선 고민 하지 않으셔도 됩니다ㅎㅎ</p>\n<h3 id=\"clearAllMocks\"><a href=\"#clearAllMocks\" class=\"headerlink\" title=\"clearAllMocks\"></a>clearAllMocks</h3><p>다른 테스트에 영향을 받을 것 같습니다. 각 테스트는 독립적으로 실행되어야해요.</p>\n<p><code>beforeEach</code>를 이용해서 mocking 함수들을 초기화 시켜주면 각 테스트가 의도치 않게 동작하는 것을 막을 수 있습니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  jest.clearAllMocks();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/jest-object#jestclearallmocks\">https://jestjs.io/docs/en/jest-object#jestclearallmocks</a></li>\n</ul>\n<p>###</p>\n<p><App />에서 무엇을 할 수 있는지 테스트를 잘 작성해주신 것 같아요.<br>무엇을 할 수 있는지도 중요하지만 무엇을 했을 때 어떤 변화가 일어나는지 더 집중해보면 좋을 것 같아요. 추가하면 어떤 변화가 일어나나요?</p>\n<p>### </p>\n<p>with <-> without</p>\n<p>when log in <-> when log out</p>\n<p>처럼 같은 맥락에서 별개의 사례일 때 context를 사용합니다.</p>\n<p>지금은 3개의 context 모두 맥락이 같지 않은데 모두 context로 나눠져 있죠.</p>\n<p>context 사용법은 아래 문서와 아샬님의 문서를 참고해주세요.</p>\n<p><a href=\"https://www.betterspecs.org/\">https://www.betterspecs.org/</a><br><a href=\"https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\">https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md</a></p>\n<p>###</p>\n<p>현재 Input 테스트에서 중복은 없는지 고민해보세요.</p>\n<p>어떻게 하면 깔끔하게 Input의 역할을 드러낼 수 있을지 고민하고</p>\n<p>사용 설명서로서 테스트 코드를 바라보시면 좋습니다.</p>\n<p>테스트를 일종의 사용설명서라고 생각해보시면 좋을 것 같아요. 해당 컴포넌트를 사용하는 사람에게 예제로 테스트를 제공하는거죠. 무엇을 보여주고 싶으신가요?</p>\n<p>다만 테스트들이 작업자 본인만 알 수 있는 테스트로 이루어져있는 것 같아요. 테스트 코드를 동료들이 읽게 될 일종의 사용 설명서로 생각하고 작성해보시면 좋습니다. 우리가 만들어둔 컴포넌트를 사용할 동료들에게 제공되는 일종의 예제가 되는거죠.<br>무엇을, 어떻게 보여주는게 좋을지 한번 고민해보시고 적용해보세요 :)</p>\n<h3 id=\"assert-문으로-유도\"><a href=\"#assert-문으로-유도\" class=\"headerlink\" title=\"assert 문으로 유도\"></a>assert 문으로 유도</h3><p>getBy*는 해당 요소를 찾지 못하면 에러가 발생해서 충분히 테스트 가능하지만, assert 문으로 작성한다면 의도를 더 분명히 할 수 있을 것 같아요~</p>\n<p>expect(getByText(‘할 일이 없어요!’)).not.toBeNull();</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"dfas\"><a href=\"#dfas\" class=\"headerlink\" title=\"dfas\"></a>dfas</h3><p>현재 이 테스트가 실제로 무엇을 하는지 더 자세히 설명해주면 더 좋을 것 같아요.<br>테스트를 작성하실 때 <code>Given, When, Then</code>에 맞춰서 코드를 작성해보세요. 이러한 형식에 맞춰서 테스트를 작성하는 연습을 하면 좋은 테스트를 작성하는데 많은 도움이 됩니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">describe(&#39;render&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  context(&#39;tasks가 없을 떄&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Given</span><br><span class=\"line\">    const tasks &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    it(&#39;빈 메세지를 표시합니다.&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; When</span><br><span class=\"line\">      const &#123; container &#125; &#x3D; render(&lt;SomeComponent &#x2F;&gt;);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#x2F;&#x2F; Then</span><br><span class=\"line\">      expect(container).toHaveTextContent(&#39;투두가 없습니다.&#39;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  context(&#39;tasks가 있을 때&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Given</span><br><span class=\"line\">    const tasks &#x3D; [&#123; id: 1, task: &#39;밥먹기&#39; &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    it(&#39;tasks 목록을 출력한다&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>그래서 차례대로 읽어보면 <code>render는 tasks가 없을 때 빈 메시지를 출력한다.</code>, <code>render는 tasks가 있을 때 tasks목록을 출력한다.</code>로 읽을 수 있습니다. 그래서 자연스러운 문장이 됩니다. 영어로 작성해도 마찬가지에요. 그래서 <code>context</code> 안에는 <code>with, without, when</code>만 사용하도록 권장합니다.</p>\n<p>See also</p>\n<ul>\n<li><a href=\"https://ko.javascript.info/testing-mocha\">https://ko.javascript.info/testing-mocha</a></li>\n<li><a href=\"https://www.betterspecs.org/#contexts\">https://www.betterspecs.org/#contexts</a></li>\n</ul>\n<h3 id=\"ff\"><a href=\"#ff\" class=\"headerlink\" title=\"ff\"></a>ff</h3><p>실제로 코드를 테스트하는 곳은 it함수 안에 있어야 합니다.</p>\n<h3 id=\"수형님\"><a href=\"#수형님\" class=\"headerlink\" title=\"수형님\"></a>수형님</h3><p>테스트에서 생각할 부분은 ‘내가 얼마나 안심할 수 있는가’ 라고 생각해요. 이 과정에선 어느 정도 중복이 발생할 수 있습니다.<br>예를 들어, Page 컴포넌트에서 Title 렌더링을 테스트한다면 그 하위에 실제 렌더링을 담당하는 Header 컴포넌트에서도 Title 렌더링을 테스트해야겠죠. 다만 Page에서는 Page 자체가 올바르게 렌더링 됐다는 걸 알 수 있는 수준에서 Title을 테스트한 것이고, Header에서는 더 많은 걸 테스트할 수도 있습니다. 물론 Page에 또 다른 컴포넌트가 있다면 그 컴포넌트가 가진 요소에 대해 테스트가 추가될 수 있습니다.</p>\n<p>각 컴포넌트마다 가지고 있는 관심사의 수준이 다르기 때문에 하위 컴포넌트의 구현상세를 과도하게 테스트하게 될 수 있습니다. 이 경우 상위에서 너무 많은 걸 알고 있다는 신호고 이는 설계적으로 문제가 될 수 있습니다.</p>\n<p>그러나 이 부분에 대해서 지금 너무 깊게 고민하지 않으셨으면 해요. 경험치가 누적되지 않으면 사실 판단하기 어렵습니다. 그래서 훈련할 땐 극단적으로 테스트를 작성하는 걸 권합니다. 그래야 적정 수준의 테스트가 무엇인지 알 수 있게 됩니다. 지금은 떠오르는 불안들은 잠시 넣어두시고, 테스트 커버리지 100프로에 대한 집착만 남겨둬 보셔요🙂</p>\n<p>App 같은 경우는 이걸 App이 다 해야되나?? 라는 생각이 드실텐데 그래서 E2E 테스트가 있는 겁니다만 지금 정도 수준의 앱에선 고민 하지 않으셔도 됩니다ㅎㅎ</p>\n<h3 id=\"clearAllMocks\"><a href=\"#clearAllMocks\" class=\"headerlink\" title=\"clearAllMocks\"></a>clearAllMocks</h3><p>다른 테스트에 영향을 받을 것 같습니다. 각 테스트는 독립적으로 실행되어야해요.</p>\n<p><code>beforeEach</code>를 이용해서 mocking 함수들을 초기화 시켜주면 각 테스트가 의도치 않게 동작하는 것을 막을 수 있습니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  jest.clearAllMocks();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/jest-object#jestclearallmocks\">https://jestjs.io/docs/en/jest-object#jestclearallmocks</a></li>\n</ul>\n<p>###</p>\n<p><App />에서 무엇을 할 수 있는지 테스트를 잘 작성해주신 것 같아요.<br>무엇을 할 수 있는지도 중요하지만 무엇을 했을 때 어떤 변화가 일어나는지 더 집중해보면 좋을 것 같아요. 추가하면 어떤 변화가 일어나나요?</p>\n<p>### </p>\n<p>with <-> without</p>\n<p>when log in <-> when log out</p>\n<p>처럼 같은 맥락에서 별개의 사례일 때 context를 사용합니다.</p>\n<p>지금은 3개의 context 모두 맥락이 같지 않은데 모두 context로 나눠져 있죠.</p>\n<p>context 사용법은 아래 문서와 아샬님의 문서를 참고해주세요.</p>\n<p><a href=\"https://www.betterspecs.org/\">https://www.betterspecs.org/</a><br><a href=\"https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md\">https://github.com/ahastudio/til/blob/main/blog/2018/12-08-given-when-then.md</a></p>\n<p>###</p>\n<p>현재 Input 테스트에서 중복은 없는지 고민해보세요.</p>\n<p>어떻게 하면 깔끔하게 Input의 역할을 드러낼 수 있을지 고민하고</p>\n<p>사용 설명서로서 테스트 코드를 바라보시면 좋습니다.</p>\n<p>테스트를 일종의 사용설명서라고 생각해보시면 좋을 것 같아요. 해당 컴포넌트를 사용하는 사람에게 예제로 테스트를 제공하는거죠. 무엇을 보여주고 싶으신가요?</p>\n<p>다만 테스트들이 작업자 본인만 알 수 있는 테스트로 이루어져있는 것 같아요. 테스트 코드를 동료들이 읽게 될 일종의 사용 설명서로 생각하고 작성해보시면 좋습니다. 우리가 만들어둔 컴포넌트를 사용할 동료들에게 제공되는 일종의 예제가 되는거죠.<br>무엇을, 어떻게 보여주는게 좋을지 한번 고민해보시고 적용해보세요 :)</p>\n<h3 id=\"assert-문으로-유도\"><a href=\"#assert-문으로-유도\" class=\"headerlink\" title=\"assert 문으로 유도\"></a>assert 문으로 유도</h3><p>getBy*는 해당 요소를 찾지 못하면 에러가 발생해서 충분히 테스트 가능하지만, assert 문으로 작성한다면 의도를 더 분명히 할 수 있을 것 같아요~</p>\n<p>expect(getByText(‘할 일이 없어요!’)).not.toBeNull();</p>\n"},{"title":"Daily Report","_content":"\n> 생각나는대로 그때그때 작성해보는 일기\n\n## 2021.04.03 (토)\n\n`Originality`\n\n용호수 표절 관련 영상 보다가 느낌. 개발할때도 남의 코드를 참고하고 응용하고 적용하려고만 했다. 참고하는게 잘못된건 아니지만 보다 근본적인 동작을 파악하고 이를 내 생각대로 내가 원하는대로 사용해보자.\n\n> 근본 기술들을 파악하고 영감을 받자. 그들이 이전 세대에서 받았던 것처럼.\n\n## 2021.04.05 (월)\n\n`부자 아빠, 가난한 아빠`\n\n1. `시간` >>>>>>>>> 돈\n2. `냉소주의`를 피하자.\n\n    일어나지 않을 리스크와 위험에 겁먹지 말자. 항상 리스크와 위험을 확인하자.\n\n    핑계를 대며 결정을 회피하지 말자.\n\n3. 나를 속이는 `게으름`\n\n    가장 중요한 것을 미루지말자. 그게 전진을 하지 못하는 원인. 현실을 마주하자.\n\n    욕심에 솔직해지자. '어떻게 하면'. 머리를 열자\n\n4. `부자가 되기 위한 습관`을 만들자. 나를 위해 쓰자\n5. `거만함`.\n\n    내가 모르는 것에대해 나를 속이는 것.\n\n    모르면 모른다고 해야\n\n## 2021.04.12 (월)\n\n오늘은 간만에 데일리 리포트를 작성하며 하루를 보냈음. 재택하다보면 시간을 낭비하는 경우가 많은데 데일리 리포트를 작성하면 매 시간을 알차게 보내는 느낌이라 좋다. 내일도 하자. 비가와서 산책을 못해 아쉬운 하루!\n\n추가. 간만에 wiki 정리한걸 푸시했는데, 블로그가 `css/style.css` 파일을 못불러와서 알고보니 `Css.md` 파일을 만든게 `Css/index.html`로 바뀌면서 css 경로 충돌이 났었다는.. 파일명은 항상 잘 지어야게따\n","source":"_posts/daily-report.md","raw":"---\ntitle: Daily Report\ncategories: daily-report\n---\n\n> 생각나는대로 그때그때 작성해보는 일기\n\n## 2021.04.03 (토)\n\n`Originality`\n\n용호수 표절 관련 영상 보다가 느낌. 개발할때도 남의 코드를 참고하고 응용하고 적용하려고만 했다. 참고하는게 잘못된건 아니지만 보다 근본적인 동작을 파악하고 이를 내 생각대로 내가 원하는대로 사용해보자.\n\n> 근본 기술들을 파악하고 영감을 받자. 그들이 이전 세대에서 받았던 것처럼.\n\n## 2021.04.05 (월)\n\n`부자 아빠, 가난한 아빠`\n\n1. `시간` >>>>>>>>> 돈\n2. `냉소주의`를 피하자.\n\n    일어나지 않을 리스크와 위험에 겁먹지 말자. 항상 리스크와 위험을 확인하자.\n\n    핑계를 대며 결정을 회피하지 말자.\n\n3. 나를 속이는 `게으름`\n\n    가장 중요한 것을 미루지말자. 그게 전진을 하지 못하는 원인. 현실을 마주하자.\n\n    욕심에 솔직해지자. '어떻게 하면'. 머리를 열자\n\n4. `부자가 되기 위한 습관`을 만들자. 나를 위해 쓰자\n5. `거만함`.\n\n    내가 모르는 것에대해 나를 속이는 것.\n\n    모르면 모른다고 해야\n\n## 2021.04.12 (월)\n\n오늘은 간만에 데일리 리포트를 작성하며 하루를 보냈음. 재택하다보면 시간을 낭비하는 경우가 많은데 데일리 리포트를 작성하면 매 시간을 알차게 보내는 느낌이라 좋다. 내일도 하자. 비가와서 산책을 못해 아쉬운 하루!\n\n추가. 간만에 wiki 정리한걸 푸시했는데, 블로그가 `css/style.css` 파일을 못불러와서 알고보니 `Css.md` 파일을 만든게 `Css/index.html`로 바뀌면서 css 경로 충돌이 났었다는.. 파일명은 항상 잘 지어야게따\n","slug":"daily-report","published":1,"date":"2021-04-12T13:27:28.556Z","updated":"2021-04-21T16:24:42.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hrz0065bqwxf3ghhp80","content":"<blockquote>\n<p>생각나는대로 그때그때 작성해보는 일기</p>\n</blockquote>\n<h2 id=\"2021-04-03-토\"><a href=\"#2021-04-03-토\" class=\"headerlink\" title=\"2021.04.03 (토)\"></a>2021.04.03 (토)</h2><p><code>Originality</code></p>\n<p>용호수 표절 관련 영상 보다가 느낌. 개발할때도 남의 코드를 참고하고 응용하고 적용하려고만 했다. 참고하는게 잘못된건 아니지만 보다 근본적인 동작을 파악하고 이를 내 생각대로 내가 원하는대로 사용해보자.</p>\n<blockquote>\n<p>근본 기술들을 파악하고 영감을 받자. 그들이 이전 세대에서 받았던 것처럼.</p>\n</blockquote>\n<h2 id=\"2021-04-05-월\"><a href=\"#2021-04-05-월\" class=\"headerlink\" title=\"2021.04.05 (월)\"></a>2021.04.05 (월)</h2><p><code>부자 아빠, 가난한 아빠</code></p>\n<ol>\n<li><code>시간</code> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 돈</li>\n<li><p><code>냉소주의</code>를 피하자.</p>\n<p> 일어나지 않을 리스크와 위험에 겁먹지 말자. 항상 리스크와 위험을 확인하자.</p>\n<p> 핑계를 대며 결정을 회피하지 말자.</p>\n</li>\n<li><p>나를 속이는 <code>게으름</code></p>\n<p> 가장 중요한 것을 미루지말자. 그게 전진을 하지 못하는 원인. 현실을 마주하자.</p>\n<p> 욕심에 솔직해지자. ‘어떻게 하면’. 머리를 열자</p>\n</li>\n<li><p><code>부자가 되기 위한 습관</code>을 만들자. 나를 위해 쓰자</p>\n</li>\n<li><p><code>거만함</code>.</p>\n<p> 내가 모르는 것에대해 나를 속이는 것.</p>\n<p> 모르면 모른다고 해야</p>\n</li>\n</ol>\n<h2 id=\"2021-04-12-월\"><a href=\"#2021-04-12-월\" class=\"headerlink\" title=\"2021.04.12 (월)\"></a>2021.04.12 (월)</h2><p>오늘은 간만에 데일리 리포트를 작성하며 하루를 보냈음. 재택하다보면 시간을 낭비하는 경우가 많은데 데일리 리포트를 작성하면 매 시간을 알차게 보내는 느낌이라 좋다. 내일도 하자. 비가와서 산책을 못해 아쉬운 하루!</p>\n<p>추가. 간만에 wiki 정리한걸 푸시했는데, 블로그가 <code>css/style.css</code> 파일을 못불러와서 알고보니 <code>Css.md</code> 파일을 만든게 <code>Css/index.html</code>로 바뀌면서 css 경로 충돌이 났었다는.. 파일명은 항상 잘 지어야게따</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>생각나는대로 그때그때 작성해보는 일기</p>\n</blockquote>\n<h2 id=\"2021-04-03-토\"><a href=\"#2021-04-03-토\" class=\"headerlink\" title=\"2021.04.03 (토)\"></a>2021.04.03 (토)</h2><p><code>Originality</code></p>\n<p>용호수 표절 관련 영상 보다가 느낌. 개발할때도 남의 코드를 참고하고 응용하고 적용하려고만 했다. 참고하는게 잘못된건 아니지만 보다 근본적인 동작을 파악하고 이를 내 생각대로 내가 원하는대로 사용해보자.</p>\n<blockquote>\n<p>근본 기술들을 파악하고 영감을 받자. 그들이 이전 세대에서 받았던 것처럼.</p>\n</blockquote>\n<h2 id=\"2021-04-05-월\"><a href=\"#2021-04-05-월\" class=\"headerlink\" title=\"2021.04.05 (월)\"></a>2021.04.05 (월)</h2><p><code>부자 아빠, 가난한 아빠</code></p>\n<ol>\n<li><code>시간</code> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 돈</li>\n<li><p><code>냉소주의</code>를 피하자.</p>\n<p> 일어나지 않을 리스크와 위험에 겁먹지 말자. 항상 리스크와 위험을 확인하자.</p>\n<p> 핑계를 대며 결정을 회피하지 말자.</p>\n</li>\n<li><p>나를 속이는 <code>게으름</code></p>\n<p> 가장 중요한 것을 미루지말자. 그게 전진을 하지 못하는 원인. 현실을 마주하자.</p>\n<p> 욕심에 솔직해지자. ‘어떻게 하면’. 머리를 열자</p>\n</li>\n<li><p><code>부자가 되기 위한 습관</code>을 만들자. 나를 위해 쓰자</p>\n</li>\n<li><p><code>거만함</code>.</p>\n<p> 내가 모르는 것에대해 나를 속이는 것.</p>\n<p> 모르면 모른다고 해야</p>\n</li>\n</ol>\n<h2 id=\"2021-04-12-월\"><a href=\"#2021-04-12-월\" class=\"headerlink\" title=\"2021.04.12 (월)\"></a>2021.04.12 (월)</h2><p>오늘은 간만에 데일리 리포트를 작성하며 하루를 보냈음. 재택하다보면 시간을 낭비하는 경우가 많은데 데일리 리포트를 작성하면 매 시간을 알차게 보내는 느낌이라 좋다. 내일도 하자. 비가와서 산책을 못해 아쉬운 하루!</p>\n<p>추가. 간만에 wiki 정리한걸 푸시했는데, 블로그가 <code>css/style.css</code> 파일을 못불러와서 알고보니 <code>Css.md</code> 파일을 만든게 <code>Css/index.html</code>로 바뀌면서 css 경로 충돌이 났었다는.. 파일명은 항상 잘 지어야게따</p>\n"},{"title":"Jest Mock Function","date":"2019-05-10T07:35:50.000Z","_content":"\n해당 포스트의 내용은 Jest 공식 문서의 [Mock Functions](https://jestjs.io/docs/en/mock-functions)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# Mock 함수\n","source":"_posts/jest-mock-function-2019-05-10.md","raw":"---\ntitle: Jest Mock Function\ndate: 2019-05-10 16:35:50\ncategories:\n    - Jest\n    - 공식 문서\ntags:\n    - Jest\n    - Mock Function\n    - Jest 번역\n---\n\n해당 포스트의 내용은 Jest 공식 문서의 [Mock Functions](https://jestjs.io/docs/en/mock-functions)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# Mock 함수\n","slug":"jest-mock-function","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs00067bqwx2t4j1581","content":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/mock-functions\">Mock Functions</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"Mock-함수\"><a href=\"#Mock-함수\" class=\"headerlink\" title=\"Mock 함수\"></a>Mock 함수</h1>","site":{"data":{}},"excerpt":"","more":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/mock-functions\">Mock Functions</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"Mock-함수\"><a href=\"#Mock-함수\" class=\"headerlink\" title=\"Mock 함수\"></a>Mock 함수</h1>"},{"title":"Jest - Setup and Teardown","date":"2019-05-07T05:36:14.000Z","_content":"\n해당 포스트의 내용은 Jest 공식 문서의 [Setup and Teardown](https://jestjs.io/docs/en/setup-teardown)을 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 설정 및 해제\n\n테스트를 작성하는 동안 테스트를 실행하기 전에 수행해야하는 설정 작업이 있으며 테스트를 실행 한 후에 해야 할 작업이 있습니다. Jest는 이것을 처리 할 도우미 함수를 제공합니다.\n\n## 많은 테스트를 위한 반복 설정\n\n많은 테스트를 위해 반복적으로 해야하는 작업이 있으면 `beforeEach`와 `afterEach`를 사용할 수 있습니다.\n\n예를 들어 여러 테스트가 도시의 데이터베이스와 상호 작용한다고 가정 해 봅시다. 이러한 각 테스트 전에 호출되어야하는 `initializeCityDatabase()` 메서드와 각 테스트 후에 호출되어야하는 `clearCityDatabase()` 메서드가 있습니다. 다음과 같이 할 수 있습니다 :\n\n```javascript\nbeforeEach(() => {\n    initializeCityDatabase();\n});\n\nafterEach(() => {\n    clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n`beforeEach` 및 `afterEach`는 [테스트가 비동기 코드를 처리하는 것과 동일한 방식](https://jestjs.io/docs/en/asynchronous)으로 비동기 코드를 처리 할 수 ​​있습니다. `done' 매개 변수를 사용하거나 프로미스를 반환 할 수 있습니다. 예를 들어,`initializeCityDatabase()`가 데이터베이스가 초기화 될 때 resolved 된 프로미스를 반환하면, 우리는 그 프로미스를 반환하려 합니다:\n\n```javascript\nbeforeEach(() => {\n    return initializeCityDatabase();\n});\n```\n\n## 일회성 설정\n\n경우에 따라 파일 시작 부분에서 한 번만 설정하면 됩니다. 설정이 비동기 일 때 특히 불편할 수 있으므로 인라인으로 설정할 수 없습니다. Jest는 이러한 상황을 처리하기 위해 `beforeAll`과 `afterAll`을 제공합니다.\n\n예를 들어, `initializeCityDatabase` 및 `clearCityDatabase`가 프로미스를 반환하고 도시 데이터베이스를 테스트 간에 다시 사용할 수있는 경우, 테스트 코드를 다음과 같이 변경할 수 있습니다.\n\n```javascript\nbeforeAll(() => {\n    return initializeCityDatabase();\n});\n\nafterAll(() => {\n    return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n## Scoping\n\n기본적으로 `before` 및 `after` 블록은 파일의 모든 테스트에 적용됩니다. 또한 `describe` 블록을 사용하여 테스트를 그룹화 할 수도 있습니다. 그들이 `describe` 블록 안에 있을 때, `before` 및 `after` 블록은 해당 `describe` 블록 내의 테스트에만 적용됩니다.\n\n예를 들어, 우리가 도시 데이터베이스 뿐만 아니라 음식 데이터베이스를 가지고 있다고 가정 해 봅시다. 다른 테스트를 위해 다른 설정을 할 수 있습니다.\n\n```javascript\n// Applies to all tests in this file\nbeforeEach(() => {\n    return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n    // Applies only to tests in this describe block\n    beforeEach(() => {\n        return initializeFoodDatabase();\n    });\n\n    test('Vienna <3 sausage', () => {\n        expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n    });\n\n    test('San Juan <3 plantains', () => {\n        expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n    });\n});\n```\n\n`beforeEach` 최상위 레벨은 `describe` 블록 내에서 `beforeEach` 앞에 실행됩니다. 모든 훅의 실행 순서를 설명하는데 도움이 될 수 있습니다.\n\n```javascript\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n    beforeAll(() => console.log('2 - beforeAll'));\n    afterAll(() => console.log('2 - afterAll'));\n    beforeEach(() => console.log('2 - beforeEach'));\n    afterEach(() => console.log('2 - afterEach'));\n    test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n## describe 및 test 블록 실행 순서\n\nJest는 실제 테스트를 실행하기 전에 모든 테스트 핸들러를 테스트 파일에 실행합니다. 이것은 describe 블록 내부가 아닌 `before*` 및 `after*` 핸들러 내부에서 설정 및 해제를 수행해야하는 또 다른 이유입니다. describe 블록이 완료되면, 기본적으로 Jest는 수집 단계에서 모든 테스트를 순차적으로 실행하고, 각 테스트가 완료 될 때까지 기다렸다가 계속 진행하기 전에 정리합니다.\n\n다음과 같은 예시 테스트 파일 및 출력을 고려하세요:\n\n```javascript\ndescribe('outer', () => {\n    console.log('describe outer-a');\n\n    describe('describe inner 1', () => {\n        console.log('describe inner 1');\n        test('test 1', () => {\n            console.log('test for describe inner 1');\n            expect(true).toEqual(true);\n        });\n    });\n\n    console.log('describe outer-b');\n\n    test('test 1', () => {\n        console.log('test for describe outer');\n        expect(true).toEqual(true);\n    });\n\n    describe('describe inner 2', () => {\n        console.log('describe inner 2');\n        test('test for describe inner 2', () => {\n            console.log('test for describe inner 2');\n            expect(false).toEqual(false);\n        });\n    });\n\n    console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n```\n\n## 일반적인 조언\n\n테스트가 실패하면 가장 먼저 점검해야 할 사항 중 하나는 실행되는 유일한 테스트 일 때 테스트가 실패하는지 여부입니다. Jest에서는 단 하나의 테스트만 실행하는게 간단합니다. 단지 테스트 명령을 `test.only`로 변경해주면 됩니디.\n\n```javascript\ntest.only('this will be the only test that runs', () => {\n    expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n    expect('A').toBe('A');\n});\n```\n\n대규모 패키지의 일부로 실행될 때 종종 실패하지만 혼자 실행할 땐 실패하지 않는 테스트가 있을 때, 다른 테스트의 일부가 이 테스트에 간섭한다고 확신할 수 있습니다. `beforeEach`를 사용하여 공유 상태를 정리해서 이런 문제를 해결할 수 있습니다. 공유 상태가 수정되는지 여부가 확실하지 않은 경우에도 `beforeEach`를 사용하여 데이터를 기록 할 수도 있습니다.\n","source":"_posts/jest-setup-and-teardown-2019-05-07.md","raw":"---\ntitle: Jest - Setup and Teardown\ndate: 2019-05-07 14:36:14\ncategories:\n    - Jest\n    - 공식 문서\ntags:\n    - Jest\n    - Unit Test\n    - Jest 번역\n    - 설정 및 해제\n    - Setup and Teardown\n---\n\n해당 포스트의 내용은 Jest 공식 문서의 [Setup and Teardown](https://jestjs.io/docs/en/setup-teardown)을 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 설정 및 해제\n\n테스트를 작성하는 동안 테스트를 실행하기 전에 수행해야하는 설정 작업이 있으며 테스트를 실행 한 후에 해야 할 작업이 있습니다. Jest는 이것을 처리 할 도우미 함수를 제공합니다.\n\n## 많은 테스트를 위한 반복 설정\n\n많은 테스트를 위해 반복적으로 해야하는 작업이 있으면 `beforeEach`와 `afterEach`를 사용할 수 있습니다.\n\n예를 들어 여러 테스트가 도시의 데이터베이스와 상호 작용한다고 가정 해 봅시다. 이러한 각 테스트 전에 호출되어야하는 `initializeCityDatabase()` 메서드와 각 테스트 후에 호출되어야하는 `clearCityDatabase()` 메서드가 있습니다. 다음과 같이 할 수 있습니다 :\n\n```javascript\nbeforeEach(() => {\n    initializeCityDatabase();\n});\n\nafterEach(() => {\n    clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n`beforeEach` 및 `afterEach`는 [테스트가 비동기 코드를 처리하는 것과 동일한 방식](https://jestjs.io/docs/en/asynchronous)으로 비동기 코드를 처리 할 수 ​​있습니다. `done' 매개 변수를 사용하거나 프로미스를 반환 할 수 있습니다. 예를 들어,`initializeCityDatabase()`가 데이터베이스가 초기화 될 때 resolved 된 프로미스를 반환하면, 우리는 그 프로미스를 반환하려 합니다:\n\n```javascript\nbeforeEach(() => {\n    return initializeCityDatabase();\n});\n```\n\n## 일회성 설정\n\n경우에 따라 파일 시작 부분에서 한 번만 설정하면 됩니다. 설정이 비동기 일 때 특히 불편할 수 있으므로 인라인으로 설정할 수 없습니다. Jest는 이러한 상황을 처리하기 위해 `beforeAll`과 `afterAll`을 제공합니다.\n\n예를 들어, `initializeCityDatabase` 및 `clearCityDatabase`가 프로미스를 반환하고 도시 데이터베이스를 테스트 간에 다시 사용할 수있는 경우, 테스트 코드를 다음과 같이 변경할 수 있습니다.\n\n```javascript\nbeforeAll(() => {\n    return initializeCityDatabase();\n});\n\nafterAll(() => {\n    return clearCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n```\n\n## Scoping\n\n기본적으로 `before` 및 `after` 블록은 파일의 모든 테스트에 적용됩니다. 또한 `describe` 블록을 사용하여 테스트를 그룹화 할 수도 있습니다. 그들이 `describe` 블록 안에 있을 때, `before` 및 `after` 블록은 해당 `describe` 블록 내의 테스트에만 적용됩니다.\n\n예를 들어, 우리가 도시 데이터베이스 뿐만 아니라 음식 데이터베이스를 가지고 있다고 가정 해 봅시다. 다른 테스트를 위해 다른 설정을 할 수 있습니다.\n\n```javascript\n// Applies to all tests in this file\nbeforeEach(() => {\n    return initializeCityDatabase();\n});\n\ntest('city database has Vienna', () => {\n    expect(isCity('Vienna')).toBeTruthy();\n});\n\ntest('city database has San Juan', () => {\n    expect(isCity('San Juan')).toBeTruthy();\n});\n\ndescribe('matching cities to foods', () => {\n    // Applies only to tests in this describe block\n    beforeEach(() => {\n        return initializeFoodDatabase();\n    });\n\n    test('Vienna <3 sausage', () => {\n        expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n    });\n\n    test('San Juan <3 plantains', () => {\n        expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n    });\n});\n```\n\n`beforeEach` 최상위 레벨은 `describe` 블록 내에서 `beforeEach` 앞에 실행됩니다. 모든 훅의 실행 순서를 설명하는데 도움이 될 수 있습니다.\n\n```javascript\nbeforeAll(() => console.log('1 - beforeAll'));\nafterAll(() => console.log('1 - afterAll'));\nbeforeEach(() => console.log('1 - beforeEach'));\nafterEach(() => console.log('1 - afterEach'));\ntest('', () => console.log('1 - test'));\ndescribe('Scoped / Nested block', () => {\n    beforeAll(() => console.log('2 - beforeAll'));\n    afterAll(() => console.log('2 - afterAll'));\n    beforeEach(() => console.log('2 - beforeEach'));\n    afterEach(() => console.log('2 - afterEach'));\n    test('', () => console.log('2 - test'));\n});\n\n// 1 - beforeAll\n// 1 - beforeEach\n// 1 - test\n// 1 - afterEach\n// 2 - beforeAll\n// 1 - beforeEach\n// 2 - beforeEach\n// 2 - test\n// 2 - afterEach\n// 1 - afterEach\n// 2 - afterAll\n// 1 - afterAll\n```\n\n## describe 및 test 블록 실행 순서\n\nJest는 실제 테스트를 실행하기 전에 모든 테스트 핸들러를 테스트 파일에 실행합니다. 이것은 describe 블록 내부가 아닌 `before*` 및 `after*` 핸들러 내부에서 설정 및 해제를 수행해야하는 또 다른 이유입니다. describe 블록이 완료되면, 기본적으로 Jest는 수집 단계에서 모든 테스트를 순차적으로 실행하고, 각 테스트가 완료 될 때까지 기다렸다가 계속 진행하기 전에 정리합니다.\n\n다음과 같은 예시 테스트 파일 및 출력을 고려하세요:\n\n```javascript\ndescribe('outer', () => {\n    console.log('describe outer-a');\n\n    describe('describe inner 1', () => {\n        console.log('describe inner 1');\n        test('test 1', () => {\n            console.log('test for describe inner 1');\n            expect(true).toEqual(true);\n        });\n    });\n\n    console.log('describe outer-b');\n\n    test('test 1', () => {\n        console.log('test for describe outer');\n        expect(true).toEqual(true);\n    });\n\n    describe('describe inner 2', () => {\n        console.log('describe inner 2');\n        test('test for describe inner 2', () => {\n            console.log('test for describe inner 2');\n            expect(false).toEqual(false);\n        });\n    });\n\n    console.log('describe outer-c');\n});\n\n// describe outer-a\n// describe inner 1\n// describe outer-b\n// describe inner 2\n// describe outer-c\n// test for describe inner 1\n// test for describe outer\n// test for describe inner 2\n```\n\n## 일반적인 조언\n\n테스트가 실패하면 가장 먼저 점검해야 할 사항 중 하나는 실행되는 유일한 테스트 일 때 테스트가 실패하는지 여부입니다. Jest에서는 단 하나의 테스트만 실행하는게 간단합니다. 단지 테스트 명령을 `test.only`로 변경해주면 됩니디.\n\n```javascript\ntest.only('this will be the only test that runs', () => {\n    expect(true).toBe(false);\n});\n\ntest('this test will not run', () => {\n    expect('A').toBe('A');\n});\n```\n\n대규모 패키지의 일부로 실행될 때 종종 실패하지만 혼자 실행할 땐 실패하지 않는 테스트가 있을 때, 다른 테스트의 일부가 이 테스트에 간섭한다고 확신할 수 있습니다. `beforeEach`를 사용하여 공유 상태를 정리해서 이런 문제를 해결할 수 있습니다. 공유 상태가 수정되는지 여부가 확실하지 않은 경우에도 `beforeEach`를 사용하여 데이터를 기록 할 수도 있습니다.\n","slug":"jest-setup-and-teardown","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs00069bqwxb1po2150","content":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/setup-teardown\">Setup and Teardown</a>을 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"설정-및-해제\"><a href=\"#설정-및-해제\" class=\"headerlink\" title=\"설정 및 해제\"></a>설정 및 해제</h1><p>테스트를 작성하는 동안 테스트를 실행하기 전에 수행해야하는 설정 작업이 있으며 테스트를 실행 한 후에 해야 할 작업이 있습니다. Jest는 이것을 처리 할 도우미 함수를 제공합니다.</p>\n<h2 id=\"많은-테스트를-위한-반복-설정\"><a href=\"#많은-테스트를-위한-반복-설정\" class=\"headerlink\" title=\"많은 테스트를 위한 반복 설정\"></a>많은 테스트를 위한 반복 설정</h2><p>많은 테스트를 위해 반복적으로 해야하는 작업이 있으면 <code>beforeEach</code>와 <code>afterEach</code>를 사용할 수 있습니다.</p>\n<p>예를 들어 여러 테스트가 도시의 데이터베이스와 상호 작용한다고 가정 해 봅시다. 이러한 각 테스트 전에 호출되어야하는 <code>initializeCityDatabase()</code> 메서드와 각 테스트 후에 호출되어야하는 <code>clearCityDatabase()</code> 메서드가 있습니다. 다음과 같이 할 수 있습니다 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>beforeEach</code> 및 <code>afterEach</code>는 <a href=\"https://jestjs.io/docs/en/asynchronous\">테스트가 비동기 코드를 처리하는 것과 동일한 방식</a>으로 비동기 코드를 처리 할 수 ​​있습니다. <code>done&#39; 매개 변수를 사용하거나 프로미스를 반환 할 수 있습니다. 예를 들어,</code>initializeCityDatabase()`가 데이터베이스가 초기화 될 때 resolved 된 프로미스를 반환하면, 우리는 그 프로미스를 반환하려 합니다:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"일회성-설정\"><a href=\"#일회성-설정\" class=\"headerlink\" title=\"일회성 설정\"></a>일회성 설정</h2><p>경우에 따라 파일 시작 부분에서 한 번만 설정하면 됩니다. 설정이 비동기 일 때 특히 불편할 수 있으므로 인라인으로 설정할 수 없습니다. Jest는 이러한 상황을 처리하기 위해 <code>beforeAll</code>과 <code>afterAll</code>을 제공합니다.</p>\n<p>예를 들어, <code>initializeCityDatabase</code> 및 <code>clearCityDatabase</code>가 프로미스를 반환하고 도시 데이터베이스를 테스트 간에 다시 사용할 수있는 경우, 테스트 코드를 다음과 같이 변경할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Scoping\"><a href=\"#Scoping\" class=\"headerlink\" title=\"Scoping\"></a>Scoping</h2><p>기본적으로 <code>before</code> 및 <code>after</code> 블록은 파일의 모든 테스트에 적용됩니다. 또한 <code>describe</code> 블록을 사용하여 테스트를 그룹화 할 수도 있습니다. 그들이 <code>describe</code> 블록 안에 있을 때, <code>before</code> 및 <code>after</code> 블록은 해당 <code>describe</code> 블록 내의 테스트에만 적용됩니다.</p>\n<p>예를 들어, 우리가 도시 데이터베이스 뿐만 아니라 음식 데이터베이스를 가지고 있다고 가정 해 봅시다. 다른 테스트를 위해 다른 설정을 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Applies to all tests in this file</span></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;matching cities to foods&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Applies only to tests in this describe block</span></span><br><span class=\"line\">    beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initializeFoodDatabase();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;Vienna &lt;3 sausage&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        expect(isValidCityFoodPair(<span class=\"string\">&#x27;Vienna&#x27;</span>, <span class=\"string\">&#x27;Wiener Schnitzel&#x27;</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;San Juan &lt;3 plantains&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        expect(isValidCityFoodPair(<span class=\"string\">&#x27;San Juan&#x27;</span>, <span class=\"string\">&#x27;Mofongo&#x27;</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>beforeEach</code> 최상위 레벨은 <code>describe</code> 블록 내에서 <code>beforeEach</code> 앞에 실행됩니다. 모든 훅의 실행 순서를 설명하는데 도움이 될 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - beforeAll&#x27;</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - afterAll&#x27;</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - beforeEach&#x27;</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - afterEach&#x27;</span>));</span><br><span class=\"line\">test(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - test&#x27;</span>));</span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Scoped / Nested block&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    beforeAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - beforeAll&#x27;</span>));</span><br><span class=\"line\">    afterAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - afterAll&#x27;</span>));</span><br><span class=\"line\">    beforeEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - beforeEach&#x27;</span>));</span><br><span class=\"line\">    afterEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - afterEach&#x27;</span>));</span><br><span class=\"line\">    test(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - test&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterAll</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"describe-및-test-블록-실행-순서\"><a href=\"#describe-및-test-블록-실행-순서\" class=\"headerlink\" title=\"describe 및 test 블록 실행 순서\"></a>describe 및 test 블록 실행 순서</h2><p>Jest는 실제 테스트를 실행하기 전에 모든 테스트 핸들러를 테스트 파일에 실행합니다. 이것은 describe 블록 내부가 아닌 <code>before*</code> 및 <code>after*</code> 핸들러 내부에서 설정 및 해제를 수행해야하는 또 다른 이유입니다. describe 블록이 완료되면, 기본적으로 Jest는 수집 단계에서 모든 테스트를 순차적으로 실행하고, 각 테스트가 완료 될 때까지 기다렸다가 계속 진행하기 전에 정리합니다.</p>\n<p>다음과 같은 예시 테스트 파일 및 출력을 고려하세요:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&#x27;outer&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-a&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    describe(<span class=\"string\">&#x27;describe inner 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe inner 1&#x27;</span>);</span><br><span class=\"line\">        test(<span class=\"string\">&#x27;test 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe inner 1&#x27;</span>);</span><br><span class=\"line\">            expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-b&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;test 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe outer&#x27;</span>);</span><br><span class=\"line\">        expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    describe(<span class=\"string\">&#x27;describe inner 2&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe inner 2&#x27;</span>);</span><br><span class=\"line\">        test(<span class=\"string\">&#x27;test for describe inner 2&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe inner 2&#x27;</span>);</span><br><span class=\"line\">            expect(<span class=\"literal\">false</span>).toEqual(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-c&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// describe outer-a</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-b</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 2</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-c</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe outer</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"일반적인-조언\"><a href=\"#일반적인-조언\" class=\"headerlink\" title=\"일반적인 조언\"></a>일반적인 조언</h2><p>테스트가 실패하면 가장 먼저 점검해야 할 사항 중 하나는 실행되는 유일한 테스트 일 때 테스트가 실패하는지 여부입니다. Jest에서는 단 하나의 테스트만 실행하는게 간단합니다. 단지 테스트 명령을 <code>test.only</code>로 변경해주면 됩니디.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">&#x27;this will be the only test that runs&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;this test will not run&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;A&#x27;</span>).toBe(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>대규모 패키지의 일부로 실행될 때 종종 실패하지만 혼자 실행할 땐 실패하지 않는 테스트가 있을 때, 다른 테스트의 일부가 이 테스트에 간섭한다고 확신할 수 있습니다. <code>beforeEach</code>를 사용하여 공유 상태를 정리해서 이런 문제를 해결할 수 있습니다. 공유 상태가 수정되는지 여부가 확실하지 않은 경우에도 <code>beforeEach</code>를 사용하여 데이터를 기록 할 수도 있습니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/setup-teardown\">Setup and Teardown</a>을 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"설정-및-해제\"><a href=\"#설정-및-해제\" class=\"headerlink\" title=\"설정 및 해제\"></a>설정 및 해제</h1><p>테스트를 작성하는 동안 테스트를 실행하기 전에 수행해야하는 설정 작업이 있으며 테스트를 실행 한 후에 해야 할 작업이 있습니다. Jest는 이것을 처리 할 도우미 함수를 제공합니다.</p>\n<h2 id=\"많은-테스트를-위한-반복-설정\"><a href=\"#많은-테스트를-위한-반복-설정\" class=\"headerlink\" title=\"많은 테스트를 위한 반복 설정\"></a>많은 테스트를 위한 반복 설정</h2><p>많은 테스트를 위해 반복적으로 해야하는 작업이 있으면 <code>beforeEach</code>와 <code>afterEach</code>를 사용할 수 있습니다.</p>\n<p>예를 들어 여러 테스트가 도시의 데이터베이스와 상호 작용한다고 가정 해 봅시다. 이러한 각 테스트 전에 호출되어야하는 <code>initializeCityDatabase()</code> 메서드와 각 테스트 후에 호출되어야하는 <code>clearCityDatabase()</code> 메서드가 있습니다. 다음과 같이 할 수 있습니다 :</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>beforeEach</code> 및 <code>afterEach</code>는 <a href=\"https://jestjs.io/docs/en/asynchronous\">테스트가 비동기 코드를 처리하는 것과 동일한 방식</a>으로 비동기 코드를 처리 할 수 ​​있습니다. <code>done&#39; 매개 변수를 사용하거나 프로미스를 반환 할 수 있습니다. 예를 들어,</code>initializeCityDatabase()`가 데이터베이스가 초기화 될 때 resolved 된 프로미스를 반환하면, 우리는 그 프로미스를 반환하려 합니다:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"일회성-설정\"><a href=\"#일회성-설정\" class=\"headerlink\" title=\"일회성 설정\"></a>일회성 설정</h2><p>경우에 따라 파일 시작 부분에서 한 번만 설정하면 됩니다. 설정이 비동기 일 때 특히 불편할 수 있으므로 인라인으로 설정할 수 없습니다. Jest는 이러한 상황을 처리하기 위해 <code>beforeAll</code>과 <code>afterAll</code>을 제공합니다.</p>\n<p>예를 들어, <code>initializeCityDatabase</code> 및 <code>clearCityDatabase</code>가 프로미스를 반환하고 도시 데이터베이스를 테스트 간에 다시 사용할 수있는 경우, 테스트 코드를 다음과 같이 변경할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clearCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Scoping\"><a href=\"#Scoping\" class=\"headerlink\" title=\"Scoping\"></a>Scoping</h2><p>기본적으로 <code>before</code> 및 <code>after</code> 블록은 파일의 모든 테스트에 적용됩니다. 또한 <code>describe</code> 블록을 사용하여 테스트를 그룹화 할 수도 있습니다. 그들이 <code>describe</code> 블록 안에 있을 때, <code>before</code> 및 <code>after</code> 블록은 해당 <code>describe</code> 블록 내의 테스트에만 적용됩니다.</p>\n<p>예를 들어, 우리가 도시 데이터베이스 뿐만 아니라 음식 데이터베이스를 가지고 있다고 가정 해 봅시다. 다른 테스트를 위해 다른 설정을 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Applies to all tests in this file</span></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initializeCityDatabase();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has Vienna&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;Vienna&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;city database has San Juan&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(isCity(<span class=\"string\">&#x27;San Juan&#x27;</span>)).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">&#x27;matching cities to foods&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Applies only to tests in this describe block</span></span><br><span class=\"line\">    beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> initializeFoodDatabase();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;Vienna &lt;3 sausage&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        expect(isValidCityFoodPair(<span class=\"string\">&#x27;Vienna&#x27;</span>, <span class=\"string\">&#x27;Wiener Schnitzel&#x27;</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;San Juan &lt;3 plantains&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        expect(isValidCityFoodPair(<span class=\"string\">&#x27;San Juan&#x27;</span>, <span class=\"string\">&#x27;Mofongo&#x27;</span>)).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>beforeEach</code> 최상위 레벨은 <code>describe</code> 블록 내에서 <code>beforeEach</code> 앞에 실행됩니다. 모든 훅의 실행 순서를 설명하는데 도움이 될 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - beforeAll&#x27;</span>));</span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - afterAll&#x27;</span>));</span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - beforeEach&#x27;</span>));</span><br><span class=\"line\">afterEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - afterEach&#x27;</span>));</span><br><span class=\"line\">test(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1 - test&#x27;</span>));</span><br><span class=\"line\">describe(<span class=\"string\">&#x27;Scoped / Nested block&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    beforeAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - beforeAll&#x27;</span>));</span><br><span class=\"line\">    afterAll(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - afterAll&#x27;</span>));</span><br><span class=\"line\">    beforeEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - beforeEach&#x27;</span>));</span><br><span class=\"line\">    afterEach(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - afterEach&#x27;</span>));</span><br><span class=\"line\">    test(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2 - test&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - beforeEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - test</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterEach</span></span><br><span class=\"line\"><span class=\"comment\">// 2 - afterAll</span></span><br><span class=\"line\"><span class=\"comment\">// 1 - afterAll</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"describe-및-test-블록-실행-순서\"><a href=\"#describe-및-test-블록-실행-순서\" class=\"headerlink\" title=\"describe 및 test 블록 실행 순서\"></a>describe 및 test 블록 실행 순서</h2><p>Jest는 실제 테스트를 실행하기 전에 모든 테스트 핸들러를 테스트 파일에 실행합니다. 이것은 describe 블록 내부가 아닌 <code>before*</code> 및 <code>after*</code> 핸들러 내부에서 설정 및 해제를 수행해야하는 또 다른 이유입니다. describe 블록이 완료되면, 기본적으로 Jest는 수집 단계에서 모든 테스트를 순차적으로 실행하고, 각 테스트가 완료 될 때까지 기다렸다가 계속 진행하기 전에 정리합니다.</p>\n<p>다음과 같은 예시 테스트 파일 및 출력을 고려하세요:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">&#x27;outer&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-a&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    describe(<span class=\"string\">&#x27;describe inner 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe inner 1&#x27;</span>);</span><br><span class=\"line\">        test(<span class=\"string\">&#x27;test 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe inner 1&#x27;</span>);</span><br><span class=\"line\">            expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-b&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    test(<span class=\"string\">&#x27;test 1&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe outer&#x27;</span>);</span><br><span class=\"line\">        expect(<span class=\"literal\">true</span>).toEqual(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    describe(<span class=\"string\">&#x27;describe inner 2&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe inner 2&#x27;</span>);</span><br><span class=\"line\">        test(<span class=\"string\">&#x27;test for describe inner 2&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;test for describe inner 2&#x27;</span>);</span><br><span class=\"line\">            expect(<span class=\"literal\">false</span>).toEqual(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;describe outer-c&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// describe outer-a</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-b</span></span><br><span class=\"line\"><span class=\"comment\">// describe inner 2</span></span><br><span class=\"line\"><span class=\"comment\">// describe outer-c</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 1</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe outer</span></span><br><span class=\"line\"><span class=\"comment\">// test for describe inner 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"일반적인-조언\"><a href=\"#일반적인-조언\" class=\"headerlink\" title=\"일반적인 조언\"></a>일반적인 조언</h2><p>테스트가 실패하면 가장 먼저 점검해야 할 사항 중 하나는 실행되는 유일한 테스트 일 때 테스트가 실패하는지 여부입니다. Jest에서는 단 하나의 테스트만 실행하는게 간단합니다. 단지 테스트 명령을 <code>test.only</code>로 변경해주면 됩니디.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">&#x27;this will be the only test that runs&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"literal\">true</span>).toBe(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;this test will not run&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;A&#x27;</span>).toBe(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>대규모 패키지의 일부로 실행될 때 종종 실패하지만 혼자 실행할 땐 실패하지 않는 테스트가 있을 때, 다른 테스트의 일부가 이 테스트에 간섭한다고 확신할 수 있습니다. <code>beforeEach</code>를 사용하여 공유 상태를 정리해서 이런 문제를 해결할 수 있습니다. 공유 상태가 수정되는지 여부가 확실하지 않은 경우에도 <code>beforeEach</code>를 사용하여 데이터를 기록 할 수도 있습니다.</p>\n"},{"title":"Jest - Getting Started","date":"2018-11-09T01:51:02.000Z","_content":"\n해당 포스트의 내용은 Jest 공식 문서의 [Getting Started](https://jestjs.io/docs/en/getting-started)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 시작하기\n\n[`yarn`](https://yarnpkg.com/en/package/jest)으로 jest 설치하기 :\n``` bash\n    yarn add --dev jest\n```\n\n[`npm`](https://www.npmjs.com/)으로 설치 :\n``` bash\n    npm install --save-dev jest\n```\n\n이제 두 수의 합을 더해서 리턴하는 함수를 만들어서 테스트를 시작해봅시다. 먼저, `sum.js` 파일을 생성합니다.\n\n``` javascript\n    function sum(a, b) {\n        return a + b;\n    }\n    module.exports = sum;\n```\n그 다음, `sum.test.js`파일을 생성합니다. 이 파일에서 실제 테스트가 진행됩니다.\n\n``` javascript\n    const sum = require('./sum');\n\n    test('adds 1 + 2 to equal 3', () => {\n        expect(sum(1, 2)).toBe(3);\n    });\n```\n\n다음으로 `package.json`에 다음 코드를 추가합니다.\n``` javascript\n    {\n        \"scripts\": {\n            \"test\": \"jest\"\n        }\n    }\n```\n\n마지막으로 `yarn test` 혹은 `npm run test`를 해주시면 콘솔에 아래와 같은 메시지가 찍히는 것을 볼 수 있습니다.\n\n``` bash\n    PASS  ./sum.test.js\n    ✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**이것으로 당신은 Jest를 사용한 첫 테스트를 성공적으로 작성했습니다!**\n\n\n이번 테스트에선 `expect`와 `toBe`를 사용하여 두 값이 완전히 똑같다는 것을 테스트 했습니다. Jest로 테스트할 수 있는 다른 것들을 배우고 싶으시면, [Using Matchers](https://jestjs.io/docs/en/using-matchers)를 보세요.\n\n\n\n## 커맨드라인으로 실행하기\n\nCLI를 통해 다양하고, 유용한 옵션들을 사용하여 Jest를 실행할 수 있습니다.\n\nmy-test와 일치하는 파일에서 Jest를 실행하고, config.json을 구성 파일로 사용하고 실행 후 native OS 알림을 표시하는 방법은 다음과 같습니다.\n``` bash\n    jest my-test --notify --config=config.json\n```\n\n커맨드 라인을 통해 jest를 실행하는 것에 대해 더 알고 싶다면, [Jest CLI Options](https://jestjs.io/docs/en/cli) 페이지를 보십시오.\n\n\n# 추가 구성\n\n## 기본 구성 파일 생성\n프로젝트에 따라 Jest는 몇 가지 질문을 하고 각 옵션에 대한 간단한 설명과 함께 기본 구성 파일을 만듭니다.\n``` bash\n    jest --init\n```\n\n## Babel 사용하기\n[Babel](https://babeljs.io/)을 사용하려면 `babel-jest` 및 `regenerator-runtime` 패키지를 설치하십시오.\n``` bash\n    yarn add --dev babel-jest babel-core regenerator-runtime\n```\n\n> 참고: Babel 버전 7을 사용하고 있다면 다음 명령으로 `babel-jest`, `babel-core@^7.0.0-bridge.0` 및 `@ babel/core`를 설치해야합니다.\n\n``` bash\n    yarn add --dev babel-jest babel-core@^7.0.0-bridge.0 @babel/core regenerator-runtime\n```\n> node_module을 트랜스파일하려면 `babel.config.js`를 사용해야합니다. 자세한 내용은 [https://babeljs.io/docs/en/next/config-files](https://babeljs.io/docs/en/next/config-files)를 참조하십시오.<br /><br />Jest 레포지토리에서 예제를 볼 수 있습니다.<br />[https://github.com/facebook/jest/tree/master/examples/babel-7](https://github.com/facebook/jest/tree/master/examples/babel-7)\n\n\n_참고: npm 3 또는 4 또는 Yarn을 사용하는 경우 `regenerator-runtime`을 설치하지 않아도됩니다._\n\n프로젝트의 루트 폴더에 `.babelrc` 파일을 추가하는 것을 잊지 마십시오. 예를 들어, `babel-preset-env` 및 `babel-preset-react` presets과 함께 ES6 및 [React.js](https://reactjs.org/)를 사용하는 경우 :\n\n``` bash\n    {\n        \"presets\": [\"env\", \"react\"]\n    }\n```\n\n이제 모든 ES6 기능과 React specific syntax를 사용하도록 설정되었습니다.\n\n> 참고: Babel의 `env` 옵션을 사용하여 더 복잡한 Babel 구성을 사용하는 경우, Jest는 자동으로 `NODE_ENV`를 `테스트`로 정의합니다. `NODE_ENV`가 설정되어 있지 않으면 Babel과 같은 `개발` 섹션을 사용하지 않습니다.\n\n> 참고: `{ \"modules\": false}` 옵션을 사용하여 ES6 모듈의 transpilation이 해제 된 경우, 테스트 환경에서 이 기능을 활성화해야 합니다.\n\n``` bash\n{\n    \"presets\": [[\"env\", {\"modules\": false}], \"react\"],\n    \"env\": {\n    \"test\": {\n      \"presets\": [[\"env\"], \"react\"]\n      }\n    }\n}\n```\n\n> 참고: `babel-jest`는 Jest를 설치할 때 자동으로 설치되며 프로젝트에 babel 구성이 있으면 파일을 자동으로 변환합니다. 이 문제를 방지하려면 명시적으로 `transform` 구성 옵션을 재설정 할 수 있습니다.\n``` bash\n// package.json\n{\n    \"jest\": {\n        \"transform\": {}\n    }\n}\n```\n\n## 웹팩 사용하기\nJest는 assets, 스타일 및 컴파일을 관리하기 위해 [webpack](https://webpack.github.io/)을 사용하는 프로젝트에서 사용할 수 있습니다. webpack은 다른 도구에 비해 몇 가지 독특한 도전 과제를 제시합니다. 시작하려면 [webpack 안내서](https://jestjs.io/docs/en/webpack)를 참조하십시오.\n\n## 타입스크립트 사용하기\n테스트에서 TypeScript를 사용하려면 [ts-jest](https://github.com/kulshekhar/ts-jest)를 사용할 수 있습니다.","source":"_posts/jest-getting-started.md","raw":"---\ntitle: Jest - Getting Started\ndate: 2018-11-09 10:51:02\ncategories:\n    - Jest\n    - 공식 문서\ntags:\n    - Jest\n    - Getting Started\n    - Jest 번역\n---\n\n해당 포스트의 내용은 Jest 공식 문서의 [Getting Started](https://jestjs.io/docs/en/getting-started)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 시작하기\n\n[`yarn`](https://yarnpkg.com/en/package/jest)으로 jest 설치하기 :\n``` bash\n    yarn add --dev jest\n```\n\n[`npm`](https://www.npmjs.com/)으로 설치 :\n``` bash\n    npm install --save-dev jest\n```\n\n이제 두 수의 합을 더해서 리턴하는 함수를 만들어서 테스트를 시작해봅시다. 먼저, `sum.js` 파일을 생성합니다.\n\n``` javascript\n    function sum(a, b) {\n        return a + b;\n    }\n    module.exports = sum;\n```\n그 다음, `sum.test.js`파일을 생성합니다. 이 파일에서 실제 테스트가 진행됩니다.\n\n``` javascript\n    const sum = require('./sum');\n\n    test('adds 1 + 2 to equal 3', () => {\n        expect(sum(1, 2)).toBe(3);\n    });\n```\n\n다음으로 `package.json`에 다음 코드를 추가합니다.\n``` javascript\n    {\n        \"scripts\": {\n            \"test\": \"jest\"\n        }\n    }\n```\n\n마지막으로 `yarn test` 혹은 `npm run test`를 해주시면 콘솔에 아래와 같은 메시지가 찍히는 것을 볼 수 있습니다.\n\n``` bash\n    PASS  ./sum.test.js\n    ✓ adds 1 + 2 to equal 3 (5ms)\n```\n\n**이것으로 당신은 Jest를 사용한 첫 테스트를 성공적으로 작성했습니다!**\n\n\n이번 테스트에선 `expect`와 `toBe`를 사용하여 두 값이 완전히 똑같다는 것을 테스트 했습니다. Jest로 테스트할 수 있는 다른 것들을 배우고 싶으시면, [Using Matchers](https://jestjs.io/docs/en/using-matchers)를 보세요.\n\n\n\n## 커맨드라인으로 실행하기\n\nCLI를 통해 다양하고, 유용한 옵션들을 사용하여 Jest를 실행할 수 있습니다.\n\nmy-test와 일치하는 파일에서 Jest를 실행하고, config.json을 구성 파일로 사용하고 실행 후 native OS 알림을 표시하는 방법은 다음과 같습니다.\n``` bash\n    jest my-test --notify --config=config.json\n```\n\n커맨드 라인을 통해 jest를 실행하는 것에 대해 더 알고 싶다면, [Jest CLI Options](https://jestjs.io/docs/en/cli) 페이지를 보십시오.\n\n\n# 추가 구성\n\n## 기본 구성 파일 생성\n프로젝트에 따라 Jest는 몇 가지 질문을 하고 각 옵션에 대한 간단한 설명과 함께 기본 구성 파일을 만듭니다.\n``` bash\n    jest --init\n```\n\n## Babel 사용하기\n[Babel](https://babeljs.io/)을 사용하려면 `babel-jest` 및 `regenerator-runtime` 패키지를 설치하십시오.\n``` bash\n    yarn add --dev babel-jest babel-core regenerator-runtime\n```\n\n> 참고: Babel 버전 7을 사용하고 있다면 다음 명령으로 `babel-jest`, `babel-core@^7.0.0-bridge.0` 및 `@ babel/core`를 설치해야합니다.\n\n``` bash\n    yarn add --dev babel-jest babel-core@^7.0.0-bridge.0 @babel/core regenerator-runtime\n```\n> node_module을 트랜스파일하려면 `babel.config.js`를 사용해야합니다. 자세한 내용은 [https://babeljs.io/docs/en/next/config-files](https://babeljs.io/docs/en/next/config-files)를 참조하십시오.<br /><br />Jest 레포지토리에서 예제를 볼 수 있습니다.<br />[https://github.com/facebook/jest/tree/master/examples/babel-7](https://github.com/facebook/jest/tree/master/examples/babel-7)\n\n\n_참고: npm 3 또는 4 또는 Yarn을 사용하는 경우 `regenerator-runtime`을 설치하지 않아도됩니다._\n\n프로젝트의 루트 폴더에 `.babelrc` 파일을 추가하는 것을 잊지 마십시오. 예를 들어, `babel-preset-env` 및 `babel-preset-react` presets과 함께 ES6 및 [React.js](https://reactjs.org/)를 사용하는 경우 :\n\n``` bash\n    {\n        \"presets\": [\"env\", \"react\"]\n    }\n```\n\n이제 모든 ES6 기능과 React specific syntax를 사용하도록 설정되었습니다.\n\n> 참고: Babel의 `env` 옵션을 사용하여 더 복잡한 Babel 구성을 사용하는 경우, Jest는 자동으로 `NODE_ENV`를 `테스트`로 정의합니다. `NODE_ENV`가 설정되어 있지 않으면 Babel과 같은 `개발` 섹션을 사용하지 않습니다.\n\n> 참고: `{ \"modules\": false}` 옵션을 사용하여 ES6 모듈의 transpilation이 해제 된 경우, 테스트 환경에서 이 기능을 활성화해야 합니다.\n\n``` bash\n{\n    \"presets\": [[\"env\", {\"modules\": false}], \"react\"],\n    \"env\": {\n    \"test\": {\n      \"presets\": [[\"env\"], \"react\"]\n      }\n    }\n}\n```\n\n> 참고: `babel-jest`는 Jest를 설치할 때 자동으로 설치되며 프로젝트에 babel 구성이 있으면 파일을 자동으로 변환합니다. 이 문제를 방지하려면 명시적으로 `transform` 구성 옵션을 재설정 할 수 있습니다.\n``` bash\n// package.json\n{\n    \"jest\": {\n        \"transform\": {}\n    }\n}\n```\n\n## 웹팩 사용하기\nJest는 assets, 스타일 및 컴파일을 관리하기 위해 [webpack](https://webpack.github.io/)을 사용하는 프로젝트에서 사용할 수 있습니다. webpack은 다른 도구에 비해 몇 가지 독특한 도전 과제를 제시합니다. 시작하려면 [webpack 안내서](https://jestjs.io/docs/en/webpack)를 참조하십시오.\n\n## 타입스크립트 사용하기\n테스트에서 TypeScript를 사용하려면 [ts-jest](https://github.com/kulshekhar/ts-jest)를 사용할 수 있습니다.","slug":"jest-getting-started","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs1006cbqwx7n609lx9","content":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/getting-started\">Getting Started</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"시작하기\"><a href=\"#시작하기\" class=\"headerlink\" title=\"시작하기\"></a>시작하기</h1><p><a href=\"https://yarnpkg.com/en/package/jest\"><code>yarn</code></a>으로 jest 설치하기 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev jest</span><br></pre></td></tr></table></figure><br><a href=\"https://www.npmjs.com/\"><code>npm</code></a>으로 설치 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev jest</span><br></pre></td></tr></table></figure><br>이제 두 수의 합을 더해서 리턴하는 함수를 만들어서 테스트를 시작해봅시다. 먼저, <code>sum.js</code> 파일을 생성합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure>\n<p>그 다음, <code>sum.test.js</code>파일을 생성합니다. 이 파일에서 실제 테스트가 진행됩니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./sum&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>다음으로 <code>package.json</code>에 다음 코드를 추가합니다.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;jest&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>마지막으로 <code>yarn test</code> 혹은 <code>npm run test</code>를 해주시면 콘솔에 아래와 같은 메시지가 찍히는 것을 볼 수 있습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.js</span><br><span class=\"line\">✓ adds 1 + 2 to equal 3 (5ms)</span><br></pre></td></tr></table></figure>\n<p><strong>이것으로 당신은 Jest를 사용한 첫 테스트를 성공적으로 작성했습니다!</strong></p>\n<p>이번 테스트에선 <code>expect</code>와 <code>toBe</code>를 사용하여 두 값이 완전히 똑같다는 것을 테스트 했습니다. Jest로 테스트할 수 있는 다른 것들을 배우고 싶으시면, <a href=\"https://jestjs.io/docs/en/using-matchers\">Using Matchers</a>를 보세요.</p>\n<h2 id=\"커맨드라인으로-실행하기\"><a href=\"#커맨드라인으로-실행하기\" class=\"headerlink\" title=\"커맨드라인으로 실행하기\"></a>커맨드라인으로 실행하기</h2><p>CLI를 통해 다양하고, 유용한 옵션들을 사용하여 Jest를 실행할 수 있습니다.</p>\n<p>my-test와 일치하는 파일에서 Jest를 실행하고, config.json을 구성 파일로 사용하고 실행 후 native OS 알림을 표시하는 방법은 다음과 같습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest my-test --notify --config=config.json</span><br></pre></td></tr></table></figure><br>커맨드 라인을 통해 jest를 실행하는 것에 대해 더 알고 싶다면, <a href=\"https://jestjs.io/docs/en/cli\">Jest CLI Options</a> 페이지를 보십시오.</p>\n<h1 id=\"추가-구성\"><a href=\"#추가-구성\" class=\"headerlink\" title=\"추가 구성\"></a>추가 구성</h1><h2 id=\"기본-구성-파일-생성\"><a href=\"#기본-구성-파일-생성\" class=\"headerlink\" title=\"기본 구성 파일 생성\"></a>기본 구성 파일 생성</h2><p>프로젝트에 따라 Jest는 몇 가지 질문을 하고 각 옵션에 대한 간단한 설명과 함께 기본 구성 파일을 만듭니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest --init</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Babel-사용하기\"><a href=\"#Babel-사용하기\" class=\"headerlink\" title=\"Babel 사용하기\"></a>Babel 사용하기</h2><p><a href=\"https://babeljs.io/\">Babel</a>을 사용하려면 <code>babel-jest</code> 및 <code>regenerator-runtime</code> 패키지를 설치하십시오.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev babel-jest babel-core regenerator-runtime</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>참고: Babel 버전 7을 사용하고 있다면 다음 명령으로 <code>babel-jest</code>, <code>babel-core@^7.0.0-bridge.0</code> 및 <code>@ babel/core</code>를 설치해야합니다.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev babel-jest babel-core@^7.0.0-bridge.0 @babel/core regenerator-runtime</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>node_module을 트랜스파일하려면 <code>babel.config.js</code>를 사용해야합니다. 자세한 내용은 <a href=\"https://babeljs.io/docs/en/next/config-files\">https://babeljs.io/docs/en/next/config-files</a>를 참조하십시오.<br /><br />Jest 레포지토리에서 예제를 볼 수 있습니다.<br /><a href=\"https://github.com/facebook/jest/tree/master/examples/babel-7\">https://github.com/facebook/jest/tree/master/examples/babel-7</a></p>\n</blockquote>\n<p><em>참고: npm 3 또는 4 또는 Yarn을 사용하는 경우 <code>regenerator-runtime</code>을 설치하지 않아도됩니다.</em></p>\n<p>프로젝트의 루트 폴더에 <code>.babelrc</code> 파일을 추가하는 것을 잊지 마십시오. 예를 들어, <code>babel-preset-env</code> 및 <code>babel-preset-react</code> presets과 함께 ES6 및 <a href=\"https://reactjs.org/\">React.js</a>를 사용하는 경우 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;env&quot;</span>, <span class=\"string\">&quot;react&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 모든 ES6 기능과 React specific syntax를 사용하도록 설정되었습니다.</p>\n<blockquote>\n<p>참고: Babel의 <code>env</code> 옵션을 사용하여 더 복잡한 Babel 구성을 사용하는 경우, Jest는 자동으로 <code>NODE_ENV</code>를 <code>테스트</code>로 정의합니다. <code>NODE_ENV</code>가 설정되어 있지 않으면 Babel과 같은 <code>개발</code> 섹션을 사용하지 않습니다.</p>\n</blockquote>\n<blockquote>\n<p>참고: <code>&#123; &quot;modules&quot;: false&#125;</code> 옵션을 사용하여 ES6 모듈의 transpilation이 해제 된 경우, 테스트 환경에서 이 기능을 활성화해야 합니다.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123;<span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span>&#125;], <span class=\"string\">&quot;react&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>], <span class=\"string\">&quot;react&quot;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>참고: <code>babel-jest</code>는 Jest를 설치할 때 자동으로 설치되며 프로젝트에 babel 구성이 있으면 파일을 자동으로 변환합니다. 이 문제를 방지하려면 명시적으로 <code>transform</code> 구성 옵션을 재설정 할 수 있습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jest&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;transform&quot;</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"웹팩-사용하기\"><a href=\"#웹팩-사용하기\" class=\"headerlink\" title=\"웹팩 사용하기\"></a>웹팩 사용하기</h2><p>Jest는 assets, 스타일 및 컴파일을 관리하기 위해 <a href=\"https://webpack.github.io/\">webpack</a>을 사용하는 프로젝트에서 사용할 수 있습니다. webpack은 다른 도구에 비해 몇 가지 독특한 도전 과제를 제시합니다. 시작하려면 <a href=\"https://jestjs.io/docs/en/webpack\">webpack 안내서</a>를 참조하십시오.</p>\n<h2 id=\"타입스크립트-사용하기\"><a href=\"#타입스크립트-사용하기\" class=\"headerlink\" title=\"타입스크립트 사용하기\"></a>타입스크립트 사용하기</h2><p>테스트에서 TypeScript를 사용하려면 <a href=\"https://github.com/kulshekhar/ts-jest\">ts-jest</a>를 사용할 수 있습니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/getting-started\">Getting Started</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"시작하기\"><a href=\"#시작하기\" class=\"headerlink\" title=\"시작하기\"></a>시작하기</h1><p><a href=\"https://yarnpkg.com/en/package/jest\"><code>yarn</code></a>으로 jest 설치하기 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev jest</span><br></pre></td></tr></table></figure><br><a href=\"https://www.npmjs.com/\"><code>npm</code></a>으로 설치 :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev jest</span><br></pre></td></tr></table></figure><br>이제 두 수의 합을 더해서 리턴하는 함수를 만들어서 테스트를 시작해봅시다. 먼저, <code>sum.js</code> 파일을 생성합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sum;</span><br></pre></td></tr></table></figure>\n<p>그 다음, <code>sum.test.js</code>파일을 생성합니다. 이 파일에서 실제 테스트가 진행됩니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sum = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./sum&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;adds 1 + 2 to equal 3&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)).toBe(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>다음으로 <code>package.json</code>에 다음 코드를 추가합니다.<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;jest&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>마지막으로 <code>yarn test</code> 혹은 <code>npm run test</code>를 해주시면 콘솔에 아래와 같은 메시지가 찍히는 것을 볼 수 있습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PASS  ./sum.test.js</span><br><span class=\"line\">✓ adds 1 + 2 to equal 3 (5ms)</span><br></pre></td></tr></table></figure>\n<p><strong>이것으로 당신은 Jest를 사용한 첫 테스트를 성공적으로 작성했습니다!</strong></p>\n<p>이번 테스트에선 <code>expect</code>와 <code>toBe</code>를 사용하여 두 값이 완전히 똑같다는 것을 테스트 했습니다. Jest로 테스트할 수 있는 다른 것들을 배우고 싶으시면, <a href=\"https://jestjs.io/docs/en/using-matchers\">Using Matchers</a>를 보세요.</p>\n<h2 id=\"커맨드라인으로-실행하기\"><a href=\"#커맨드라인으로-실행하기\" class=\"headerlink\" title=\"커맨드라인으로 실행하기\"></a>커맨드라인으로 실행하기</h2><p>CLI를 통해 다양하고, 유용한 옵션들을 사용하여 Jest를 실행할 수 있습니다.</p>\n<p>my-test와 일치하는 파일에서 Jest를 실행하고, config.json을 구성 파일로 사용하고 실행 후 native OS 알림을 표시하는 방법은 다음과 같습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest my-test --notify --config=config.json</span><br></pre></td></tr></table></figure><br>커맨드 라인을 통해 jest를 실행하는 것에 대해 더 알고 싶다면, <a href=\"https://jestjs.io/docs/en/cli\">Jest CLI Options</a> 페이지를 보십시오.</p>\n<h1 id=\"추가-구성\"><a href=\"#추가-구성\" class=\"headerlink\" title=\"추가 구성\"></a>추가 구성</h1><h2 id=\"기본-구성-파일-생성\"><a href=\"#기본-구성-파일-생성\" class=\"headerlink\" title=\"기본 구성 파일 생성\"></a>기본 구성 파일 생성</h2><p>프로젝트에 따라 Jest는 몇 가지 질문을 하고 각 옵션에 대한 간단한 설명과 함께 기본 구성 파일을 만듭니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest --init</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Babel-사용하기\"><a href=\"#Babel-사용하기\" class=\"headerlink\" title=\"Babel 사용하기\"></a>Babel 사용하기</h2><p><a href=\"https://babeljs.io/\">Babel</a>을 사용하려면 <code>babel-jest</code> 및 <code>regenerator-runtime</code> 패키지를 설치하십시오.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev babel-jest babel-core regenerator-runtime</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>참고: Babel 버전 7을 사용하고 있다면 다음 명령으로 <code>babel-jest</code>, <code>babel-core@^7.0.0-bridge.0</code> 및 <code>@ babel/core</code>를 설치해야합니다.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn add --dev babel-jest babel-core@^7.0.0-bridge.0 @babel/core regenerator-runtime</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>node_module을 트랜스파일하려면 <code>babel.config.js</code>를 사용해야합니다. 자세한 내용은 <a href=\"https://babeljs.io/docs/en/next/config-files\">https://babeljs.io/docs/en/next/config-files</a>를 참조하십시오.<br /><br />Jest 레포지토리에서 예제를 볼 수 있습니다.<br /><a href=\"https://github.com/facebook/jest/tree/master/examples/babel-7\">https://github.com/facebook/jest/tree/master/examples/babel-7</a></p>\n</blockquote>\n<p><em>참고: npm 3 또는 4 또는 Yarn을 사용하는 경우 <code>regenerator-runtime</code>을 설치하지 않아도됩니다.</em></p>\n<p>프로젝트의 루트 폴더에 <code>.babelrc</code> 파일을 추가하는 것을 잊지 마십시오. 예를 들어, <code>babel-preset-env</code> 및 <code>babel-preset-react</code> presets과 함께 ES6 및 <a href=\"https://reactjs.org/\">React.js</a>를 사용하는 경우 :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [<span class=\"string\">&quot;env&quot;</span>, <span class=\"string\">&quot;react&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 모든 ES6 기능과 React specific syntax를 사용하도록 설정되었습니다.</p>\n<blockquote>\n<p>참고: Babel의 <code>env</code> 옵션을 사용하여 더 복잡한 Babel 구성을 사용하는 경우, Jest는 자동으로 <code>NODE_ENV</code>를 <code>테스트</code>로 정의합니다. <code>NODE_ENV</code>가 설정되어 있지 않으면 Babel과 같은 <code>개발</code> 섹션을 사용하지 않습니다.</p>\n</blockquote>\n<blockquote>\n<p>참고: <code>&#123; &quot;modules&quot;: false&#125;</code> 옵션을 사용하여 ES6 모듈의 transpilation이 해제 된 경우, 테스트 환경에서 이 기능을 활성화해야 합니다.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>, &#123;<span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span>&#125;], <span class=\"string\">&quot;react&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;presets&quot;</span>: [[<span class=\"string\">&quot;env&quot;</span>], <span class=\"string\">&quot;react&quot;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>참고: <code>babel-jest</code>는 Jest를 설치할 때 자동으로 설치되며 프로젝트에 babel 구성이 있으면 파일을 자동으로 변환합니다. 이 문제를 방지하려면 명시적으로 <code>transform</code> 구성 옵션을 재설정 할 수 있습니다.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jest&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;transform&quot;</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"웹팩-사용하기\"><a href=\"#웹팩-사용하기\" class=\"headerlink\" title=\"웹팩 사용하기\"></a>웹팩 사용하기</h2><p>Jest는 assets, 스타일 및 컴파일을 관리하기 위해 <a href=\"https://webpack.github.io/\">webpack</a>을 사용하는 프로젝트에서 사용할 수 있습니다. webpack은 다른 도구에 비해 몇 가지 독특한 도전 과제를 제시합니다. 시작하려면 <a href=\"https://jestjs.io/docs/en/webpack\">webpack 안내서</a>를 참조하십시오.</p>\n<h2 id=\"타입스크립트-사용하기\"><a href=\"#타입스크립트-사용하기\" class=\"headerlink\" title=\"타입스크립트 사용하기\"></a>타입스크립트 사용하기</h2><p>테스트에서 TypeScript를 사용하려면 <a href=\"https://github.com/kulshekhar/ts-jest\">ts-jest</a>를 사용할 수 있습니다.</p>\n"},{"title":"Jest - Testing Asynchronous Code","date":"2019-05-03T05:34:02.000Z","_content":"\n해당 포스트의 내용은 Jest 공식 문서의 [Testing Asynchronous Code](https://jestjs.io/docs/en/asynchronous)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 비동기 코드 테스트 하기\n\nJavaScript에서 비동기 적으로 실행되는 코드는 일반적입니다. 비동기로 실행되는 코드가있는 경우, Jest는 테스트 중인 코드가 완료된 시점을 알아야 다른 테스트로 넘어갈 수 있습니다. Jest는 이를 처리할 몇가지 방법이 있습니다.\n\n## Callbacks\n\n가장 일반적인 비동기 패턴은 콜백입니다.\n\n예를 들어 일부 데이터를 가져와 `callback(data)`이 완료되면 호출하는 `fetchData(callback)` 함수가 있다고 가정해보겠습니다. 이때 반환 된 데이터가 `'peanut butter'` 문자열 인지 테스트 하려고 합니다.\n\n기본적으로 Jest 테스트는 실행이 끝나면 완료됩니다. 즉, 이 테스트는 의도 한대로 동작하지 않습니다.\n\n```javascript\n// Don't do this!\ntest('the data is peanut butter', () => {\n    function callback(data) {\n        expect(data).toBe('peanut butter');\n    }\n\n    fetchData(callback);\n});\n```\n\n문제는 `fetchData`가 완료되면, 즉시 콜백을 호출하기 전에 테스트가 완료된다는 것입니다.\n\n이 문제를 해결하는 다른 형태의 `테스트`가 있습니다. 빈 인자가 있는 함수에 테스트를 두는 대신에, `done`이라는 단일 인자를 사용하십시오. Jest는 테스트가 끝나기 전에 done 콜백이 호출 될 때까지 기다릴 것 입니다.\n\n```javascript\ntest('the data is peanut butter', done => {\n    function callback(data) {\n        expect(data).toBe('peanut butter');\n        done();\n    }\n\n    fetchData(callback);\n});\n```\n\n우리가 원하는대로, `done()`이 호출되지 않으면 테스트가 실패할 것 입니다.\n\n## Promises\n\n코드가 `Promise`를 사용할 때, 비동기 테스트를 처리하는 간단한 방법이 있습니다. 테스트에서 `Promise`를 리턴하면, Jest는 그 `Promise`가 `resolve` 될 때까지 기다릴 것입니다. `Promise`가 `reject`되면 테스트는 자동으로 실패합니다.\n\n예를 들어, 콜백을 사용하는 대신 `fetchData`가 `resolve`일때 `'peanut butter'` 문자열을 반환하는 `promise`라고 가정 해 봅시다. 우리는 다음과 같이 테스트 할 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', () => {\n    return fetchData().then(data => {\n        expect(data).toBe('peanut butter');\n    });\n});\n```\n\n프로미스의 return을 확실하게 하세요. 만약 `return` 문을 생략하면, `fetchData`가 `resolve` 되고 `then()`이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.\n\n프로미스가 `reject` 될 것으로 예상되면 `.catch` 메소드를 사용하십시오. `expect.assertions`를 추가하여 특정 수의 어설션이 호출되는지 확인하십시오. 그렇지 않으면 `fulfilled`인 프로미스가 테스트를 통과하지 못할 것 입니다.\n\n```javascript\ntest('the fetch fails with an error', () => {\n    expect.assertions(1);\n    return fetchData().catch(e => expect(e).toMatch('error'));\n});\n```\n\n## .resolves / .rejects\n\nexpect 문에서 `.resolves` matcher를 사용할 수도 있습니다. Jest는 프로미스가 resolve 될때까지 기다릴 것입니다. 프로미스가 `rejected`되면 테스트는 자동으로 실패합니다.\n\n```javascript\ntest('the data is peanut butter', () => {\n    return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n어설션의 return을 확실하게 하세요. 만약 `return` 문을 생략하면, `fetchData`가 `resolve` 되고 `then()`이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.\n\n프로미스가 `reject` 될 것으로 예상되면 `.rejects` matcher를 사용하세요. `.resolves` matcher와 유사하게 작동합니다. 프로미스가 `fulfilled`되면 테스트는 자동으로 실패합니다.\n\n```javascript\ntest('the fetch fails with an error', () => {\n    return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n## Async/Await\n\n또는 `async`와 `await`를 사용하여 테스트를 기다릴 수도 있습니다. 비동기 테스트를 작성하려면 `test`에 전달 된 함수 앞에 `async` 키워드를 사용하면 됩니다. 예를 들어 동일한 `fetchData` 시나리오를 다음과 같이 테스트 할 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', async () => {\n    expect.assertions(1);\n    const data = await fetchData();\n    expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n    expect.assertions(1);\n    try {\n        await fetchData();\n    } catch (e) {\n        expect(e).toMatch('error');\n    }\n});\n```\n\n물론 `async`와 `await`를 `.resolves`나 `.rejects`와 함께 쓸 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', async () => {\n    await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n    await expect(fetchData()).rejects.toThrow('error');\n});\n```\n\n이 경우, `async`와 `await`은 실제로 promise 예제에서 사용하는 것과 동일한 로직에 대한 문법적 첨가일 뿐입니다.\n\n이 형식 중 다른 형식보다 특히 뛰어난 형식은 없으며, 코드베이스 전체 또는 단일 파일에서 혼합하여 사용할 수 있습니다. 테스트 스타일을 단순하게 만드는 것에 달려 있습니다.\n","source":"_posts/jest-testing-asynchronous-code.md","raw":"---\ntitle: Jest - Testing Asynchronous Code\ndate: 2019-05-03 14:34:02\ncategories:\n    - Jest\n    - 공식 문서\ntags:\n    - Jest\n    - Unit Test\n    - Jest 번역\n    - 비동기 테스트\n    - Test Asynchronous Code\n---\n\n해당 포스트의 내용은 Jest 공식 문서의 [Testing Asynchronous Code](https://jestjs.io/docs/en/asynchronous)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# 비동기 코드 테스트 하기\n\nJavaScript에서 비동기 적으로 실행되는 코드는 일반적입니다. 비동기로 실행되는 코드가있는 경우, Jest는 테스트 중인 코드가 완료된 시점을 알아야 다른 테스트로 넘어갈 수 있습니다. Jest는 이를 처리할 몇가지 방법이 있습니다.\n\n## Callbacks\n\n가장 일반적인 비동기 패턴은 콜백입니다.\n\n예를 들어 일부 데이터를 가져와 `callback(data)`이 완료되면 호출하는 `fetchData(callback)` 함수가 있다고 가정해보겠습니다. 이때 반환 된 데이터가 `'peanut butter'` 문자열 인지 테스트 하려고 합니다.\n\n기본적으로 Jest 테스트는 실행이 끝나면 완료됩니다. 즉, 이 테스트는 의도 한대로 동작하지 않습니다.\n\n```javascript\n// Don't do this!\ntest('the data is peanut butter', () => {\n    function callback(data) {\n        expect(data).toBe('peanut butter');\n    }\n\n    fetchData(callback);\n});\n```\n\n문제는 `fetchData`가 완료되면, 즉시 콜백을 호출하기 전에 테스트가 완료된다는 것입니다.\n\n이 문제를 해결하는 다른 형태의 `테스트`가 있습니다. 빈 인자가 있는 함수에 테스트를 두는 대신에, `done`이라는 단일 인자를 사용하십시오. Jest는 테스트가 끝나기 전에 done 콜백이 호출 될 때까지 기다릴 것 입니다.\n\n```javascript\ntest('the data is peanut butter', done => {\n    function callback(data) {\n        expect(data).toBe('peanut butter');\n        done();\n    }\n\n    fetchData(callback);\n});\n```\n\n우리가 원하는대로, `done()`이 호출되지 않으면 테스트가 실패할 것 입니다.\n\n## Promises\n\n코드가 `Promise`를 사용할 때, 비동기 테스트를 처리하는 간단한 방법이 있습니다. 테스트에서 `Promise`를 리턴하면, Jest는 그 `Promise`가 `resolve` 될 때까지 기다릴 것입니다. `Promise`가 `reject`되면 테스트는 자동으로 실패합니다.\n\n예를 들어, 콜백을 사용하는 대신 `fetchData`가 `resolve`일때 `'peanut butter'` 문자열을 반환하는 `promise`라고 가정 해 봅시다. 우리는 다음과 같이 테스트 할 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', () => {\n    return fetchData().then(data => {\n        expect(data).toBe('peanut butter');\n    });\n});\n```\n\n프로미스의 return을 확실하게 하세요. 만약 `return` 문을 생략하면, `fetchData`가 `resolve` 되고 `then()`이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.\n\n프로미스가 `reject` 될 것으로 예상되면 `.catch` 메소드를 사용하십시오. `expect.assertions`를 추가하여 특정 수의 어설션이 호출되는지 확인하십시오. 그렇지 않으면 `fulfilled`인 프로미스가 테스트를 통과하지 못할 것 입니다.\n\n```javascript\ntest('the fetch fails with an error', () => {\n    expect.assertions(1);\n    return fetchData().catch(e => expect(e).toMatch('error'));\n});\n```\n\n## .resolves / .rejects\n\nexpect 문에서 `.resolves` matcher를 사용할 수도 있습니다. Jest는 프로미스가 resolve 될때까지 기다릴 것입니다. 프로미스가 `rejected`되면 테스트는 자동으로 실패합니다.\n\n```javascript\ntest('the data is peanut butter', () => {\n    return expect(fetchData()).resolves.toBe('peanut butter');\n});\n```\n\n어설션의 return을 확실하게 하세요. 만약 `return` 문을 생략하면, `fetchData`가 `resolve` 되고 `then()`이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.\n\n프로미스가 `reject` 될 것으로 예상되면 `.rejects` matcher를 사용하세요. `.resolves` matcher와 유사하게 작동합니다. 프로미스가 `fulfilled`되면 테스트는 자동으로 실패합니다.\n\n```javascript\ntest('the fetch fails with an error', () => {\n    return expect(fetchData()).rejects.toMatch('error');\n});\n```\n\n## Async/Await\n\n또는 `async`와 `await`를 사용하여 테스트를 기다릴 수도 있습니다. 비동기 테스트를 작성하려면 `test`에 전달 된 함수 앞에 `async` 키워드를 사용하면 됩니다. 예를 들어 동일한 `fetchData` 시나리오를 다음과 같이 테스트 할 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', async () => {\n    expect.assertions(1);\n    const data = await fetchData();\n    expect(data).toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n    expect.assertions(1);\n    try {\n        await fetchData();\n    } catch (e) {\n        expect(e).toMatch('error');\n    }\n});\n```\n\n물론 `async`와 `await`를 `.resolves`나 `.rejects`와 함께 쓸 수 있습니다.\n\n```javascript\ntest('the data is peanut butter', async () => {\n    await expect(fetchData()).resolves.toBe('peanut butter');\n});\n\ntest('the fetch fails with an error', async () => {\n    await expect(fetchData()).rejects.toThrow('error');\n});\n```\n\n이 경우, `async`와 `await`은 실제로 promise 예제에서 사용하는 것과 동일한 로직에 대한 문법적 첨가일 뿐입니다.\n\n이 형식 중 다른 형식보다 특히 뛰어난 형식은 없으며, 코드베이스 전체 또는 단일 파일에서 혼합하여 사용할 수 있습니다. 테스트 스타일을 단순하게 만드는 것에 달려 있습니다.\n","slug":"jest-testing-asynchronous-code","published":1,"updated":"2021-04-10T07:56:03.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs4006ebqwx4vxyc276","content":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/asynchronous\">Testing Asynchronous Code</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"비동기-코드-테스트-하기\"><a href=\"#비동기-코드-테스트-하기\" class=\"headerlink\" title=\"비동기 코드 테스트 하기\"></a>비동기 코드 테스트 하기</h1><p>JavaScript에서 비동기 적으로 실행되는 코드는 일반적입니다. 비동기로 실행되는 코드가있는 경우, Jest는 테스트 중인 코드가 완료된 시점을 알아야 다른 테스트로 넘어갈 수 있습니다. Jest는 이를 처리할 몇가지 방법이 있습니다.</p>\n<h2 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h2><p>가장 일반적인 비동기 패턴은 콜백입니다.</p>\n<p>예를 들어 일부 데이터를 가져와 <code>callback(data)</code>이 완료되면 호출하는 <code>fetchData(callback)</code> 함수가 있다고 가정해보겠습니다. 이때 반환 된 데이터가 <code>&#39;peanut butter&#39;</code> 문자열 인지 테스트 하려고 합니다.</p>\n<p>기본적으로 Jest 테스트는 실행이 끝나면 완료됩니다. 즉, 이 테스트는 의도 한대로 동작하지 않습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Don&#x27;t do this!</span></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>문제는 <code>fetchData</code>가 완료되면, 즉시 콜백을 호출하기 전에 테스트가 완료된다는 것입니다.</p>\n<p>이 문제를 해결하는 다른 형태의 <code>테스트</code>가 있습니다. 빈 인자가 있는 함수에 테스트를 두는 대신에, <code>done</code>이라는 단일 인자를 사용하십시오. Jest는 테스트가 끝나기 전에 done 콜백이 호출 될 때까지 기다릴 것 입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>우리가 원하는대로, <code>done()</code>이 호출되지 않으면 테스트가 실패할 것 입니다.</p>\n<h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><p>코드가 <code>Promise</code>를 사용할 때, 비동기 테스트를 처리하는 간단한 방법이 있습니다. 테스트에서 <code>Promise</code>를 리턴하면, Jest는 그 <code>Promise</code>가 <code>resolve</code> 될 때까지 기다릴 것입니다. <code>Promise</code>가 <code>reject</code>되면 테스트는 자동으로 실패합니다.</p>\n<p>예를 들어, 콜백을 사용하는 대신 <code>fetchData</code>가 <code>resolve</code>일때 <code>&#39;peanut butter&#39;</code> 문자열을 반환하는 <code>promise</code>라고 가정 해 봅시다. 우리는 다음과 같이 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>프로미스의 return을 확실하게 하세요. 만약 <code>return</code> 문을 생략하면, <code>fetchData</code>가 <code>resolve</code> 되고 <code>then()</code>이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.</p>\n<p>프로미스가 <code>reject</code> 될 것으로 예상되면 <code>.catch</code> 메소드를 사용하십시오. <code>expect.assertions</code>를 추가하여 특정 수의 어설션이 호출되는지 확인하십시오. 그렇지 않으면 <code>fulfilled</code>인 프로미스가 테스트를 통과하지 못할 것 입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> expect(e).toMatch(<span class=\"string\">&#x27;error&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"resolves-rejects\"><a href=\"#resolves-rejects\" class=\"headerlink\" title=\".resolves / .rejects\"></a>.resolves / .rejects</h2><p>expect 문에서 <code>.resolves</code> matcher를 사용할 수도 있습니다. Jest는 프로미스가 resolve 될때까지 기다릴 것입니다. 프로미스가 <code>rejected</code>되면 테스트는 자동으로 실패합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> expect(fetchData()).resolves.toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>어설션의 return을 확실하게 하세요. 만약 <code>return</code> 문을 생략하면, <code>fetchData</code>가 <code>resolve</code> 되고 <code>then()</code>이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.</p>\n<p>프로미스가 <code>reject</code> 될 것으로 예상되면 <code>.rejects</code> matcher를 사용하세요. <code>.resolves</code> matcher와 유사하게 작동합니다. 프로미스가 <code>fulfilled</code>되면 테스트는 자동으로 실패합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> expect(fetchData()).rejects.toMatch(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h2><p>또는 <code>async</code>와 <code>await</code>를 사용하여 테스트를 기다릴 수도 있습니다. 비동기 테스트를 작성하려면 <code>test</code>에 전달 된 함수 앞에 <code>async</code> 키워드를 사용하면 됩니다. 예를 들어 동일한 <code>fetchData</code> 시나리오를 다음과 같이 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        expect(e).toMatch(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>물론 <code>async</code>와 <code>await</code>를 <code>.resolves</code>나 <code>.rejects</code>와 함께 쓸 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> expect(fetchData()).resolves.toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> expect(fetchData()).rejects.toThrow(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>이 경우, <code>async</code>와 <code>await</code>은 실제로 promise 예제에서 사용하는 것과 동일한 로직에 대한 문법적 첨가일 뿐입니다.</p>\n<p>이 형식 중 다른 형식보다 특히 뛰어난 형식은 없으며, 코드베이스 전체 또는 단일 파일에서 혼합하여 사용할 수 있습니다. 테스트 스타일을 단순하게 만드는 것에 달려 있습니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/asynchronous\">Testing Asynchronous Code</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"비동기-코드-테스트-하기\"><a href=\"#비동기-코드-테스트-하기\" class=\"headerlink\" title=\"비동기 코드 테스트 하기\"></a>비동기 코드 테스트 하기</h1><p>JavaScript에서 비동기 적으로 실행되는 코드는 일반적입니다. 비동기로 실행되는 코드가있는 경우, Jest는 테스트 중인 코드가 완료된 시점을 알아야 다른 테스트로 넘어갈 수 있습니다. Jest는 이를 처리할 몇가지 방법이 있습니다.</p>\n<h2 id=\"Callbacks\"><a href=\"#Callbacks\" class=\"headerlink\" title=\"Callbacks\"></a>Callbacks</h2><p>가장 일반적인 비동기 패턴은 콜백입니다.</p>\n<p>예를 들어 일부 데이터를 가져와 <code>callback(data)</code>이 완료되면 호출하는 <code>fetchData(callback)</code> 함수가 있다고 가정해보겠습니다. 이때 반환 된 데이터가 <code>&#39;peanut butter&#39;</code> 문자열 인지 테스트 하려고 합니다.</p>\n<p>기본적으로 Jest 테스트는 실행이 끝나면 완료됩니다. 즉, 이 테스트는 의도 한대로 동작하지 않습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Don&#x27;t do this!</span></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>문제는 <code>fetchData</code>가 완료되면, 즉시 콜백을 호출하기 전에 테스트가 완료된다는 것입니다.</p>\n<p>이 문제를 해결하는 다른 형태의 <code>테스트</code>가 있습니다. 빈 인자가 있는 함수에 테스트를 두는 대신에, <code>done</code>이라는 단일 인자를 사용하십시오. Jest는 테스트가 끝나기 전에 done 콜백이 호출 될 때까지 기다릴 것 입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">        done();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData(callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>우리가 원하는대로, <code>done()</code>이 호출되지 않으면 테스트가 실패할 것 입니다.</p>\n<h2 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h2><p>코드가 <code>Promise</code>를 사용할 때, 비동기 테스트를 처리하는 간단한 방법이 있습니다. 테스트에서 <code>Promise</code>를 리턴하면, Jest는 그 <code>Promise</code>가 <code>resolve</code> 될 때까지 기다릴 것입니다. <code>Promise</code>가 <code>reject</code>되면 테스트는 자동으로 실패합니다.</p>\n<p>예를 들어, 콜백을 사용하는 대신 <code>fetchData</code>가 <code>resolve</code>일때 <code>&#39;peanut butter&#39;</code> 문자열을 반환하는 <code>promise</code>라고 가정 해 봅시다. 우리는 다음과 같이 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>프로미스의 return을 확실하게 하세요. 만약 <code>return</code> 문을 생략하면, <code>fetchData</code>가 <code>resolve</code> 되고 <code>then()</code>이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.</p>\n<p>프로미스가 <code>reject</code> 될 것으로 예상되면 <code>.catch</code> 메소드를 사용하십시오. <code>expect.assertions</code>를 추가하여 특정 수의 어설션이 호출되는지 확인하십시오. 그렇지 않으면 <code>fulfilled</code>인 프로미스가 테스트를 통과하지 못할 것 입니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> expect(e).toMatch(<span class=\"string\">&#x27;error&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"resolves-rejects\"><a href=\"#resolves-rejects\" class=\"headerlink\" title=\".resolves / .rejects\"></a>.resolves / .rejects</h2><p>expect 문에서 <code>.resolves</code> matcher를 사용할 수도 있습니다. Jest는 프로미스가 resolve 될때까지 기다릴 것입니다. 프로미스가 <code>rejected</code>되면 테스트는 자동으로 실패합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> expect(fetchData()).resolves.toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>어설션의 return을 확실하게 하세요. 만약 <code>return</code> 문을 생략하면, <code>fetchData</code>가 <code>resolve</code> 되고 <code>then()</code>이 콜백을 실행할 기회가 오기 전에 테스트가 완료됩니다.</p>\n<p>프로미스가 <code>reject</code> 될 것으로 예상되면 <code>.rejects</code> matcher를 사용하세요. <code>.resolves</code> matcher와 유사하게 작동합니다. 프로미스가 <code>fulfilled</code>되면 테스트는 자동으로 실패합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> expect(fetchData()).rejects.toMatch(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async/Await\"></a>Async/Await</h2><p>또는 <code>async</code>와 <code>await</code>를 사용하여 테스트를 기다릴 수도 있습니다. 비동기 테스트를 작성하려면 <code>test</code>에 전달 된 함수 앞에 <code>async</code> 키워드를 사용하면 됩니다. 예를 들어 동일한 <code>fetchData</code> 시나리오를 다음과 같이 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    expect.assertions(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        expect(e).toMatch(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>물론 <code>async</code>와 <code>await</code>를 <code>.resolves</code>나 <code>.rejects</code>와 함께 쓸 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;the data is peanut butter&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> expect(fetchData()).resolves.toBe(<span class=\"string\">&#x27;peanut butter&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the fetch fails with an error&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> expect(fetchData()).rejects.toThrow(<span class=\"string\">&#x27;error&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>이 경우, <code>async</code>와 <code>await</code>은 실제로 promise 예제에서 사용하는 것과 동일한 로직에 대한 문법적 첨가일 뿐입니다.</p>\n<p>이 형식 중 다른 형식보다 특히 뛰어난 형식은 없으며, 코드베이스 전체 또는 단일 파일에서 혼합하여 사용할 수 있습니다. 테스트 스타일을 단순하게 만드는 것에 달려 있습니다.</p>\n"},{"title":"네이버 테크 콘서트","date":"2019-04-12T01:55:37.000Z","_content":"\n# 플랫폼 UI 개발 전략의 모든 것\n\n[첫번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-ui)으로 네이버에서 스마트에디터의 UI를 개발하신 이주용님께서 발표하셨습니다.\n\n## 스마트 에디터 3.0 -> 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표\n\n### 1. 기존 설계의 문제점\n\n-   커스텀 및 확장을 고려하지 않아, 서비스의 요구사항을ㄹ 수용하기 어려움\n-   플랫폼의 CSS와 서비스의 CSS 간섭이 발생하고 스타일의 우선순위 관리가 어려움\n-   에디터 UI의 요소간 관계를 파악하기 어려워 버그 및 사이드 이펙트 발생\n\n### 2. 새로운 설계 방향\n\n-   UI 공통화는 디자인 중심이 아닌, 기능 중심으로!\n    -   구조를 먼저 파악해야함\n-   조건 및 상태에 따라 다른 스타일 적용\n    -   CSS 설계는 동적으로\n-   각기 다른 요구사항을 빠르고 쉽게 적용해야함\n    -   설정으로 분리하여 하나의 파일에서 모두 변경가능하도록\n\n### 3. 구현과 문제 해결\n\n#### CSS Methodology\n\n-   Block, Element, Modifier (BEM)\n-   Scalable and Modular Architecture for CSS\n-   Object-Oriented CSS\n\n#### CSS Preprocessor\n\n-   CSS의 기능을 확장하여 선택자 상속, 변수, 조건문, 반복문, 함수 등 사용 가능\n-   sass\n\n### 4. 공통 요소의 분리\n\n#### 플랫폼의 스펙 분석 전략\n\n-   디자인 보다는 기능(구조) 중심의 분석\n-   동일한 기능을 하는 요소는 동일한 HTML 구조를 가질 수 있을지 검토\n-   공통화 요소 중 일부 UI가 다른 경우는 전체 스펙으로 구현 검토\n\n### 정리\n\n1. 모듈화\n\n-   디자인보다 각 요소가 하는 기능에 집중하여 모듈화\n-   현재의 요구사항에 맞게 최소한의 기능으로 모듈화 (확장성은 배제)\n-   같은 기능의 요소는 동일한 HTML 구조를 사용\n\n2. 설정과 공통 코드\n\n-   간격, 색상, 서체, 폰트 사이즈 등 서비스 별로 변경이 필요한 것들은 설정으로 관리\n-   css pre-processor를 활용하여 반복적인 코드 줄이기\n-   연관된 UI나 수치는 공통적으로 묶어 관계를 명확히하기\n\n3. 플랫폼은 만능이 아니다\n\n-   모든 요구사항을 플랫폼의 공통 코드로 소화할 수 없음\n-   따라서 때론 스펙 협의나 커뮤니케이션이 설계보다 중요할 수 있음\n-   플랫폼의 공통코드는 **불변**이 아니며 지속적인 리펙토링이 필수\n\n---\n\n# 주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기\n\n[두번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140435675)으로 LINE Financial Plus의 한재엽님 께서 발표하셨습니다.\n\n## 성장의 종류\n\n![](https://user-images.githubusercontent.com/35797540/56034194-9f758200-5d61-11e9-995c-fe440c281d12.jpg)\n\n개발자의 성장 방향에는 크게 이 정도가 있을것 같음.\n\n### 성장을 왜 해야하는지 생각해보기 (Why?)\n\n> 나의 선택과 집중이 어느 방향에 집중되어야 할지\n\n1. 성장해야하는 이유부터 정리\n2. 어느쪽으로 성장하고 싶은지 조금 더 구체화하기\n\n### 성장을 어떻게 해야할까? (How?)\n\n해야할 것과 하고 싶은 것은 매우 많지만 우리의 하루는 24시간이다. 너무 짧다..\n\n따라서 하루에 8시간 이상을 보내는 회사에서 성장해보자\n\n## 회사에서 성장하기\n\n### 업무를 **소비**하지 말자\n\n-   이때 업무란?\n    -   Production 레벨에서 코드를 작성하는 일\n    -   그리고 구현한 코드에 책임을 지는 일\n-   삽질에 대해서 다시 생각해보기\n    -   버그를 눈 앞에서 치워버려야하는 것 이라고 생각하지 말기\n    -   디버깅 (다양한 툴들, ex.크롬 개발자 도구, Charles, Fiddler, ...)\n    -   문제 원인 파악 -> 학습 -> 문제 해결 시도 -> 문제 원인 파악 -> (반복...)\n        -   최종적으로는 이 모든 경험들이 **노하우**가 된다. 이 노하우들이 쌓이면 전문성이 갖춰진다.\n    -   삽질을 통해 배우고, *정리*하자!\n\n### 질문을 '잘' 하자\n\n> 바보같은 질문은 없어도 성의없는 질문은 있다.\n\n-   배울점이 많은 동료들에게 많이 배워보자\n-   하지만 동료의 시간을 낭비하면 안된다! -> 질문을 잘! 해야한다.\n\n잘 질문 하려면?\n\n1. 충분한 구글링을 선행\n2. 질문을 정리하자\n   2-1. 현재 발생한 **상황** 정리\n   2-2. 내가 해본 **시도**들을 정리\n   2-3. 최종적으로 Yes/No로 답이 오도록 정리\n   2-4. 혹은 내 결론에 대한 의견을 답할 수 있도록 정리\n\n### 문서화를 '잘' 하자\n\n트러블 슈팅 목록으로 나눠서 정리 ([오픈소스들의 이슈 템플릿](https://github.com/angular/angular/issues/new/choose)을 참조해보자!)\n\n-   **어쩌다**가 버그가 발생했나?\n-   **원인**은 무엇인가?\n-   어떤 **시도**들을 해보았나?\n-   그래서 최종적으로 어떻게 해결했나?\n\n### 문서 쓸 시간이 없다면?\n\n문서화를 개발 프로세스의 일부분으로 생각하고 개발 기간을 잡자!\n그리고 잘 정리한 문서를 **공유** 하자!!\n\n## 팀의 생산성을 높이기\n\n### 개발 환경의 중요성\n\n-   개선하기\n-   환경을 알기\n-   자동화의 중요성\n-   관성에 젖지 않는 비판적인 사고하기\n\n### 변화 무쌍한 스펙 변경에 맞서기\n\n-   초기에 결정된 스펙은 무조건 변경된다고 생각하기\n-   어떻게 대응할지 생각하기\n-   변경될 수 있는 요소들을 어떻게 제어해야할지\n\n---\n\n# 일 만드는 개발자 VS 일 부풀리는 개발자\n\n[세번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-vs)으로 우아한 형제들의 김민태 프로그래머님의 발표입니다.\n\n## '일' 에 대해 정의해보기\n\n사람과 태도, 전문성, 에너지, 등등\n\n## 출발점은 Requirement!\n\n### 요구사항은 어디까지 수용해야하나?\n\n-   먼저 직업인과 직장인에 대해 생각해보자\n    > \"나는 주니어니까...\" 라는 생각은 하지말자.\n-   상사와 제품에 대해 생각해보자\n    > 제품이 모든것의 중심이 되어야 하지 않을까?\n-   습관은 관성이 된다.\n\n요구사항을 분석하고, 계획하고, 실행하고, 측정하고, 보정하고, 다시 분석하고 이런 반복적인 과정에서 예외사항이 발생할때는 바로 사람 때문이 대부분이다.\n\n### 커뮤니케이션이 중요하다.\n\n### 동료를 위한 개발\n\n### 고객을 위한 개발\n\n---\n\n# 빠르게 훑어보는 웹 개발 트렌드\n\n[네번째 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019)로 카카오뱅크의 한장현님이 발표하셨습니다.\n\n약간 좀 뻔한 내용,,\n[2019 Front-end Developer's Roadmap](https://github.com/kamranahmedse/developer-roadmap)을 기반으로한 발표였다.\n\n### 웹개발 트랜드\n\n서버 중심 -> 클라이언트 중심\n\n---\n\n# 데이터 상태 관리. 그것을 알려주마!\n\n[다섯번째 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140432157)로 네이버 PWE의 최현철님이 발표하셨습니다.\n\n## FE에서 상태관리란 무엇일까?\n\n## SPA에서 상태관리란 무엇일까?\n\n> 상태라는 눈에 보이지 않는 부분이 실시간 비동기적으로 변하기때문에 제어하기 힘들다.\n\n---\n\n# 오늘부터 나도 FE 성능 분석가\n\n[마지막 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-fe)로 네이버 아폴로 FE의 손찬욱님이 발표하셨습니다.\n개인적으로는 이번 컨퍼런스에서 가장 유익한 강의였습니다.\n\n## 성능 분석가의 관심사(Goal)은 무엇일까?\n\n> 유저 입력시에 얼마나 빠르게 반응할 수 있나?\n\n### LAI (Loading and Interation)\n\n## 어떻게 성능을 올릴까? (Plan)\n\n1. 대상을 선정. _숲을 보기!_\n    - 어떤게 중요한 포인트인지 파악하기\n2. 개선 프로세스\n    - 측정\n    - 분석\n    - 최적화\n    - 측정 ...(반복)\n3. 언제까지?\n    - 목표하는 초기 로딩 시간에 맞게\n    - 구글의 경우 [RAIL](https://developers.google.com/web/fundamentals/performance/rail?hl=ko), [FMP](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)\n\n## 초기 로딩 속도 개선하기\n\n-   Waterfall 차트\n    -   높이 줄이기\n    -   폭 줄이기\n    -   간격 땡기기\n\n### 1. 높이 줄이기\n\n    - Data URI -> HTML에 Default 이미지 같은 이미지를 포함\n    - Lazy\n    - 이미지 (캐러셀의 경우 보여지는 곳만 먼저 로딩)\n\n### 2. 폭 줄이기\n\n    - Initial connection\n        - HTTP 2.0으로 바꾸면 좋다(멀티 커넥션이 가능해짐)\n    - TTFB (Time To First Byte)\n        - 서버나 비즈니스 로직이 느린걸 체크할 수 있음\n    - Content download (네트워크 속도 등 여러 요인이 있지만)\n    - [GZIP](https://ko.wikipedia.org/wiki/Gzip), [Minify](https://www.minifier.org/)(이걸 말한건지 정확하진 않음..), [Obfuscation](https://en.wikipedia.org/wiki/Obfuscation_(software))\n    - 이미지 줄이기\n    - Decode 비용 줄이기 (이미지 화면에 렌더링하는 비용)\n\n### 3. 간격 땡기기 -> 잘하기 위해선 [브라우져 렌더링 과정](https://d2.naver.com/helloworld/59361)을 잘 알아야함\n\n    <img width=\"649\" alt=\"브라우저 렌더링 과정 (출처:네이버D2)\" src=\"https://user-images.githubusercontent.com/35797540/56470210-a6497680-647e-11e9-9db6-229eddd3083b.png\">\n\n1. 서버로부터 HTML 문자열을 Stream으로 받음\n2. `<head>` 태그의 자원을 병렬로 받음\n3. 2번에서 받은 자원을 모두 실행\n4. `<body>` 태그부터 화면을 그리기 시작\n\n-   head 태그엔 css와 필수 JS만 넣기\n-   JS는 body 태그 마지막에 넣기\n    -   async, defer를 사용해서 원하는 위치에 넣어도 됨(but 지원하지 않는 브라우저가 존재함)\n    -   async -> 의존성이 없는 경우(GA)\n    -   defer -> DOM 제어와 관련이 있을때\n-   preload\n    -   css 내에 폰트, 이미지를 미리 css와 함께 부름\n-   HTTP2 Server Push\n    -   HTML, Javascript, CSS, Img 같이 받음\n\n### 4. 총체적으로 점검하기\n\n-   FP(Fisrt Paint) -> head 태그 종료 후 이루어짐\n-   FMP(First Meaningful Paint) -> **_hero element!_** -> 이걸 어떤걸로 정할지가 중요함! (Lazy하게 처리하면 안되는 요소들)\n-   TTI([Time To Interactive](https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive))\n-   결국, 전체적으로 균형감 있게 줄여주는게 중요하다\n\n## Part 2.\n\n### Case by Case\n\n-   브라우져 메인 스레드를 괴롭히지 않아야함!\n\n### Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다\n\n-   Rendering Pipeline 과정\n\n1. Javascript가 건들면\n2. Style recalculation\n3. Layout\n4. Paint\n5. Composite (cpu가 아닌 gpu의 도움을 받음)\n    - 레이어를 겹쳐서 그리는 작업 (따라서 레이어를 어떻게 만드느냐가 중요함. 꼭 필요한 부분만 만들어야한다.)\n\n[csstriggers.com 참조](https://csstriggers.com/)\n","source":"_posts/naver-tech-concert-2019-04-12.md","raw":"---\ntitle: 네이버 테크 콘서트\ndate: 2019-04-12 10:55:37\ntags:\n    - FE 2019\n    - frontend\n    - 네이버 테크 콘서트\n---\n\n# 플랫폼 UI 개발 전략의 모든 것\n\n[첫번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-ui)으로 네이버에서 스마트에디터의 UI를 개발하신 이주용님께서 발표하셨습니다.\n\n## 스마트 에디터 3.0 -> 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표\n\n### 1. 기존 설계의 문제점\n\n-   커스텀 및 확장을 고려하지 않아, 서비스의 요구사항을ㄹ 수용하기 어려움\n-   플랫폼의 CSS와 서비스의 CSS 간섭이 발생하고 스타일의 우선순위 관리가 어려움\n-   에디터 UI의 요소간 관계를 파악하기 어려워 버그 및 사이드 이펙트 발생\n\n### 2. 새로운 설계 방향\n\n-   UI 공통화는 디자인 중심이 아닌, 기능 중심으로!\n    -   구조를 먼저 파악해야함\n-   조건 및 상태에 따라 다른 스타일 적용\n    -   CSS 설계는 동적으로\n-   각기 다른 요구사항을 빠르고 쉽게 적용해야함\n    -   설정으로 분리하여 하나의 파일에서 모두 변경가능하도록\n\n### 3. 구현과 문제 해결\n\n#### CSS Methodology\n\n-   Block, Element, Modifier (BEM)\n-   Scalable and Modular Architecture for CSS\n-   Object-Oriented CSS\n\n#### CSS Preprocessor\n\n-   CSS의 기능을 확장하여 선택자 상속, 변수, 조건문, 반복문, 함수 등 사용 가능\n-   sass\n\n### 4. 공통 요소의 분리\n\n#### 플랫폼의 스펙 분석 전략\n\n-   디자인 보다는 기능(구조) 중심의 분석\n-   동일한 기능을 하는 요소는 동일한 HTML 구조를 가질 수 있을지 검토\n-   공통화 요소 중 일부 UI가 다른 경우는 전체 스펙으로 구현 검토\n\n### 정리\n\n1. 모듈화\n\n-   디자인보다 각 요소가 하는 기능에 집중하여 모듈화\n-   현재의 요구사항에 맞게 최소한의 기능으로 모듈화 (확장성은 배제)\n-   같은 기능의 요소는 동일한 HTML 구조를 사용\n\n2. 설정과 공통 코드\n\n-   간격, 색상, 서체, 폰트 사이즈 등 서비스 별로 변경이 필요한 것들은 설정으로 관리\n-   css pre-processor를 활용하여 반복적인 코드 줄이기\n-   연관된 UI나 수치는 공통적으로 묶어 관계를 명확히하기\n\n3. 플랫폼은 만능이 아니다\n\n-   모든 요구사항을 플랫폼의 공통 코드로 소화할 수 없음\n-   따라서 때론 스펙 협의나 커뮤니케이션이 설계보다 중요할 수 있음\n-   플랫폼의 공통코드는 **불변**이 아니며 지속적인 리펙토링이 필수\n\n---\n\n# 주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기\n\n[두번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140435675)으로 LINE Financial Plus의 한재엽님 께서 발표하셨습니다.\n\n## 성장의 종류\n\n![](https://user-images.githubusercontent.com/35797540/56034194-9f758200-5d61-11e9-995c-fe440c281d12.jpg)\n\n개발자의 성장 방향에는 크게 이 정도가 있을것 같음.\n\n### 성장을 왜 해야하는지 생각해보기 (Why?)\n\n> 나의 선택과 집중이 어느 방향에 집중되어야 할지\n\n1. 성장해야하는 이유부터 정리\n2. 어느쪽으로 성장하고 싶은지 조금 더 구체화하기\n\n### 성장을 어떻게 해야할까? (How?)\n\n해야할 것과 하고 싶은 것은 매우 많지만 우리의 하루는 24시간이다. 너무 짧다..\n\n따라서 하루에 8시간 이상을 보내는 회사에서 성장해보자\n\n## 회사에서 성장하기\n\n### 업무를 **소비**하지 말자\n\n-   이때 업무란?\n    -   Production 레벨에서 코드를 작성하는 일\n    -   그리고 구현한 코드에 책임을 지는 일\n-   삽질에 대해서 다시 생각해보기\n    -   버그를 눈 앞에서 치워버려야하는 것 이라고 생각하지 말기\n    -   디버깅 (다양한 툴들, ex.크롬 개발자 도구, Charles, Fiddler, ...)\n    -   문제 원인 파악 -> 학습 -> 문제 해결 시도 -> 문제 원인 파악 -> (반복...)\n        -   최종적으로는 이 모든 경험들이 **노하우**가 된다. 이 노하우들이 쌓이면 전문성이 갖춰진다.\n    -   삽질을 통해 배우고, *정리*하자!\n\n### 질문을 '잘' 하자\n\n> 바보같은 질문은 없어도 성의없는 질문은 있다.\n\n-   배울점이 많은 동료들에게 많이 배워보자\n-   하지만 동료의 시간을 낭비하면 안된다! -> 질문을 잘! 해야한다.\n\n잘 질문 하려면?\n\n1. 충분한 구글링을 선행\n2. 질문을 정리하자\n   2-1. 현재 발생한 **상황** 정리\n   2-2. 내가 해본 **시도**들을 정리\n   2-3. 최종적으로 Yes/No로 답이 오도록 정리\n   2-4. 혹은 내 결론에 대한 의견을 답할 수 있도록 정리\n\n### 문서화를 '잘' 하자\n\n트러블 슈팅 목록으로 나눠서 정리 ([오픈소스들의 이슈 템플릿](https://github.com/angular/angular/issues/new/choose)을 참조해보자!)\n\n-   **어쩌다**가 버그가 발생했나?\n-   **원인**은 무엇인가?\n-   어떤 **시도**들을 해보았나?\n-   그래서 최종적으로 어떻게 해결했나?\n\n### 문서 쓸 시간이 없다면?\n\n문서화를 개발 프로세스의 일부분으로 생각하고 개발 기간을 잡자!\n그리고 잘 정리한 문서를 **공유** 하자!!\n\n## 팀의 생산성을 높이기\n\n### 개발 환경의 중요성\n\n-   개선하기\n-   환경을 알기\n-   자동화의 중요성\n-   관성에 젖지 않는 비판적인 사고하기\n\n### 변화 무쌍한 스펙 변경에 맞서기\n\n-   초기에 결정된 스펙은 무조건 변경된다고 생각하기\n-   어떻게 대응할지 생각하기\n-   변경될 수 있는 요소들을 어떻게 제어해야할지\n\n---\n\n# 일 만드는 개발자 VS 일 부풀리는 개발자\n\n[세번째 세션](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-vs)으로 우아한 형제들의 김민태 프로그래머님의 발표입니다.\n\n## '일' 에 대해 정의해보기\n\n사람과 태도, 전문성, 에너지, 등등\n\n## 출발점은 Requirement!\n\n### 요구사항은 어디까지 수용해야하나?\n\n-   먼저 직업인과 직장인에 대해 생각해보자\n    > \"나는 주니어니까...\" 라는 생각은 하지말자.\n-   상사와 제품에 대해 생각해보자\n    > 제품이 모든것의 중심이 되어야 하지 않을까?\n-   습관은 관성이 된다.\n\n요구사항을 분석하고, 계획하고, 실행하고, 측정하고, 보정하고, 다시 분석하고 이런 반복적인 과정에서 예외사항이 발생할때는 바로 사람 때문이 대부분이다.\n\n### 커뮤니케이션이 중요하다.\n\n### 동료를 위한 개발\n\n### 고객을 위한 개발\n\n---\n\n# 빠르게 훑어보는 웹 개발 트렌드\n\n[네번째 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019)로 카카오뱅크의 한장현님이 발표하셨습니다.\n\n약간 좀 뻔한 내용,,\n[2019 Front-end Developer's Roadmap](https://github.com/kamranahmedse/developer-roadmap)을 기반으로한 발표였다.\n\n### 웹개발 트랜드\n\n서버 중심 -> 클라이언트 중심\n\n---\n\n# 데이터 상태 관리. 그것을 알려주마!\n\n[다섯번째 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140432157)로 네이버 PWE의 최현철님이 발표하셨습니다.\n\n## FE에서 상태관리란 무엇일까?\n\n## SPA에서 상태관리란 무엇일까?\n\n> 상태라는 눈에 보이지 않는 부분이 실시간 비동기적으로 변하기때문에 제어하기 힘들다.\n\n---\n\n# 오늘부터 나도 FE 성능 분석가\n\n[마지막 강의](https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-fe)로 네이버 아폴로 FE의 손찬욱님이 발표하셨습니다.\n개인적으로는 이번 컨퍼런스에서 가장 유익한 강의였습니다.\n\n## 성능 분석가의 관심사(Goal)은 무엇일까?\n\n> 유저 입력시에 얼마나 빠르게 반응할 수 있나?\n\n### LAI (Loading and Interation)\n\n## 어떻게 성능을 올릴까? (Plan)\n\n1. 대상을 선정. _숲을 보기!_\n    - 어떤게 중요한 포인트인지 파악하기\n2. 개선 프로세스\n    - 측정\n    - 분석\n    - 최적화\n    - 측정 ...(반복)\n3. 언제까지?\n    - 목표하는 초기 로딩 시간에 맞게\n    - 구글의 경우 [RAIL](https://developers.google.com/web/fundamentals/performance/rail?hl=ko), [FMP](https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint)\n\n## 초기 로딩 속도 개선하기\n\n-   Waterfall 차트\n    -   높이 줄이기\n    -   폭 줄이기\n    -   간격 땡기기\n\n### 1. 높이 줄이기\n\n    - Data URI -> HTML에 Default 이미지 같은 이미지를 포함\n    - Lazy\n    - 이미지 (캐러셀의 경우 보여지는 곳만 먼저 로딩)\n\n### 2. 폭 줄이기\n\n    - Initial connection\n        - HTTP 2.0으로 바꾸면 좋다(멀티 커넥션이 가능해짐)\n    - TTFB (Time To First Byte)\n        - 서버나 비즈니스 로직이 느린걸 체크할 수 있음\n    - Content download (네트워크 속도 등 여러 요인이 있지만)\n    - [GZIP](https://ko.wikipedia.org/wiki/Gzip), [Minify](https://www.minifier.org/)(이걸 말한건지 정확하진 않음..), [Obfuscation](https://en.wikipedia.org/wiki/Obfuscation_(software))\n    - 이미지 줄이기\n    - Decode 비용 줄이기 (이미지 화면에 렌더링하는 비용)\n\n### 3. 간격 땡기기 -> 잘하기 위해선 [브라우져 렌더링 과정](https://d2.naver.com/helloworld/59361)을 잘 알아야함\n\n    <img width=\"649\" alt=\"브라우저 렌더링 과정 (출처:네이버D2)\" src=\"https://user-images.githubusercontent.com/35797540/56470210-a6497680-647e-11e9-9db6-229eddd3083b.png\">\n\n1. 서버로부터 HTML 문자열을 Stream으로 받음\n2. `<head>` 태그의 자원을 병렬로 받음\n3. 2번에서 받은 자원을 모두 실행\n4. `<body>` 태그부터 화면을 그리기 시작\n\n-   head 태그엔 css와 필수 JS만 넣기\n-   JS는 body 태그 마지막에 넣기\n    -   async, defer를 사용해서 원하는 위치에 넣어도 됨(but 지원하지 않는 브라우저가 존재함)\n    -   async -> 의존성이 없는 경우(GA)\n    -   defer -> DOM 제어와 관련이 있을때\n-   preload\n    -   css 내에 폰트, 이미지를 미리 css와 함께 부름\n-   HTTP2 Server Push\n    -   HTML, Javascript, CSS, Img 같이 받음\n\n### 4. 총체적으로 점검하기\n\n-   FP(Fisrt Paint) -> head 태그 종료 후 이루어짐\n-   FMP(First Meaningful Paint) -> **_hero element!_** -> 이걸 어떤걸로 정할지가 중요함! (Lazy하게 처리하면 안되는 요소들)\n-   TTI([Time To Interactive](https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive))\n-   결국, 전체적으로 균형감 있게 줄여주는게 중요하다\n\n## Part 2.\n\n### Case by Case\n\n-   브라우져 메인 스레드를 괴롭히지 않아야함!\n\n### Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다\n\n-   Rendering Pipeline 과정\n\n1. Javascript가 건들면\n2. Style recalculation\n3. Layout\n4. Paint\n5. Composite (cpu가 아닌 gpu의 도움을 받음)\n    - 레이어를 겹쳐서 그리는 작업 (따라서 레이어를 어떻게 만드느냐가 중요함. 꼭 필요한 부분만 만들어야한다.)\n\n[csstriggers.com 참조](https://csstriggers.com/)\n","slug":"naver-tech-concert","published":1,"updated":"2021-04-10T07:56:03.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs6006gbqwx59ynckwu","content":"<h1 id=\"플랫폼-UI-개발-전략의-모든-것\"><a href=\"#플랫폼-UI-개발-전략의-모든-것\" class=\"headerlink\" title=\"플랫폼 UI 개발 전략의 모든 것\"></a>플랫폼 UI 개발 전략의 모든 것</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-ui\">첫번째 세션</a>으로 네이버에서 스마트에디터의 UI를 개발하신 이주용님께서 발표하셨습니다.</p>\n<h2 id=\"스마트-에디터-3-0-gt-스마트-에디터-원으로-변경하면서-느꼈던점에-대한-발표\"><a href=\"#스마트-에디터-3-0-gt-스마트-에디터-원으로-변경하면서-느꼈던점에-대한-발표\" class=\"headerlink\" title=\"스마트 에디터 3.0 -&gt; 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표\"></a>스마트 에디터 3.0 -&gt; 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표</h2><h3 id=\"1-기존-설계의-문제점\"><a href=\"#1-기존-설계의-문제점\" class=\"headerlink\" title=\"1. 기존 설계의 문제점\"></a>1. 기존 설계의 문제점</h3><ul>\n<li>커스텀 및 확장을 고려하지 않아, 서비스의 요구사항을ㄹ 수용하기 어려움</li>\n<li>플랫폼의 CSS와 서비스의 CSS 간섭이 발생하고 스타일의 우선순위 관리가 어려움</li>\n<li>에디터 UI의 요소간 관계를 파악하기 어려워 버그 및 사이드 이펙트 발생</li>\n</ul>\n<h3 id=\"2-새로운-설계-방향\"><a href=\"#2-새로운-설계-방향\" class=\"headerlink\" title=\"2. 새로운 설계 방향\"></a>2. 새로운 설계 방향</h3><ul>\n<li>UI 공통화는 디자인 중심이 아닌, 기능 중심으로!<ul>\n<li>구조를 먼저 파악해야함</li>\n</ul>\n</li>\n<li>조건 및 상태에 따라 다른 스타일 적용<ul>\n<li>CSS 설계는 동적으로</li>\n</ul>\n</li>\n<li>각기 다른 요구사항을 빠르고 쉽게 적용해야함<ul>\n<li>설정으로 분리하여 하나의 파일에서 모두 변경가능하도록</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-구현과-문제-해결\"><a href=\"#3-구현과-문제-해결\" class=\"headerlink\" title=\"3. 구현과 문제 해결\"></a>3. 구현과 문제 해결</h3><h4 id=\"CSS-Methodology\"><a href=\"#CSS-Methodology\" class=\"headerlink\" title=\"CSS Methodology\"></a>CSS Methodology</h4><ul>\n<li>Block, Element, Modifier (BEM)</li>\n<li>Scalable and Modular Architecture for CSS</li>\n<li>Object-Oriented CSS</li>\n</ul>\n<h4 id=\"CSS-Preprocessor\"><a href=\"#CSS-Preprocessor\" class=\"headerlink\" title=\"CSS Preprocessor\"></a>CSS Preprocessor</h4><ul>\n<li>CSS의 기능을 확장하여 선택자 상속, 변수, 조건문, 반복문, 함수 등 사용 가능</li>\n<li>sass</li>\n</ul>\n<h3 id=\"4-공통-요소의-분리\"><a href=\"#4-공통-요소의-분리\" class=\"headerlink\" title=\"4. 공통 요소의 분리\"></a>4. 공통 요소의 분리</h3><h4 id=\"플랫폼의-스펙-분석-전략\"><a href=\"#플랫폼의-스펙-분석-전략\" class=\"headerlink\" title=\"플랫폼의 스펙 분석 전략\"></a>플랫폼의 스펙 분석 전략</h4><ul>\n<li>디자인 보다는 기능(구조) 중심의 분석</li>\n<li>동일한 기능을 하는 요소는 동일한 HTML 구조를 가질 수 있을지 검토</li>\n<li>공통화 요소 중 일부 UI가 다른 경우는 전체 스펙으로 구현 검토</li>\n</ul>\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><ol>\n<li>모듈화</li>\n</ol>\n<ul>\n<li>디자인보다 각 요소가 하는 기능에 집중하여 모듈화</li>\n<li>현재의 요구사항에 맞게 최소한의 기능으로 모듈화 (확장성은 배제)</li>\n<li>같은 기능의 요소는 동일한 HTML 구조를 사용</li>\n</ul>\n<ol start=\"2\">\n<li>설정과 공통 코드</li>\n</ol>\n<ul>\n<li>간격, 색상, 서체, 폰트 사이즈 등 서비스 별로 변경이 필요한 것들은 설정으로 관리</li>\n<li>css pre-processor를 활용하여 반복적인 코드 줄이기</li>\n<li>연관된 UI나 수치는 공통적으로 묶어 관계를 명확히하기</li>\n</ul>\n<ol start=\"3\">\n<li>플랫폼은 만능이 아니다</li>\n</ol>\n<ul>\n<li>모든 요구사항을 플랫폼의 공통 코드로 소화할 수 없음</li>\n<li>따라서 때론 스펙 협의나 커뮤니케이션이 설계보다 중요할 수 있음</li>\n<li>플랫폼의 공통코드는 <strong>불변</strong>이 아니며 지속적인 리펙토링이 필수</li>\n</ul>\n<hr>\n<h1 id=\"주니어-개발자의-성장에-대한-뻔하지만-뻔하지-않은-이야기\"><a href=\"#주니어-개발자의-성장에-대한-뻔하지만-뻔하지-않은-이야기\" class=\"headerlink\" title=\"주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기\"></a>주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140435675\">두번째 세션</a>으로 LINE Financial Plus의 한재엽님 께서 발표하셨습니다.</p>\n<h2 id=\"성장의-종류\"><a href=\"#성장의-종류\" class=\"headerlink\" title=\"성장의 종류\"></a>성장의 종류</h2><p><img src=\"https://user-images.githubusercontent.com/35797540/56034194-9f758200-5d61-11e9-995c-fe440c281d12.jpg\" alt=\"\"></p>\n<p>개발자의 성장 방향에는 크게 이 정도가 있을것 같음.</p>\n<h3 id=\"성장을-왜-해야하는지-생각해보기-Why\"><a href=\"#성장을-왜-해야하는지-생각해보기-Why\" class=\"headerlink\" title=\"성장을 왜 해야하는지 생각해보기 (Why?)\"></a>성장을 왜 해야하는지 생각해보기 (Why?)</h3><blockquote>\n<p>나의 선택과 집중이 어느 방향에 집중되어야 할지</p>\n</blockquote>\n<ol>\n<li>성장해야하는 이유부터 정리</li>\n<li>어느쪽으로 성장하고 싶은지 조금 더 구체화하기</li>\n</ol>\n<h3 id=\"성장을-어떻게-해야할까-How\"><a href=\"#성장을-어떻게-해야할까-How\" class=\"headerlink\" title=\"성장을 어떻게 해야할까? (How?)\"></a>성장을 어떻게 해야할까? (How?)</h3><p>해야할 것과 하고 싶은 것은 매우 많지만 우리의 하루는 24시간이다. 너무 짧다..</p>\n<p>따라서 하루에 8시간 이상을 보내는 회사에서 성장해보자</p>\n<h2 id=\"회사에서-성장하기\"><a href=\"#회사에서-성장하기\" class=\"headerlink\" title=\"회사에서 성장하기\"></a>회사에서 성장하기</h2><h3 id=\"업무를-소비하지-말자\"><a href=\"#업무를-소비하지-말자\" class=\"headerlink\" title=\"업무를 소비하지 말자\"></a>업무를 <strong>소비</strong>하지 말자</h3><ul>\n<li>이때 업무란?<ul>\n<li>Production 레벨에서 코드를 작성하는 일</li>\n<li>그리고 구현한 코드에 책임을 지는 일</li>\n</ul>\n</li>\n<li>삽질에 대해서 다시 생각해보기<ul>\n<li>버그를 눈 앞에서 치워버려야하는 것 이라고 생각하지 말기</li>\n<li>디버깅 (다양한 툴들, ex.크롬 개발자 도구, Charles, Fiddler, …)</li>\n<li>문제 원인 파악 -&gt; 학습 -&gt; 문제 해결 시도 -&gt; 문제 원인 파악 -&gt; (반복…)<ul>\n<li>최종적으로는 이 모든 경험들이 <strong>노하우</strong>가 된다. 이 노하우들이 쌓이면 전문성이 갖춰진다.</li>\n</ul>\n</li>\n<li>삽질을 통해 배우고, <em>정리</em>하자!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"질문을-‘잘’-하자\"><a href=\"#질문을-‘잘’-하자\" class=\"headerlink\" title=\"질문을 ‘잘’ 하자\"></a>질문을 ‘잘’ 하자</h3><blockquote>\n<p>바보같은 질문은 없어도 성의없는 질문은 있다.</p>\n</blockquote>\n<ul>\n<li>배울점이 많은 동료들에게 많이 배워보자</li>\n<li>하지만 동료의 시간을 낭비하면 안된다! -&gt; 질문을 잘! 해야한다.</li>\n</ul>\n<p>잘 질문 하려면?</p>\n<ol>\n<li>충분한 구글링을 선행</li>\n<li>질문을 정리하자<br>2-1. 현재 발생한 <strong>상황</strong> 정리<br>2-2. 내가 해본 <strong>시도</strong>들을 정리<br>2-3. 최종적으로 Yes/No로 답이 오도록 정리<br>2-4. 혹은 내 결론에 대한 의견을 답할 수 있도록 정리</li>\n</ol>\n<h3 id=\"문서화를-‘잘’-하자\"><a href=\"#문서화를-‘잘’-하자\" class=\"headerlink\" title=\"문서화를 ‘잘’ 하자\"></a>문서화를 ‘잘’ 하자</h3><p>트러블 슈팅 목록으로 나눠서 정리 (<a href=\"https://github.com/angular/angular/issues/new/choose\">오픈소스들의 이슈 템플릿</a>을 참조해보자!)</p>\n<ul>\n<li><strong>어쩌다</strong>가 버그가 발생했나?</li>\n<li><strong>원인</strong>은 무엇인가?</li>\n<li>어떤 <strong>시도</strong>들을 해보았나?</li>\n<li>그래서 최종적으로 어떻게 해결했나?</li>\n</ul>\n<h3 id=\"문서-쓸-시간이-없다면\"><a href=\"#문서-쓸-시간이-없다면\" class=\"headerlink\" title=\"문서 쓸 시간이 없다면?\"></a>문서 쓸 시간이 없다면?</h3><p>문서화를 개발 프로세스의 일부분으로 생각하고 개발 기간을 잡자!<br>그리고 잘 정리한 문서를 <strong>공유</strong> 하자!!</p>\n<h2 id=\"팀의-생산성을-높이기\"><a href=\"#팀의-생산성을-높이기\" class=\"headerlink\" title=\"팀의 생산성을 높이기\"></a>팀의 생산성을 높이기</h2><h3 id=\"개발-환경의-중요성\"><a href=\"#개발-환경의-중요성\" class=\"headerlink\" title=\"개발 환경의 중요성\"></a>개발 환경의 중요성</h3><ul>\n<li>개선하기</li>\n<li>환경을 알기</li>\n<li>자동화의 중요성</li>\n<li>관성에 젖지 않는 비판적인 사고하기</li>\n</ul>\n<h3 id=\"변화-무쌍한-스펙-변경에-맞서기\"><a href=\"#변화-무쌍한-스펙-변경에-맞서기\" class=\"headerlink\" title=\"변화 무쌍한 스펙 변경에 맞서기\"></a>변화 무쌍한 스펙 변경에 맞서기</h3><ul>\n<li>초기에 결정된 스펙은 무조건 변경된다고 생각하기</li>\n<li>어떻게 대응할지 생각하기</li>\n<li>변경될 수 있는 요소들을 어떻게 제어해야할지</li>\n</ul>\n<hr>\n<h1 id=\"일-만드는-개발자-VS-일-부풀리는-개발자\"><a href=\"#일-만드는-개발자-VS-일-부풀리는-개발자\" class=\"headerlink\" title=\"일 만드는 개발자 VS 일 부풀리는 개발자\"></a>일 만드는 개발자 VS 일 부풀리는 개발자</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-vs\">세번째 세션</a>으로 우아한 형제들의 김민태 프로그래머님의 발표입니다.</p>\n<h2 id=\"‘일’-에-대해-정의해보기\"><a href=\"#‘일’-에-대해-정의해보기\" class=\"headerlink\" title=\"‘일’ 에 대해 정의해보기\"></a>‘일’ 에 대해 정의해보기</h2><p>사람과 태도, 전문성, 에너지, 등등</p>\n<h2 id=\"출발점은-Requirement\"><a href=\"#출발점은-Requirement\" class=\"headerlink\" title=\"출발점은 Requirement!\"></a>출발점은 Requirement!</h2><h3 id=\"요구사항은-어디까지-수용해야하나\"><a href=\"#요구사항은-어디까지-수용해야하나\" class=\"headerlink\" title=\"요구사항은 어디까지 수용해야하나?\"></a>요구사항은 어디까지 수용해야하나?</h3><ul>\n<li>먼저 직업인과 직장인에 대해 생각해보자<blockquote>\n<p>“나는 주니어니까…” 라는 생각은 하지말자.</p>\n</blockquote>\n</li>\n<li>상사와 제품에 대해 생각해보자<blockquote>\n<p>제품이 모든것의 중심이 되어야 하지 않을까?</p>\n</blockquote>\n</li>\n<li>습관은 관성이 된다.</li>\n</ul>\n<p>요구사항을 분석하고, 계획하고, 실행하고, 측정하고, 보정하고, 다시 분석하고 이런 반복적인 과정에서 예외사항이 발생할때는 바로 사람 때문이 대부분이다.</p>\n<h3 id=\"커뮤니케이션이-중요하다\"><a href=\"#커뮤니케이션이-중요하다\" class=\"headerlink\" title=\"커뮤니케이션이 중요하다.\"></a>커뮤니케이션이 중요하다.</h3><h3 id=\"동료를-위한-개발\"><a href=\"#동료를-위한-개발\" class=\"headerlink\" title=\"동료를 위한 개발\"></a>동료를 위한 개발</h3><h3 id=\"고객을-위한-개발\"><a href=\"#고객을-위한-개발\" class=\"headerlink\" title=\"고객을 위한 개발\"></a>고객을 위한 개발</h3><hr>\n<h1 id=\"빠르게-훑어보는-웹-개발-트렌드\"><a href=\"#빠르게-훑어보는-웹-개발-트렌드\" class=\"headerlink\" title=\"빠르게 훑어보는 웹 개발 트렌드\"></a>빠르게 훑어보는 웹 개발 트렌드</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019\">네번째 강의</a>로 카카오뱅크의 한장현님이 발표하셨습니다.</p>\n<p>약간 좀 뻔한 내용,,<br><a href=\"https://github.com/kamranahmedse/developer-roadmap\">2019 Front-end Developer’s Roadmap</a>을 기반으로한 발표였다.</p>\n<h3 id=\"웹개발-트랜드\"><a href=\"#웹개발-트랜드\" class=\"headerlink\" title=\"웹개발 트랜드\"></a>웹개발 트랜드</h3><p>서버 중심 -&gt; 클라이언트 중심</p>\n<hr>\n<h1 id=\"데이터-상태-관리-그것을-알려주마\"><a href=\"#데이터-상태-관리-그것을-알려주마\" class=\"headerlink\" title=\"데이터 상태 관리. 그것을 알려주마!\"></a>데이터 상태 관리. 그것을 알려주마!</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140432157\">다섯번째 강의</a>로 네이버 PWE의 최현철님이 발표하셨습니다.</p>\n<h2 id=\"FE에서-상태관리란-무엇일까\"><a href=\"#FE에서-상태관리란-무엇일까\" class=\"headerlink\" title=\"FE에서 상태관리란 무엇일까?\"></a>FE에서 상태관리란 무엇일까?</h2><h2 id=\"SPA에서-상태관리란-무엇일까\"><a href=\"#SPA에서-상태관리란-무엇일까\" class=\"headerlink\" title=\"SPA에서 상태관리란 무엇일까?\"></a>SPA에서 상태관리란 무엇일까?</h2><blockquote>\n<p>상태라는 눈에 보이지 않는 부분이 실시간 비동기적으로 변하기때문에 제어하기 힘들다.</p>\n</blockquote>\n<hr>\n<h1 id=\"오늘부터-나도-FE-성능-분석가\"><a href=\"#오늘부터-나도-FE-성능-분석가\" class=\"headerlink\" title=\"오늘부터 나도 FE 성능 분석가\"></a>오늘부터 나도 FE 성능 분석가</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-fe\">마지막 강의</a>로 네이버 아폴로 FE의 손찬욱님이 발표하셨습니다.<br>개인적으로는 이번 컨퍼런스에서 가장 유익한 강의였습니다.</p>\n<h2 id=\"성능-분석가의-관심사-Goal-은-무엇일까\"><a href=\"#성능-분석가의-관심사-Goal-은-무엇일까\" class=\"headerlink\" title=\"성능 분석가의 관심사(Goal)은 무엇일까?\"></a>성능 분석가의 관심사(Goal)은 무엇일까?</h2><blockquote>\n<p>유저 입력시에 얼마나 빠르게 반응할 수 있나?</p>\n</blockquote>\n<h3 id=\"LAI-Loading-and-Interation\"><a href=\"#LAI-Loading-and-Interation\" class=\"headerlink\" title=\"LAI (Loading and Interation)\"></a>LAI (Loading and Interation)</h3><h2 id=\"어떻게-성능을-올릴까-Plan\"><a href=\"#어떻게-성능을-올릴까-Plan\" class=\"headerlink\" title=\"어떻게 성능을 올릴까? (Plan)\"></a>어떻게 성능을 올릴까? (Plan)</h2><ol>\n<li>대상을 선정. <em>숲을 보기!</em><ul>\n<li>어떤게 중요한 포인트인지 파악하기</li>\n</ul>\n</li>\n<li>개선 프로세스<ul>\n<li>측정</li>\n<li>분석</li>\n<li>최적화</li>\n<li>측정 …(반복)</li>\n</ul>\n</li>\n<li>언제까지?<ul>\n<li>목표하는 초기 로딩 시간에 맞게</li>\n<li>구글의 경우 <a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=ko\">RAIL</a>, <a href=\"https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint\">FMP</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"초기-로딩-속도-개선하기\"><a href=\"#초기-로딩-속도-개선하기\" class=\"headerlink\" title=\"초기 로딩 속도 개선하기\"></a>초기 로딩 속도 개선하기</h2><ul>\n<li>Waterfall 차트<ul>\n<li>높이 줄이기</li>\n<li>폭 줄이기</li>\n<li>간격 땡기기</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-높이-줄이기\"><a href=\"#1-높이-줄이기\" class=\"headerlink\" title=\"1. 높이 줄이기\"></a>1. 높이 줄이기</h3><pre><code>- Data URI -&gt; HTML에 Default 이미지 같은 이미지를 포함\n- Lazy\n- 이미지 (캐러셀의 경우 보여지는 곳만 먼저 로딩)\n</code></pre><h3 id=\"2-폭-줄이기\"><a href=\"#2-폭-줄이기\" class=\"headerlink\" title=\"2. 폭 줄이기\"></a>2. 폭 줄이기</h3><pre><code>- Initial connection\n    - HTTP 2.0으로 바꾸면 좋다(멀티 커넥션이 가능해짐)\n- TTFB (Time To First Byte)\n    - 서버나 비즈니스 로직이 느린걸 체크할 수 있음\n- Content download (네트워크 속도 등 여러 요인이 있지만)\n- [GZIP](https://ko.wikipedia.org/wiki/Gzip), [Minify](https://www.minifier.org/)(이걸 말한건지 정확하진 않음..), [Obfuscation](https://en.wikipedia.org/wiki/Obfuscation_(software))\n- 이미지 줄이기\n- Decode 비용 줄이기 (이미지 화면에 렌더링하는 비용)\n</code></pre><h3 id=\"3-간격-땡기기-gt-잘하기-위해선-브라우져-렌더링-과정을-잘-알아야함\"><a href=\"#3-간격-땡기기-gt-잘하기-위해선-브라우져-렌더링-과정을-잘-알아야함\" class=\"headerlink\" title=\"3. 간격 땡기기 -&gt; 잘하기 위해선 브라우져 렌더링 과정을 잘 알아야함\"></a>3. 간격 땡기기 -&gt; 잘하기 위해선 <a href=\"https://d2.naver.com/helloworld/59361\">브라우져 렌더링 과정</a>을 잘 알아야함</h3><pre><code>&lt;img width=&quot;649&quot; alt=&quot;브라우저 렌더링 과정 (출처:네이버D2)&quot; src=&quot;https://user-images.githubusercontent.com/35797540/56470210-a6497680-647e-11e9-9db6-229eddd3083b.png&quot;&gt;\n</code></pre><ol>\n<li>서버로부터 HTML 문자열을 Stream으로 받음</li>\n<li><code>&lt;head&gt;</code> 태그의 자원을 병렬로 받음</li>\n<li>2번에서 받은 자원을 모두 실행</li>\n<li><code>&lt;body&gt;</code> 태그부터 화면을 그리기 시작</li>\n</ol>\n<ul>\n<li>head 태그엔 css와 필수 JS만 넣기</li>\n<li>JS는 body 태그 마지막에 넣기<ul>\n<li>async, defer를 사용해서 원하는 위치에 넣어도 됨(but 지원하지 않는 브라우저가 존재함)</li>\n<li>async -&gt; 의존성이 없는 경우(GA)</li>\n<li>defer -&gt; DOM 제어와 관련이 있을때</li>\n</ul>\n</li>\n<li>preload<ul>\n<li>css 내에 폰트, 이미지를 미리 css와 함께 부름</li>\n</ul>\n</li>\n<li>HTTP2 Server Push<ul>\n<li>HTML, Javascript, CSS, Img 같이 받음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-총체적으로-점검하기\"><a href=\"#4-총체적으로-점검하기\" class=\"headerlink\" title=\"4. 총체적으로 점검하기\"></a>4. 총체적으로 점검하기</h3><ul>\n<li>FP(Fisrt Paint) -&gt; head 태그 종료 후 이루어짐</li>\n<li>FMP(First Meaningful Paint) -&gt; <strong><em>hero element!</em></strong> -&gt; 이걸 어떤걸로 정할지가 중요함! (Lazy하게 처리하면 안되는 요소들)</li>\n<li>TTI(<a href=\"https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive\">Time To Interactive</a>)</li>\n<li>결국, 전체적으로 균형감 있게 줄여주는게 중요하다</li>\n</ul>\n<h2 id=\"Part-2\"><a href=\"#Part-2\" class=\"headerlink\" title=\"Part 2.\"></a>Part 2.</h2><h3 id=\"Case-by-Case\"><a href=\"#Case-by-Case\" class=\"headerlink\" title=\"Case by Case\"></a>Case by Case</h3><ul>\n<li>브라우져 메인 스레드를 괴롭히지 않아야함!</li>\n</ul>\n<h3 id=\"Javascript가-DOM을-만지면-메인-스레드가-Rendering-Pipeline-과정을-거친다\"><a href=\"#Javascript가-DOM을-만지면-메인-스레드가-Rendering-Pipeline-과정을-거친다\" class=\"headerlink\" title=\"Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다\"></a>Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다</h3><ul>\n<li>Rendering Pipeline 과정</li>\n</ul>\n<ol>\n<li>Javascript가 건들면</li>\n<li>Style recalculation</li>\n<li>Layout</li>\n<li>Paint</li>\n<li>Composite (cpu가 아닌 gpu의 도움을 받음)<ul>\n<li>레이어를 겹쳐서 그리는 작업 (따라서 레이어를 어떻게 만드느냐가 중요함. 꼭 필요한 부분만 만들어야한다.)</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://csstriggers.com/\">csstriggers.com 참조</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"플랫폼-UI-개발-전략의-모든-것\"><a href=\"#플랫폼-UI-개발-전략의-모든-것\" class=\"headerlink\" title=\"플랫폼 UI 개발 전략의 모든 것\"></a>플랫폼 UI 개발 전략의 모든 것</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-ui\">첫번째 세션</a>으로 네이버에서 스마트에디터의 UI를 개발하신 이주용님께서 발표하셨습니다.</p>\n<h2 id=\"스마트-에디터-3-0-gt-스마트-에디터-원으로-변경하면서-느꼈던점에-대한-발표\"><a href=\"#스마트-에디터-3-0-gt-스마트-에디터-원으로-변경하면서-느꼈던점에-대한-발표\" class=\"headerlink\" title=\"스마트 에디터 3.0 -&gt; 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표\"></a>스마트 에디터 3.0 -&gt; 스마트 에디터 원으로 변경하면서 느꼈던점에 대한 발표</h2><h3 id=\"1-기존-설계의-문제점\"><a href=\"#1-기존-설계의-문제점\" class=\"headerlink\" title=\"1. 기존 설계의 문제점\"></a>1. 기존 설계의 문제점</h3><ul>\n<li>커스텀 및 확장을 고려하지 않아, 서비스의 요구사항을ㄹ 수용하기 어려움</li>\n<li>플랫폼의 CSS와 서비스의 CSS 간섭이 발생하고 스타일의 우선순위 관리가 어려움</li>\n<li>에디터 UI의 요소간 관계를 파악하기 어려워 버그 및 사이드 이펙트 발생</li>\n</ul>\n<h3 id=\"2-새로운-설계-방향\"><a href=\"#2-새로운-설계-방향\" class=\"headerlink\" title=\"2. 새로운 설계 방향\"></a>2. 새로운 설계 방향</h3><ul>\n<li>UI 공통화는 디자인 중심이 아닌, 기능 중심으로!<ul>\n<li>구조를 먼저 파악해야함</li>\n</ul>\n</li>\n<li>조건 및 상태에 따라 다른 스타일 적용<ul>\n<li>CSS 설계는 동적으로</li>\n</ul>\n</li>\n<li>각기 다른 요구사항을 빠르고 쉽게 적용해야함<ul>\n<li>설정으로 분리하여 하나의 파일에서 모두 변경가능하도록</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-구현과-문제-해결\"><a href=\"#3-구현과-문제-해결\" class=\"headerlink\" title=\"3. 구현과 문제 해결\"></a>3. 구현과 문제 해결</h3><h4 id=\"CSS-Methodology\"><a href=\"#CSS-Methodology\" class=\"headerlink\" title=\"CSS Methodology\"></a>CSS Methodology</h4><ul>\n<li>Block, Element, Modifier (BEM)</li>\n<li>Scalable and Modular Architecture for CSS</li>\n<li>Object-Oriented CSS</li>\n</ul>\n<h4 id=\"CSS-Preprocessor\"><a href=\"#CSS-Preprocessor\" class=\"headerlink\" title=\"CSS Preprocessor\"></a>CSS Preprocessor</h4><ul>\n<li>CSS의 기능을 확장하여 선택자 상속, 변수, 조건문, 반복문, 함수 등 사용 가능</li>\n<li>sass</li>\n</ul>\n<h3 id=\"4-공통-요소의-분리\"><a href=\"#4-공통-요소의-분리\" class=\"headerlink\" title=\"4. 공통 요소의 분리\"></a>4. 공통 요소의 분리</h3><h4 id=\"플랫폼의-스펙-분석-전략\"><a href=\"#플랫폼의-스펙-분석-전략\" class=\"headerlink\" title=\"플랫폼의 스펙 분석 전략\"></a>플랫폼의 스펙 분석 전략</h4><ul>\n<li>디자인 보다는 기능(구조) 중심의 분석</li>\n<li>동일한 기능을 하는 요소는 동일한 HTML 구조를 가질 수 있을지 검토</li>\n<li>공통화 요소 중 일부 UI가 다른 경우는 전체 스펙으로 구현 검토</li>\n</ul>\n<h3 id=\"정리\"><a href=\"#정리\" class=\"headerlink\" title=\"정리\"></a>정리</h3><ol>\n<li>모듈화</li>\n</ol>\n<ul>\n<li>디자인보다 각 요소가 하는 기능에 집중하여 모듈화</li>\n<li>현재의 요구사항에 맞게 최소한의 기능으로 모듈화 (확장성은 배제)</li>\n<li>같은 기능의 요소는 동일한 HTML 구조를 사용</li>\n</ul>\n<ol start=\"2\">\n<li>설정과 공통 코드</li>\n</ol>\n<ul>\n<li>간격, 색상, 서체, 폰트 사이즈 등 서비스 별로 변경이 필요한 것들은 설정으로 관리</li>\n<li>css pre-processor를 활용하여 반복적인 코드 줄이기</li>\n<li>연관된 UI나 수치는 공통적으로 묶어 관계를 명확히하기</li>\n</ul>\n<ol start=\"3\">\n<li>플랫폼은 만능이 아니다</li>\n</ol>\n<ul>\n<li>모든 요구사항을 플랫폼의 공통 코드로 소화할 수 없음</li>\n<li>따라서 때론 스펙 협의나 커뮤니케이션이 설계보다 중요할 수 있음</li>\n<li>플랫폼의 공통코드는 <strong>불변</strong>이 아니며 지속적인 리펙토링이 필수</li>\n</ul>\n<hr>\n<h1 id=\"주니어-개발자의-성장에-대한-뻔하지만-뻔하지-않은-이야기\"><a href=\"#주니어-개발자의-성장에-대한-뻔하지만-뻔하지-않은-이야기\" class=\"headerlink\" title=\"주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기\"></a>주니어 개발자의 성장에 대한 뻔하지만 뻔하지 않은 이야기</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140435675\">두번째 세션</a>으로 LINE Financial Plus의 한재엽님 께서 발표하셨습니다.</p>\n<h2 id=\"성장의-종류\"><a href=\"#성장의-종류\" class=\"headerlink\" title=\"성장의 종류\"></a>성장의 종류</h2><p><img src=\"https://user-images.githubusercontent.com/35797540/56034194-9f758200-5d61-11e9-995c-fe440c281d12.jpg\" alt=\"\"></p>\n<p>개발자의 성장 방향에는 크게 이 정도가 있을것 같음.</p>\n<h3 id=\"성장을-왜-해야하는지-생각해보기-Why\"><a href=\"#성장을-왜-해야하는지-생각해보기-Why\" class=\"headerlink\" title=\"성장을 왜 해야하는지 생각해보기 (Why?)\"></a>성장을 왜 해야하는지 생각해보기 (Why?)</h3><blockquote>\n<p>나의 선택과 집중이 어느 방향에 집중되어야 할지</p>\n</blockquote>\n<ol>\n<li>성장해야하는 이유부터 정리</li>\n<li>어느쪽으로 성장하고 싶은지 조금 더 구체화하기</li>\n</ol>\n<h3 id=\"성장을-어떻게-해야할까-How\"><a href=\"#성장을-어떻게-해야할까-How\" class=\"headerlink\" title=\"성장을 어떻게 해야할까? (How?)\"></a>성장을 어떻게 해야할까? (How?)</h3><p>해야할 것과 하고 싶은 것은 매우 많지만 우리의 하루는 24시간이다. 너무 짧다..</p>\n<p>따라서 하루에 8시간 이상을 보내는 회사에서 성장해보자</p>\n<h2 id=\"회사에서-성장하기\"><a href=\"#회사에서-성장하기\" class=\"headerlink\" title=\"회사에서 성장하기\"></a>회사에서 성장하기</h2><h3 id=\"업무를-소비하지-말자\"><a href=\"#업무를-소비하지-말자\" class=\"headerlink\" title=\"업무를 소비하지 말자\"></a>업무를 <strong>소비</strong>하지 말자</h3><ul>\n<li>이때 업무란?<ul>\n<li>Production 레벨에서 코드를 작성하는 일</li>\n<li>그리고 구현한 코드에 책임을 지는 일</li>\n</ul>\n</li>\n<li>삽질에 대해서 다시 생각해보기<ul>\n<li>버그를 눈 앞에서 치워버려야하는 것 이라고 생각하지 말기</li>\n<li>디버깅 (다양한 툴들, ex.크롬 개발자 도구, Charles, Fiddler, …)</li>\n<li>문제 원인 파악 -&gt; 학습 -&gt; 문제 해결 시도 -&gt; 문제 원인 파악 -&gt; (반복…)<ul>\n<li>최종적으로는 이 모든 경험들이 <strong>노하우</strong>가 된다. 이 노하우들이 쌓이면 전문성이 갖춰진다.</li>\n</ul>\n</li>\n<li>삽질을 통해 배우고, <em>정리</em>하자!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"질문을-‘잘’-하자\"><a href=\"#질문을-‘잘’-하자\" class=\"headerlink\" title=\"질문을 ‘잘’ 하자\"></a>질문을 ‘잘’ 하자</h3><blockquote>\n<p>바보같은 질문은 없어도 성의없는 질문은 있다.</p>\n</blockquote>\n<ul>\n<li>배울점이 많은 동료들에게 많이 배워보자</li>\n<li>하지만 동료의 시간을 낭비하면 안된다! -&gt; 질문을 잘! 해야한다.</li>\n</ul>\n<p>잘 질문 하려면?</p>\n<ol>\n<li>충분한 구글링을 선행</li>\n<li>질문을 정리하자<br>2-1. 현재 발생한 <strong>상황</strong> 정리<br>2-2. 내가 해본 <strong>시도</strong>들을 정리<br>2-3. 최종적으로 Yes/No로 답이 오도록 정리<br>2-4. 혹은 내 결론에 대한 의견을 답할 수 있도록 정리</li>\n</ol>\n<h3 id=\"문서화를-‘잘’-하자\"><a href=\"#문서화를-‘잘’-하자\" class=\"headerlink\" title=\"문서화를 ‘잘’ 하자\"></a>문서화를 ‘잘’ 하자</h3><p>트러블 슈팅 목록으로 나눠서 정리 (<a href=\"https://github.com/angular/angular/issues/new/choose\">오픈소스들의 이슈 템플릿</a>을 참조해보자!)</p>\n<ul>\n<li><strong>어쩌다</strong>가 버그가 발생했나?</li>\n<li><strong>원인</strong>은 무엇인가?</li>\n<li>어떤 <strong>시도</strong>들을 해보았나?</li>\n<li>그래서 최종적으로 어떻게 해결했나?</li>\n</ul>\n<h3 id=\"문서-쓸-시간이-없다면\"><a href=\"#문서-쓸-시간이-없다면\" class=\"headerlink\" title=\"문서 쓸 시간이 없다면?\"></a>문서 쓸 시간이 없다면?</h3><p>문서화를 개발 프로세스의 일부분으로 생각하고 개발 기간을 잡자!<br>그리고 잘 정리한 문서를 <strong>공유</strong> 하자!!</p>\n<h2 id=\"팀의-생산성을-높이기\"><a href=\"#팀의-생산성을-높이기\" class=\"headerlink\" title=\"팀의 생산성을 높이기\"></a>팀의 생산성을 높이기</h2><h3 id=\"개발-환경의-중요성\"><a href=\"#개발-환경의-중요성\" class=\"headerlink\" title=\"개발 환경의 중요성\"></a>개발 환경의 중요성</h3><ul>\n<li>개선하기</li>\n<li>환경을 알기</li>\n<li>자동화의 중요성</li>\n<li>관성에 젖지 않는 비판적인 사고하기</li>\n</ul>\n<h3 id=\"변화-무쌍한-스펙-변경에-맞서기\"><a href=\"#변화-무쌍한-스펙-변경에-맞서기\" class=\"headerlink\" title=\"변화 무쌍한 스펙 변경에 맞서기\"></a>변화 무쌍한 스펙 변경에 맞서기</h3><ul>\n<li>초기에 결정된 스펙은 무조건 변경된다고 생각하기</li>\n<li>어떻게 대응할지 생각하기</li>\n<li>변경될 수 있는 요소들을 어떻게 제어해야할지</li>\n</ul>\n<hr>\n<h1 id=\"일-만드는-개발자-VS-일-부풀리는-개발자\"><a href=\"#일-만드는-개발자-VS-일-부풀리는-개발자\" class=\"headerlink\" title=\"일 만드는 개발자 VS 일 부풀리는 개발자\"></a>일 만드는 개발자 VS 일 부풀리는 개발자</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-vs\">세번째 세션</a>으로 우아한 형제들의 김민태 프로그래머님의 발표입니다.</p>\n<h2 id=\"‘일’-에-대해-정의해보기\"><a href=\"#‘일’-에-대해-정의해보기\" class=\"headerlink\" title=\"‘일’ 에 대해 정의해보기\"></a>‘일’ 에 대해 정의해보기</h2><p>사람과 태도, 전문성, 에너지, 등등</p>\n<h2 id=\"출발점은-Requirement\"><a href=\"#출발점은-Requirement\" class=\"headerlink\" title=\"출발점은 Requirement!\"></a>출발점은 Requirement!</h2><h3 id=\"요구사항은-어디까지-수용해야하나\"><a href=\"#요구사항은-어디까지-수용해야하나\" class=\"headerlink\" title=\"요구사항은 어디까지 수용해야하나?\"></a>요구사항은 어디까지 수용해야하나?</h3><ul>\n<li>먼저 직업인과 직장인에 대해 생각해보자<blockquote>\n<p>“나는 주니어니까…” 라는 생각은 하지말자.</p>\n</blockquote>\n</li>\n<li>상사와 제품에 대해 생각해보자<blockquote>\n<p>제품이 모든것의 중심이 되어야 하지 않을까?</p>\n</blockquote>\n</li>\n<li>습관은 관성이 된다.</li>\n</ul>\n<p>요구사항을 분석하고, 계획하고, 실행하고, 측정하고, 보정하고, 다시 분석하고 이런 반복적인 과정에서 예외사항이 발생할때는 바로 사람 때문이 대부분이다.</p>\n<h3 id=\"커뮤니케이션이-중요하다\"><a href=\"#커뮤니케이션이-중요하다\" class=\"headerlink\" title=\"커뮤니케이션이 중요하다.\"></a>커뮤니케이션이 중요하다.</h3><h3 id=\"동료를-위한-개발\"><a href=\"#동료를-위한-개발\" class=\"headerlink\" title=\"동료를 위한 개발\"></a>동료를 위한 개발</h3><h3 id=\"고객을-위한-개발\"><a href=\"#고객을-위한-개발\" class=\"headerlink\" title=\"고객을 위한 개발\"></a>고객을 위한 개발</h3><hr>\n<h1 id=\"빠르게-훑어보는-웹-개발-트렌드\"><a href=\"#빠르게-훑어보는-웹-개발-트렌드\" class=\"headerlink\" title=\"빠르게 훑어보는 웹 개발 트렌드\"></a>빠르게 훑어보는 웹 개발 트렌드</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019\">네번째 강의</a>로 카카오뱅크의 한장현님이 발표하셨습니다.</p>\n<p>약간 좀 뻔한 내용,,<br><a href=\"https://github.com/kamranahmedse/developer-roadmap\">2019 Front-end Developer’s Roadmap</a>을 기반으로한 발표였다.</p>\n<h3 id=\"웹개발-트랜드\"><a href=\"#웹개발-트랜드\" class=\"headerlink\" title=\"웹개발 트랜드\"></a>웹개발 트랜드</h3><p>서버 중심 -&gt; 클라이언트 중심</p>\n<hr>\n<h1 id=\"데이터-상태-관리-그것을-알려주마\"><a href=\"#데이터-상태-관리-그것을-알려주마\" class=\"headerlink\" title=\"데이터 상태 관리. 그것을 알려주마!\"></a>데이터 상태 관리. 그것을 알려주마!</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-140432157\">다섯번째 강의</a>로 네이버 PWE의 최현철님이 발표하셨습니다.</p>\n<h2 id=\"FE에서-상태관리란-무엇일까\"><a href=\"#FE에서-상태관리란-무엇일까\" class=\"headerlink\" title=\"FE에서 상태관리란 무엇일까?\"></a>FE에서 상태관리란 무엇일까?</h2><h2 id=\"SPA에서-상태관리란-무엇일까\"><a href=\"#SPA에서-상태관리란-무엇일까\" class=\"headerlink\" title=\"SPA에서 상태관리란 무엇일까?\"></a>SPA에서 상태관리란 무엇일까?</h2><blockquote>\n<p>상태라는 눈에 보이지 않는 부분이 실시간 비동기적으로 변하기때문에 제어하기 힘들다.</p>\n</blockquote>\n<hr>\n<h1 id=\"오늘부터-나도-FE-성능-분석가\"><a href=\"#오늘부터-나도-FE-성능-분석가\" class=\"headerlink\" title=\"오늘부터 나도 FE 성능 분석가\"></a>오늘부터 나도 FE 성능 분석가</h1><p><a href=\"https://www.slideshare.net/NaverEngineering/naver-tech-concertfe2019-fe\">마지막 강의</a>로 네이버 아폴로 FE의 손찬욱님이 발표하셨습니다.<br>개인적으로는 이번 컨퍼런스에서 가장 유익한 강의였습니다.</p>\n<h2 id=\"성능-분석가의-관심사-Goal-은-무엇일까\"><a href=\"#성능-분석가의-관심사-Goal-은-무엇일까\" class=\"headerlink\" title=\"성능 분석가의 관심사(Goal)은 무엇일까?\"></a>성능 분석가의 관심사(Goal)은 무엇일까?</h2><blockquote>\n<p>유저 입력시에 얼마나 빠르게 반응할 수 있나?</p>\n</blockquote>\n<h3 id=\"LAI-Loading-and-Interation\"><a href=\"#LAI-Loading-and-Interation\" class=\"headerlink\" title=\"LAI (Loading and Interation)\"></a>LAI (Loading and Interation)</h3><h2 id=\"어떻게-성능을-올릴까-Plan\"><a href=\"#어떻게-성능을-올릴까-Plan\" class=\"headerlink\" title=\"어떻게 성능을 올릴까? (Plan)\"></a>어떻게 성능을 올릴까? (Plan)</h2><ol>\n<li>대상을 선정. <em>숲을 보기!</em><ul>\n<li>어떤게 중요한 포인트인지 파악하기</li>\n</ul>\n</li>\n<li>개선 프로세스<ul>\n<li>측정</li>\n<li>분석</li>\n<li>최적화</li>\n<li>측정 …(반복)</li>\n</ul>\n</li>\n<li>언제까지?<ul>\n<li>목표하는 초기 로딩 시간에 맞게</li>\n<li>구글의 경우 <a href=\"https://developers.google.com/web/fundamentals/performance/rail?hl=ko\">RAIL</a>, <a href=\"https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint\">FMP</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"초기-로딩-속도-개선하기\"><a href=\"#초기-로딩-속도-개선하기\" class=\"headerlink\" title=\"초기 로딩 속도 개선하기\"></a>초기 로딩 속도 개선하기</h2><ul>\n<li>Waterfall 차트<ul>\n<li>높이 줄이기</li>\n<li>폭 줄이기</li>\n<li>간격 땡기기</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-높이-줄이기\"><a href=\"#1-높이-줄이기\" class=\"headerlink\" title=\"1. 높이 줄이기\"></a>1. 높이 줄이기</h3><pre><code>- Data URI -&gt; HTML에 Default 이미지 같은 이미지를 포함\n- Lazy\n- 이미지 (캐러셀의 경우 보여지는 곳만 먼저 로딩)\n</code></pre><h3 id=\"2-폭-줄이기\"><a href=\"#2-폭-줄이기\" class=\"headerlink\" title=\"2. 폭 줄이기\"></a>2. 폭 줄이기</h3><pre><code>- Initial connection\n    - HTTP 2.0으로 바꾸면 좋다(멀티 커넥션이 가능해짐)\n- TTFB (Time To First Byte)\n    - 서버나 비즈니스 로직이 느린걸 체크할 수 있음\n- Content download (네트워크 속도 등 여러 요인이 있지만)\n- [GZIP](https://ko.wikipedia.org/wiki/Gzip), [Minify](https://www.minifier.org/)(이걸 말한건지 정확하진 않음..), [Obfuscation](https://en.wikipedia.org/wiki/Obfuscation_(software))\n- 이미지 줄이기\n- Decode 비용 줄이기 (이미지 화면에 렌더링하는 비용)\n</code></pre><h3 id=\"3-간격-땡기기-gt-잘하기-위해선-브라우져-렌더링-과정을-잘-알아야함\"><a href=\"#3-간격-땡기기-gt-잘하기-위해선-브라우져-렌더링-과정을-잘-알아야함\" class=\"headerlink\" title=\"3. 간격 땡기기 -&gt; 잘하기 위해선 브라우져 렌더링 과정을 잘 알아야함\"></a>3. 간격 땡기기 -&gt; 잘하기 위해선 <a href=\"https://d2.naver.com/helloworld/59361\">브라우져 렌더링 과정</a>을 잘 알아야함</h3><pre><code>&lt;img width=&quot;649&quot; alt=&quot;브라우저 렌더링 과정 (출처:네이버D2)&quot; src=&quot;https://user-images.githubusercontent.com/35797540/56470210-a6497680-647e-11e9-9db6-229eddd3083b.png&quot;&gt;\n</code></pre><ol>\n<li>서버로부터 HTML 문자열을 Stream으로 받음</li>\n<li><code>&lt;head&gt;</code> 태그의 자원을 병렬로 받음</li>\n<li>2번에서 받은 자원을 모두 실행</li>\n<li><code>&lt;body&gt;</code> 태그부터 화면을 그리기 시작</li>\n</ol>\n<ul>\n<li>head 태그엔 css와 필수 JS만 넣기</li>\n<li>JS는 body 태그 마지막에 넣기<ul>\n<li>async, defer를 사용해서 원하는 위치에 넣어도 됨(but 지원하지 않는 브라우저가 존재함)</li>\n<li>async -&gt; 의존성이 없는 경우(GA)</li>\n<li>defer -&gt; DOM 제어와 관련이 있을때</li>\n</ul>\n</li>\n<li>preload<ul>\n<li>css 내에 폰트, 이미지를 미리 css와 함께 부름</li>\n</ul>\n</li>\n<li>HTTP2 Server Push<ul>\n<li>HTML, Javascript, CSS, Img 같이 받음</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-총체적으로-점검하기\"><a href=\"#4-총체적으로-점검하기\" class=\"headerlink\" title=\"4. 총체적으로 점검하기\"></a>4. 총체적으로 점검하기</h3><ul>\n<li>FP(Fisrt Paint) -&gt; head 태그 종료 후 이루어짐</li>\n<li>FMP(First Meaningful Paint) -&gt; <strong><em>hero element!</em></strong> -&gt; 이걸 어떤걸로 정할지가 중요함! (Lazy하게 처리하면 안되는 요소들)</li>\n<li>TTI(<a href=\"https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive\">Time To Interactive</a>)</li>\n<li>결국, 전체적으로 균형감 있게 줄여주는게 중요하다</li>\n</ul>\n<h2 id=\"Part-2\"><a href=\"#Part-2\" class=\"headerlink\" title=\"Part 2.\"></a>Part 2.</h2><h3 id=\"Case-by-Case\"><a href=\"#Case-by-Case\" class=\"headerlink\" title=\"Case by Case\"></a>Case by Case</h3><ul>\n<li>브라우져 메인 스레드를 괴롭히지 않아야함!</li>\n</ul>\n<h3 id=\"Javascript가-DOM을-만지면-메인-스레드가-Rendering-Pipeline-과정을-거친다\"><a href=\"#Javascript가-DOM을-만지면-메인-스레드가-Rendering-Pipeline-과정을-거친다\" class=\"headerlink\" title=\"Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다\"></a>Javascript가 DOM을 만지면 메인 스레드가 Rendering Pipeline 과정을 거친다</h3><ul>\n<li>Rendering Pipeline 과정</li>\n</ul>\n<ol>\n<li>Javascript가 건들면</li>\n<li>Style recalculation</li>\n<li>Layout</li>\n<li>Paint</li>\n<li>Composite (cpu가 아닌 gpu의 도움을 받음)<ul>\n<li>레이어를 겹쳐서 그리는 작업 (따라서 레이어를 어떻게 만드느냐가 중요함. 꼭 필요한 부분만 만들어야한다.)</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://csstriggers.com/\">csstriggers.com 참조</a></p>\n"},{"title":"Jest - Using Matchers","date":"2018-11-10T05:07:41.000Z","_content":"\n해당 포스트의 내용은 Jest 공식 문서의 [Using Matchers](https://jestjs.io/docs/en/using-matchers)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# Matcher들 사용하\n\nJest에서 `matcher`를 사용하여 다양한 방법으로 값을 테스트 할 수 있습니다. 이 문서에서는 일반적으로 사용되는 matcher들을 소개합니다. 전체 목록은 [`expect` API doc](https://jestjs.io/docs/en/expect)을 참조하세요.\n\n## 일반적인 Matcher\n\n값을 테스트하는 가장 심플한 방법은 완전히 같은지 확인하는 겁니다.\n\n```javascript\ntest('two plus two is four', () => {\n    expect(2 + 2).toBe(4);\n});\n```\n\n위의 코드에서 `expect(2 + 2)`는 \"예상되는\" 객체를 리턴합니다. 일반적으로 호출 대상을 제외하고는 이런 예상 객체(expectation objects)를 잘 사용하지 않습니다. 이 코드에선 `.toBe(4)`가 matcher 입니다. Jest가 실행되면, 모든 실패하는 matchers들을 거치게 되고, 아주 좋은 에러 메세지를 출력할 겁니다.\n\n`toBe`는 `Object.is`를 사용하여 완전히 같은지 테스트합니다. 만약 객체의 값을 체크하고 싶다면 `toEqual`을 사용하면 됩니다.\n\n```javascript\ntest('object assignment', () => {\n    const data = {one: 1};\n    data['two'] = 2;\n    expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n`toEqual`은 객체나 배열의 모든 필드를 재귀적으로 체크합니다.\n\n또한 matcher의 반대값도 테스트할 수 있습니다.\n\n```javascript\ntest('adding positive numbers is not zero', () => {\n    for (let a = 1; a < 10; a++) {\n        for (let b = 1; b < 10; b++) {\n            expect(a + b).not.toBe(0);\n        }\n    }\n});\n```\n\n## Truthiness (진실성 부여? 해석이 어렵네요...)\n\n테스트에서 때때로 `undefined`, `null`, `false`를 구분해야할 필요가 있지만, 때때로 이것들을 다르게 처리하고 싶지 않을 때가 있을 것입니다. Jest에는 당신이 원하는 것을 명시할 수 있게 해주는 헬퍼가 포함되어있습니다.\n\n-   `toBeNull`은 오직 `null`에만 매치됩니다.\n-   `toBeUndefined`는 오직 `undefined`에만 매치됩니다.\n-   `toBeDefined`는 `toBeUndefined`의 반대가 됩니다.\n-   `toBeTruthy`는 `if`문이 true로 처리하는 모든 것과 일치합니다.\n-   `toBeFalsy`는 `if`문이 false로 처리하는 모든 것과 일치합니다.\n\n예제:\n\n```javascript\ntest('null', () => {\n    const n = null;\n    expect(n).toBeNull();\n    expect(n).toBeDefined();\n    expect(n).not.toBeUndefined();\n    expect(n).not.toBeTruthy();\n    expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n    const z = 0;\n    expect(z).not.toBeNull();\n    expect(z).toBeDefined();\n    expect(z).not.toBeUndefined();\n    expect(z).not.toBeTruthy();\n    expect(z).toBeFalsy();\n});\n```\n\n당신의 코드에서 수행하고자 하는 작업과 가장 일치하는 matcher를 사용해야 합니다.\n\n## Numbers\n\n숫자를 비교하는 대부분의 방법에는 마찬가지로 matcher를 쓸 수 있다.\n\n```javascript\ntest('two plus two', () => {\n    const value = 2 + 2;\n    expect(value).toBeGreaterThan(3);\n    expect(value).toBeGreaterThanOrEqual(3.5);\n    expect(value).toBeLessThan(5);\n    expect(value).toBeLessThanOrEqual(4.5);\n\n    // toBe and toEqual are equivalent for numbers\n    expect(value).toBe(4);\n    expect(value).toEqual(4);\n});\n```\n\n매우 작은 반올림 에러가 발생하는걸 원하지 않는다면, 부동 소수점의 동일성을 체크할 경우에는 `toEqual`대신 `toBeClose`를 사용하세요.\n\n```javascript\ntest('adding floating point numbers', () => {\n    const value = 0.1 + 0.2;\n    //expect(value).toBe(0.3);           This won't work because of rounding error\n    expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n## String\n\n`toMatch`를 사용하여 정규표현식에 대해서 문자열 검사를 할 수 있습니다.\n\n```javascript\ntest('there is no I in team', () => {\n    expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n    expect('Christoph').toMatch(/stop/);\n});\n```\n\n## 배열과 반복문\n\n`toContain`을 사용하여 배열이나 반복문에 특정 항목이 포함되어 있는지 확인할 수 있습니다.\n\n```javascript\nconst shoppingList = ['diapers', 'kleenex', 'trash bags', 'paper towels', 'beer'];\n\ntest('the shopping list has beer on it', () => {\n    expect(shoppingList).toContain('beer');\n    expect(new Set(shoppingList)).toContain('beer');\n});\n```\n\n## Exceptions\n\n`toThrow`를 사용하여 특정 함수가 호출 되었을 때 에러를 던지도록 테스트 할 수 있습니다.\n\n```javascript\nfunction compileAndroidCode() {\n    throw new ConfigError('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n    expect(compileAndroidCode).toThrow();\n    expect(compileAndroidCode).toThrow(ConfigError);\n\n    // You can also use the exact error message or a regexp\n    expect(compileAndroidCode).toThrow('you are using the wrong JDK');\n    expect(compileAndroidCode).toThrow(/JDK/);\n});\n```\n\n## 그리고...\n\n이것은 그저 맛보기 정도입니다. 완전한 matcher들의 리스트를 확인하려면 [레퍼런스 문서](https://jestjs.io/docs/en/expect)를 확인하세요.\n\n사용 가능한 matcher들에 대해 알게 되었으니, 그 다음으로 [Jest로 비동기 코드 테스트](https://jestjs.io/docs/en/asynchronous)를 하는 방법을 보는게 좋습니다!\n","source":"_posts/jest-using-matchers.md","raw":"---\ntitle: Jest - Using Matchers\ndate: 2018-11-10 14:07:41\ncategories:\n    - Jest\n    - 공식 문서\ntags:\n    - Jest\n    - Using Matchers\n    - Jest 번역\n---\n\n해당 포스트의 내용은 Jest 공식 문서의 [Using Matchers](https://jestjs.io/docs/en/using-matchers)를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.\n\n---\n\n# Matcher들 사용하\n\nJest에서 `matcher`를 사용하여 다양한 방법으로 값을 테스트 할 수 있습니다. 이 문서에서는 일반적으로 사용되는 matcher들을 소개합니다. 전체 목록은 [`expect` API doc](https://jestjs.io/docs/en/expect)을 참조하세요.\n\n## 일반적인 Matcher\n\n값을 테스트하는 가장 심플한 방법은 완전히 같은지 확인하는 겁니다.\n\n```javascript\ntest('two plus two is four', () => {\n    expect(2 + 2).toBe(4);\n});\n```\n\n위의 코드에서 `expect(2 + 2)`는 \"예상되는\" 객체를 리턴합니다. 일반적으로 호출 대상을 제외하고는 이런 예상 객체(expectation objects)를 잘 사용하지 않습니다. 이 코드에선 `.toBe(4)`가 matcher 입니다. Jest가 실행되면, 모든 실패하는 matchers들을 거치게 되고, 아주 좋은 에러 메세지를 출력할 겁니다.\n\n`toBe`는 `Object.is`를 사용하여 완전히 같은지 테스트합니다. 만약 객체의 값을 체크하고 싶다면 `toEqual`을 사용하면 됩니다.\n\n```javascript\ntest('object assignment', () => {\n    const data = {one: 1};\n    data['two'] = 2;\n    expect(data).toEqual({one: 1, two: 2});\n});\n```\n\n`toEqual`은 객체나 배열의 모든 필드를 재귀적으로 체크합니다.\n\n또한 matcher의 반대값도 테스트할 수 있습니다.\n\n```javascript\ntest('adding positive numbers is not zero', () => {\n    for (let a = 1; a < 10; a++) {\n        for (let b = 1; b < 10; b++) {\n            expect(a + b).not.toBe(0);\n        }\n    }\n});\n```\n\n## Truthiness (진실성 부여? 해석이 어렵네요...)\n\n테스트에서 때때로 `undefined`, `null`, `false`를 구분해야할 필요가 있지만, 때때로 이것들을 다르게 처리하고 싶지 않을 때가 있을 것입니다. Jest에는 당신이 원하는 것을 명시할 수 있게 해주는 헬퍼가 포함되어있습니다.\n\n-   `toBeNull`은 오직 `null`에만 매치됩니다.\n-   `toBeUndefined`는 오직 `undefined`에만 매치됩니다.\n-   `toBeDefined`는 `toBeUndefined`의 반대가 됩니다.\n-   `toBeTruthy`는 `if`문이 true로 처리하는 모든 것과 일치합니다.\n-   `toBeFalsy`는 `if`문이 false로 처리하는 모든 것과 일치합니다.\n\n예제:\n\n```javascript\ntest('null', () => {\n    const n = null;\n    expect(n).toBeNull();\n    expect(n).toBeDefined();\n    expect(n).not.toBeUndefined();\n    expect(n).not.toBeTruthy();\n    expect(n).toBeFalsy();\n});\n\ntest('zero', () => {\n    const z = 0;\n    expect(z).not.toBeNull();\n    expect(z).toBeDefined();\n    expect(z).not.toBeUndefined();\n    expect(z).not.toBeTruthy();\n    expect(z).toBeFalsy();\n});\n```\n\n당신의 코드에서 수행하고자 하는 작업과 가장 일치하는 matcher를 사용해야 합니다.\n\n## Numbers\n\n숫자를 비교하는 대부분의 방법에는 마찬가지로 matcher를 쓸 수 있다.\n\n```javascript\ntest('two plus two', () => {\n    const value = 2 + 2;\n    expect(value).toBeGreaterThan(3);\n    expect(value).toBeGreaterThanOrEqual(3.5);\n    expect(value).toBeLessThan(5);\n    expect(value).toBeLessThanOrEqual(4.5);\n\n    // toBe and toEqual are equivalent for numbers\n    expect(value).toBe(4);\n    expect(value).toEqual(4);\n});\n```\n\n매우 작은 반올림 에러가 발생하는걸 원하지 않는다면, 부동 소수점의 동일성을 체크할 경우에는 `toEqual`대신 `toBeClose`를 사용하세요.\n\n```javascript\ntest('adding floating point numbers', () => {\n    const value = 0.1 + 0.2;\n    //expect(value).toBe(0.3);           This won't work because of rounding error\n    expect(value).toBeCloseTo(0.3); // This works.\n});\n```\n\n## String\n\n`toMatch`를 사용하여 정규표현식에 대해서 문자열 검사를 할 수 있습니다.\n\n```javascript\ntest('there is no I in team', () => {\n    expect('team').not.toMatch(/I/);\n});\n\ntest('but there is a \"stop\" in Christoph', () => {\n    expect('Christoph').toMatch(/stop/);\n});\n```\n\n## 배열과 반복문\n\n`toContain`을 사용하여 배열이나 반복문에 특정 항목이 포함되어 있는지 확인할 수 있습니다.\n\n```javascript\nconst shoppingList = ['diapers', 'kleenex', 'trash bags', 'paper towels', 'beer'];\n\ntest('the shopping list has beer on it', () => {\n    expect(shoppingList).toContain('beer');\n    expect(new Set(shoppingList)).toContain('beer');\n});\n```\n\n## Exceptions\n\n`toThrow`를 사용하여 특정 함수가 호출 되었을 때 에러를 던지도록 테스트 할 수 있습니다.\n\n```javascript\nfunction compileAndroidCode() {\n    throw new ConfigError('you are using the wrong JDK');\n}\n\ntest('compiling android goes as expected', () => {\n    expect(compileAndroidCode).toThrow();\n    expect(compileAndroidCode).toThrow(ConfigError);\n\n    // You can also use the exact error message or a regexp\n    expect(compileAndroidCode).toThrow('you are using the wrong JDK');\n    expect(compileAndroidCode).toThrow(/JDK/);\n});\n```\n\n## 그리고...\n\n이것은 그저 맛보기 정도입니다. 완전한 matcher들의 리스트를 확인하려면 [레퍼런스 문서](https://jestjs.io/docs/en/expect)를 확인하세요.\n\n사용 가능한 matcher들에 대해 알게 되었으니, 그 다음으로 [Jest로 비동기 코드 테스트](https://jestjs.io/docs/en/asynchronous)를 하는 방법을 보는게 좋습니다!\n","slug":"jest-using-matchers","published":1,"updated":"2021-04-10T07:56:03.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs6006jbqwx4nli2sp3","content":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/using-matchers\">Using Matchers</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"Matcher들-사용하\"><a href=\"#Matcher들-사용하\" class=\"headerlink\" title=\"Matcher들 사용하\"></a>Matcher들 사용하</h1><p>Jest에서 <code>matcher</code>를 사용하여 다양한 방법으로 값을 테스트 할 수 있습니다. 이 문서에서는 일반적으로 사용되는 matcher들을 소개합니다. 전체 목록은 <a href=\"https://jestjs.io/docs/en/expect\"><code>expect</code> API doc</a>을 참조하세요.</p>\n<h2 id=\"일반적인-Matcher\"><a href=\"#일반적인-Matcher\" class=\"headerlink\" title=\"일반적인 Matcher\"></a>일반적인 Matcher</h2><p>값을 테스트하는 가장 심플한 방법은 완전히 같은지 확인하는 겁니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;two plus two is four&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"number\">2</span> + <span class=\"number\">2</span>).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>위의 코드에서 <code>expect(2 + 2)</code>는 “예상되는” 객체를 리턴합니다. 일반적으로 호출 대상을 제외하고는 이런 예상 객체(expectation objects)를 잘 사용하지 않습니다. 이 코드에선 <code>.toBe(4)</code>가 matcher 입니다. Jest가 실행되면, 모든 실패하는 matchers들을 거치게 되고, 아주 좋은 에러 메세지를 출력할 겁니다.</p>\n<p><code>toBe</code>는 <code>Object.is</code>를 사용하여 완전히 같은지 테스트합니다. 만약 객체의 값을 체크하고 싶다면 <code>toEqual</code>을 사용하면 됩니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;object assignment&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    data[<span class=\"string\">&#x27;two&#x27;</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    expect(data).toEqual(&#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>, <span class=\"attr\">two</span>: <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>toEqual</code>은 객체나 배열의 모든 필드를 재귀적으로 체크합니다.</p>\n<p>또한 matcher의 반대값도 테스트할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;adding positive numbers is not zero&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">10</span>; b++) &#123;</span><br><span class=\"line\">            expect(a + b).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Truthiness-진실성-부여-해석이-어렵네요…\"><a href=\"#Truthiness-진실성-부여-해석이-어렵네요…\" class=\"headerlink\" title=\"Truthiness (진실성 부여? 해석이 어렵네요…)\"></a>Truthiness (진실성 부여? 해석이 어렵네요…)</h2><p>테스트에서 때때로 <code>undefined</code>, <code>null</code>, <code>false</code>를 구분해야할 필요가 있지만, 때때로 이것들을 다르게 처리하고 싶지 않을 때가 있을 것입니다. Jest에는 당신이 원하는 것을 명시할 수 있게 해주는 헬퍼가 포함되어있습니다.</p>\n<ul>\n<li><code>toBeNull</code>은 오직 <code>null</code>에만 매치됩니다.</li>\n<li><code>toBeUndefined</code>는 오직 <code>undefined</code>에만 매치됩니다.</li>\n<li><code>toBeDefined</code>는 <code>toBeUndefined</code>의 반대가 됩니다.</li>\n<li><code>toBeTruthy</code>는 <code>if</code>문이 true로 처리하는 모든 것과 일치합니다.</li>\n<li><code>toBeFalsy</code>는 <code>if</code>문이 false로 처리하는 모든 것과 일치합니다.</li>\n</ul>\n<p>예제:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;null&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    expect(n).toBeNull();</span><br><span class=\"line\">    expect(n).toBeDefined();</span><br><span class=\"line\">    expect(n).not.toBeUndefined();</span><br><span class=\"line\">    expect(n).not.toBeTruthy();</span><br><span class=\"line\">    expect(n).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;zero&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> z = <span class=\"number\">0</span>;</span><br><span class=\"line\">    expect(z).not.toBeNull();</span><br><span class=\"line\">    expect(z).toBeDefined();</span><br><span class=\"line\">    expect(z).not.toBeUndefined();</span><br><span class=\"line\">    expect(z).not.toBeTruthy();</span><br><span class=\"line\">    expect(z).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>당신의 코드에서 수행하고자 하는 작업과 가장 일치하는 matcher를 사용해야 합니다.</p>\n<h2 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h2><p>숫자를 비교하는 대부분의 방법에는 마찬가지로 matcher를 쓸 수 있다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;two plus two&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"number\">2</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">    expect(value).toBeGreaterThan(<span class=\"number\">3</span>);</span><br><span class=\"line\">    expect(value).toBeGreaterThanOrEqual(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">    expect(value).toBeLessThan(<span class=\"number\">5</span>);</span><br><span class=\"line\">    expect(value).toBeLessThanOrEqual(<span class=\"number\">4.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// toBe and toEqual are equivalent for numbers</span></span><br><span class=\"line\">    expect(value).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">    expect(value).toEqual(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>매우 작은 반올림 에러가 발생하는걸 원하지 않는다면, 부동 소수점의 동일성을 체크할 경우에는 <code>toEqual</code>대신 <code>toBeClose</code>를 사용하세요.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;adding floating point numbers&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//expect(value).toBe(0.3);           This won&#x27;t work because of rounding error</span></span><br><span class=\"line\">    expect(value).toBeCloseTo(<span class=\"number\">0.3</span>); <span class=\"comment\">// This works.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><p><code>toMatch</code>를 사용하여 정규표현식에 대해서 문자열 검사를 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;there is no I in team&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;team&#x27;</span>).not.toMatch(<span class=\"regexp\">/I/</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;but there is a &quot;stop&quot; in Christoph&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;Christoph&#x27;</span>).toMatch(<span class=\"regexp\">/stop/</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"배열과-반복문\"><a href=\"#배열과-반복문\" class=\"headerlink\" title=\"배열과 반복문\"></a>배열과 반복문</h2><p><code>toContain</code>을 사용하여 배열이나 반복문에 특정 항목이 포함되어 있는지 확인할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shoppingList = [<span class=\"string\">&#x27;diapers&#x27;</span>, <span class=\"string\">&#x27;kleenex&#x27;</span>, <span class=\"string\">&#x27;trash bags&#x27;</span>, <span class=\"string\">&#x27;paper towels&#x27;</span>, <span class=\"string\">&#x27;beer&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the shopping list has beer on it&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(shoppingList).toContain(<span class=\"string\">&#x27;beer&#x27;</span>);</span><br><span class=\"line\">    expect(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(shoppingList)).toContain(<span class=\"string\">&#x27;beer&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Exceptions\"><a href=\"#Exceptions\" class=\"headerlink\" title=\"Exceptions\"></a>Exceptions</h2><p><code>toThrow</code>를 사용하여 특정 함수가 호출 되었을 때 에러를 던지도록 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileAndroidCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConfigError(<span class=\"string\">&#x27;you are using the wrong JDK&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;compiling android goes as expected&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow();</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(ConfigError);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can also use the exact error message or a regexp</span></span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(<span class=\"string\">&#x27;you are using the wrong JDK&#x27;</span>);</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(<span class=\"regexp\">/JDK/</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"그리고…\"><a href=\"#그리고…\" class=\"headerlink\" title=\"그리고…\"></a>그리고…</h2><p>이것은 그저 맛보기 정도입니다. 완전한 matcher들의 리스트를 확인하려면 <a href=\"https://jestjs.io/docs/en/expect\">레퍼런스 문서</a>를 확인하세요.</p>\n<p>사용 가능한 matcher들에 대해 알게 되었으니, 그 다음으로 <a href=\"https://jestjs.io/docs/en/asynchronous\">Jest로 비동기 코드 테스트</a>를 하는 방법을 보는게 좋습니다!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>해당 포스트의 내용은 Jest 공식 문서의 <a href=\"https://jestjs.io/docs/en/using-matchers\">Using Matchers</a>를 개인 공부를 위해 번역한 것 입니다. 오역이 있을 수 있으니, 정정해야할 내용은 댓글로 알려 주시면 감사하겠습니다.</p>\n<hr>\n<h1 id=\"Matcher들-사용하\"><a href=\"#Matcher들-사용하\" class=\"headerlink\" title=\"Matcher들 사용하\"></a>Matcher들 사용하</h1><p>Jest에서 <code>matcher</code>를 사용하여 다양한 방법으로 값을 테스트 할 수 있습니다. 이 문서에서는 일반적으로 사용되는 matcher들을 소개합니다. 전체 목록은 <a href=\"https://jestjs.io/docs/en/expect\"><code>expect</code> API doc</a>을 참조하세요.</p>\n<h2 id=\"일반적인-Matcher\"><a href=\"#일반적인-Matcher\" class=\"headerlink\" title=\"일반적인 Matcher\"></a>일반적인 Matcher</h2><p>값을 테스트하는 가장 심플한 방법은 완전히 같은지 확인하는 겁니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;two plus two is four&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"number\">2</span> + <span class=\"number\">2</span>).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>위의 코드에서 <code>expect(2 + 2)</code>는 “예상되는” 객체를 리턴합니다. 일반적으로 호출 대상을 제외하고는 이런 예상 객체(expectation objects)를 잘 사용하지 않습니다. 이 코드에선 <code>.toBe(4)</code>가 matcher 입니다. Jest가 실행되면, 모든 실패하는 matchers들을 거치게 되고, 아주 좋은 에러 메세지를 출력할 겁니다.</p>\n<p><code>toBe</code>는 <code>Object.is</code>를 사용하여 완전히 같은지 테스트합니다. 만약 객체의 값을 체크하고 싶다면 <code>toEqual</code>을 사용하면 됩니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;object assignment&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">    data[<span class=\"string\">&#x27;two&#x27;</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    expect(data).toEqual(&#123;<span class=\"attr\">one</span>: <span class=\"number\">1</span>, <span class=\"attr\">two</span>: <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>toEqual</code>은 객체나 배열의 모든 필드를 재귀적으로 체크합니다.</p>\n<p>또한 matcher의 반대값도 테스트할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;adding positive numbers is not zero&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a = <span class=\"number\">1</span>; a &lt; <span class=\"number\">10</span>; a++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">1</span>; b &lt; <span class=\"number\">10</span>; b++) &#123;</span><br><span class=\"line\">            expect(a + b).not.toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Truthiness-진실성-부여-해석이-어렵네요…\"><a href=\"#Truthiness-진실성-부여-해석이-어렵네요…\" class=\"headerlink\" title=\"Truthiness (진실성 부여? 해석이 어렵네요…)\"></a>Truthiness (진실성 부여? 해석이 어렵네요…)</h2><p>테스트에서 때때로 <code>undefined</code>, <code>null</code>, <code>false</code>를 구분해야할 필요가 있지만, 때때로 이것들을 다르게 처리하고 싶지 않을 때가 있을 것입니다. Jest에는 당신이 원하는 것을 명시할 수 있게 해주는 헬퍼가 포함되어있습니다.</p>\n<ul>\n<li><code>toBeNull</code>은 오직 <code>null</code>에만 매치됩니다.</li>\n<li><code>toBeUndefined</code>는 오직 <code>undefined</code>에만 매치됩니다.</li>\n<li><code>toBeDefined</code>는 <code>toBeUndefined</code>의 반대가 됩니다.</li>\n<li><code>toBeTruthy</code>는 <code>if</code>문이 true로 처리하는 모든 것과 일치합니다.</li>\n<li><code>toBeFalsy</code>는 <code>if</code>문이 false로 처리하는 모든 것과 일치합니다.</li>\n</ul>\n<p>예제:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;null&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    expect(n).toBeNull();</span><br><span class=\"line\">    expect(n).toBeDefined();</span><br><span class=\"line\">    expect(n).not.toBeUndefined();</span><br><span class=\"line\">    expect(n).not.toBeTruthy();</span><br><span class=\"line\">    expect(n).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;zero&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> z = <span class=\"number\">0</span>;</span><br><span class=\"line\">    expect(z).not.toBeNull();</span><br><span class=\"line\">    expect(z).toBeDefined();</span><br><span class=\"line\">    expect(z).not.toBeUndefined();</span><br><span class=\"line\">    expect(z).not.toBeTruthy();</span><br><span class=\"line\">    expect(z).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>당신의 코드에서 수행하고자 하는 작업과 가장 일치하는 matcher를 사용해야 합니다.</p>\n<h2 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h2><p>숫자를 비교하는 대부분의 방법에는 마찬가지로 matcher를 쓸 수 있다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;two plus two&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"number\">2</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">    expect(value).toBeGreaterThan(<span class=\"number\">3</span>);</span><br><span class=\"line\">    expect(value).toBeGreaterThanOrEqual(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">    expect(value).toBeLessThan(<span class=\"number\">5</span>);</span><br><span class=\"line\">    expect(value).toBeLessThanOrEqual(<span class=\"number\">4.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// toBe and toEqual are equivalent for numbers</span></span><br><span class=\"line\">    expect(value).toBe(<span class=\"number\">4</span>);</span><br><span class=\"line\">    expect(value).toEqual(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>매우 작은 반올림 에러가 발생하는걸 원하지 않는다면, 부동 소수점의 동일성을 체크할 경우에는 <code>toEqual</code>대신 <code>toBeClose</code>를 사용하세요.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;adding floating point numbers&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\">    <span class=\"comment\">//expect(value).toBe(0.3);           This won&#x27;t work because of rounding error</span></span><br><span class=\"line\">    expect(value).toBeCloseTo(<span class=\"number\">0.3</span>); <span class=\"comment\">// This works.</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><p><code>toMatch</code>를 사용하여 정규표현식에 대해서 문자열 검사를 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&#x27;there is no I in team&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;team&#x27;</span>).not.toMatch(<span class=\"regexp\">/I/</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;but there is a &quot;stop&quot; in Christoph&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"string\">&#x27;Christoph&#x27;</span>).toMatch(<span class=\"regexp\">/stop/</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"배열과-반복문\"><a href=\"#배열과-반복문\" class=\"headerlink\" title=\"배열과 반복문\"></a>배열과 반복문</h2><p><code>toContain</code>을 사용하여 배열이나 반복문에 특정 항목이 포함되어 있는지 확인할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shoppingList = [<span class=\"string\">&#x27;diapers&#x27;</span>, <span class=\"string\">&#x27;kleenex&#x27;</span>, <span class=\"string\">&#x27;trash bags&#x27;</span>, <span class=\"string\">&#x27;paper towels&#x27;</span>, <span class=\"string\">&#x27;beer&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;the shopping list has beer on it&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(shoppingList).toContain(<span class=\"string\">&#x27;beer&#x27;</span>);</span><br><span class=\"line\">    expect(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(shoppingList)).toContain(<span class=\"string\">&#x27;beer&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Exceptions\"><a href=\"#Exceptions\" class=\"headerlink\" title=\"Exceptions\"></a>Exceptions</h2><p><code>toThrow</code>를 사용하여 특정 함수가 호출 되었을 때 에러를 던지도록 테스트 할 수 있습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileAndroidCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ConfigError(<span class=\"string\">&#x27;you are using the wrong JDK&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&#x27;compiling android goes as expected&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow();</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(ConfigError);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can also use the exact error message or a regexp</span></span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(<span class=\"string\">&#x27;you are using the wrong JDK&#x27;</span>);</span><br><span class=\"line\">    expect(compileAndroidCode).toThrow(<span class=\"regexp\">/JDK/</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"그리고…\"><a href=\"#그리고…\" class=\"headerlink\" title=\"그리고…\"></a>그리고…</h2><p>이것은 그저 맛보기 정도입니다. 완전한 matcher들의 리스트를 확인하려면 <a href=\"https://jestjs.io/docs/en/expect\">레퍼런스 문서</a>를 확인하세요.</p>\n<p>사용 가능한 matcher들에 대해 알게 되었으니, 그 다음으로 <a href=\"https://jestjs.io/docs/en/asynchronous\">Jest로 비동기 코드 테스트</a>를 하는 방법을 보는게 좋습니다!</p>\n"},{"title":"style CSS","_content":"\n# CSS\n\n## css → disabled일때 스타일 처리하는 법\n\n```css\n&:disabled {\n    cursor: not-allowed;\n    color: ${Color.white};\n    border: 1px solid ${Color.white};\n    opacity: 0.4;\n  }\n```\n\n## input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)\n\n---\n\n## flexbox\n\n- 컨테이너를 꾸며주는 속성값들이 있고, 아이템들을 꾸며주는 속성값들이 있다\n- 아이템들의 배치 방향에 따라 중심 축이 결정된다.\n- `display: flex;`\n- `flex-direction: row;`  -> 방향을 정해줘야함. default는 row\n- `flex-wrap: nowrap;` -> default는 nowrap. 화면이 좁아질 경우 어떻게 표시할지\n- `flex-flow: column wrap` -> 한번에 표현\n\n### justify-content -> **중심축(main axis)**에서 아이템을 어떻게 배치할지\n\n- flex-start, center, flex-end\n- space-around -> 박스를 둘러싸서 스페이스를 넣어줌. 맨 앞뒤는 일정하지만, 겹치는 부분은 각각 적용되어 좀더 두껍\n- space-evenly -> space-around와 비슷하지만 겹치는 부분까지 맨앞뒤와 동일하게 일정하다.\n- space-between -> 맨 앞뒤는 공간 없고, 사이만 공간을 줌\n\n### align-items -> **반대축(cross axis)**에서 아이템을 어떻게 배치할지\n\n- baseline -> text를 기준으로 동일하게 정렬하고 싶을때\n\n### align-content -> **반대축**에서 아이템을 어떻게 배치할지(justify-content와 반대)\n\n### flex-grow\n\n- 아이템이 점점 켜졌을때, 어떻게 노출할지\n- content를 채우도록 할지 -> ex) 모든 아이템들을 `flex-grow: 1`로 하면 각 아이템들의 할당영역이 같게됨\n\n### flex-shrink\n\n- 반대로 아이템이 점점 줄어들때 어떻게 노출할지\n\n### flex-basis (default: auto)\n\n- 공간을 얼마나 차지할지 좀 더 세부적으로 조절할 수 있게 해줌\n- ex) item1은 60%, item2는 30%, item3은 10% 차지하게 할 수도 있음\n\n### align-self\n\n- 아이템 별로 아이템을 정렬할 수 있음\n\n## flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -> margin-left: auto / margin-right: auto\n\n정리 굳 사이트\n- https://d2.naver.com/helloworld/8540176\n\n---\n\n## vh\n\n- view height -> `height: 100vh` 로 할 경우, 부모의 height와 상관없이 view port를 100% 사용하겠다 라는 의미\n\n## item center 정렬\n\n```css\n  .Aligner {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n```\n\n## [pseudo-class](https://developer.mozilla.org/ko/docs/Web/CSS/:nth-child)\n\n선택자에 추가하는 키워드\n\n### :nth-child\n\n형제 엘리먼트(group of siblings) 간의 순서에 따라 요소를 선택함\n\n- odd, even\n- 함수형으로 표기 가능\n\n### [nth-last-child](https://developer.mozilla.org/ko/docs/Web/CSS/:nth-last-child)\n\n끝부터 계산하여 형제 그룹간의 위치에 따라 엘리먼트 선택\n\n## [content-visibility](https://wit.nts-corp.com/2020/09/11/6223)\n\nChrome 85에 새롭게 추가, 렌더링 성능 향상에 도움\n\n- 화면 밖 콘텐츠의 렌더링을 생략함으로써 초기 로드 시간을 개선\n- UserAgent가 layout, painting을 포함한 요소의 렌더링 작업을 필요로할 때까지 생략할 수 있도록 합니다.\n- 콘텐츠의 대부분이 화면 밖에 있을 때, content-visibility을 활용해서 렌더링을 생략하게 되면 사용자의 초기 로드 시간이 훨씬 빨라집니다. 또한, 화면 내 콘텐츠와 더 빠르게 상호작용할 수 있습니다.\n\n### CSS Containment\n\nCSS Containment의 핵심이자 목적은 페이지 전체에서 DOM subtree의 분리를 제공하여 렌더링 성능을 향상시키는 것 입니다.\n\n## 연속 공백 제거\n\n``` css\n  white-space: pre-wrap;\n```\n\n## styled-component anti-pattern\n\n[!!!주의] SC props에 boolean 등 정해져있는 값이 아닌 string, number 등 임의의 값이 넘어가게되면 runtime에 class 를 매번 생성해서 효율이 확 떨어짐. 절대적으로 피해야할 anti-pattern 입니당.\n\n변하는 값을 넘기면 런타임때 클래스를 생성하는 방식이라 계속 다른 클래스가 생성되버림\n\n## && 이란?\n\n## display: box일때, 우측정렬 -> float: right!\n\n## CSS 선언시 정리 순서 -> 박스 모델 중심\n[참고](https://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/%EC%83%81%EC%9E%90_%EB%AA%A8%EB%8D%B8)\n\n``` javascript\nfontSize\nfontWeight\nposition\ntop\nleft\n...\ndisplay\nmargin\npadding\nwidth\nheight\nborder\n...\nbackground\ncolor\n...\n```\n\n관련된 애들끼리 모아놓은 걸 보실 수 있습니다. 읽기가 좋죠.\nboxmodel 이외의  background, color와 같이 꾸며주는 애들은 좀 뒤로\n\n## box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우\n\n부모 클래스에서 `display: flex;` 해주고 브라우저 크기에 따라 줄어들게 할 자식에서 `flex: auto`\n이때 `width: 100%` 를 주면 의도치않게 동작\n\n## overscroll-behavior\n\n- https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\n\n스크롤링이 끝났을때 브라우저에게 어떤 처리를 할지 설정해줌.\n\nex) 알림에서 스크롤 끝까지 갔을때 뒤쪽 브라우저 스크롤되지 않도록 처리할때 사용\n`overscroll-behavior: contain;`\n\n## px, em, rem 차이\n\n[참고 문서](https://medium.com/watcha/watcha-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-px-em-rem-f569c6e76e66)\n\n- px로 font-size를 지정할 경우 미디어 쿼리나 자바스크립트를 사용하지 않는 이상 변경하기 매우 어려움. 반응형 웹 작업에서는 효율적이지 못함\n- em은 font-size 기준으로 곱해서 계산한다\n- font-size는 부모의 값을 상속하는 속성이기 때문에 em 을 사용할때 원하지 않는 결과가 나올 수 있음. 필요한 곳에만 사용하길\n\n### rem\n\nem과 마찬가지로 font-size에 비례하는 속성.\nem과의 차이는 오직 html 태그의 글자 크기만 참조함.\n계산하기 쉽게 글자 크기를 10픽셀로 맞추고 시작하는 경우가 많음.\n\n## white-space\n\n요소의 공백을 어떻게 처리할지에 대한 스타일\n\n- normal → 여러 공백이나 줄바꿈을 하나의 공백으로 처리, 필요하다면 긴 줄을 줄바꿈처리함\n- nowrap → 여러 공백이나 줄바꿈을 하나의 공백으로 처리. 긴 줄을 줄바꿈 처리하지 않음\n- pre → 여러 공백을 그대로 처리. 긴 줄을 줄바꿈 하지 않음\n- pre-wrap → 연속 공백 그대로 유지. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리\n- pre-line → 연속 공백 하나의 공백으로 처리. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리\n","source":"_posts/style-css.md","raw":"---\ntitle: style CSS\n---\n\n# CSS\n\n## css → disabled일때 스타일 처리하는 법\n\n```css\n&:disabled {\n    cursor: not-allowed;\n    color: ${Color.white};\n    border: 1px solid ${Color.white};\n    opacity: 0.4;\n  }\n```\n\n## input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)\n\n---\n\n## flexbox\n\n- 컨테이너를 꾸며주는 속성값들이 있고, 아이템들을 꾸며주는 속성값들이 있다\n- 아이템들의 배치 방향에 따라 중심 축이 결정된다.\n- `display: flex;`\n- `flex-direction: row;`  -> 방향을 정해줘야함. default는 row\n- `flex-wrap: nowrap;` -> default는 nowrap. 화면이 좁아질 경우 어떻게 표시할지\n- `flex-flow: column wrap` -> 한번에 표현\n\n### justify-content -> **중심축(main axis)**에서 아이템을 어떻게 배치할지\n\n- flex-start, center, flex-end\n- space-around -> 박스를 둘러싸서 스페이스를 넣어줌. 맨 앞뒤는 일정하지만, 겹치는 부분은 각각 적용되어 좀더 두껍\n- space-evenly -> space-around와 비슷하지만 겹치는 부분까지 맨앞뒤와 동일하게 일정하다.\n- space-between -> 맨 앞뒤는 공간 없고, 사이만 공간을 줌\n\n### align-items -> **반대축(cross axis)**에서 아이템을 어떻게 배치할지\n\n- baseline -> text를 기준으로 동일하게 정렬하고 싶을때\n\n### align-content -> **반대축**에서 아이템을 어떻게 배치할지(justify-content와 반대)\n\n### flex-grow\n\n- 아이템이 점점 켜졌을때, 어떻게 노출할지\n- content를 채우도록 할지 -> ex) 모든 아이템들을 `flex-grow: 1`로 하면 각 아이템들의 할당영역이 같게됨\n\n### flex-shrink\n\n- 반대로 아이템이 점점 줄어들때 어떻게 노출할지\n\n### flex-basis (default: auto)\n\n- 공간을 얼마나 차지할지 좀 더 세부적으로 조절할 수 있게 해줌\n- ex) item1은 60%, item2는 30%, item3은 10% 차지하게 할 수도 있음\n\n### align-self\n\n- 아이템 별로 아이템을 정렬할 수 있음\n\n## flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -> margin-left: auto / margin-right: auto\n\n정리 굳 사이트\n- https://d2.naver.com/helloworld/8540176\n\n---\n\n## vh\n\n- view height -> `height: 100vh` 로 할 경우, 부모의 height와 상관없이 view port를 100% 사용하겠다 라는 의미\n\n## item center 정렬\n\n```css\n  .Aligner {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n```\n\n## [pseudo-class](https://developer.mozilla.org/ko/docs/Web/CSS/:nth-child)\n\n선택자에 추가하는 키워드\n\n### :nth-child\n\n형제 엘리먼트(group of siblings) 간의 순서에 따라 요소를 선택함\n\n- odd, even\n- 함수형으로 표기 가능\n\n### [nth-last-child](https://developer.mozilla.org/ko/docs/Web/CSS/:nth-last-child)\n\n끝부터 계산하여 형제 그룹간의 위치에 따라 엘리먼트 선택\n\n## [content-visibility](https://wit.nts-corp.com/2020/09/11/6223)\n\nChrome 85에 새롭게 추가, 렌더링 성능 향상에 도움\n\n- 화면 밖 콘텐츠의 렌더링을 생략함으로써 초기 로드 시간을 개선\n- UserAgent가 layout, painting을 포함한 요소의 렌더링 작업을 필요로할 때까지 생략할 수 있도록 합니다.\n- 콘텐츠의 대부분이 화면 밖에 있을 때, content-visibility을 활용해서 렌더링을 생략하게 되면 사용자의 초기 로드 시간이 훨씬 빨라집니다. 또한, 화면 내 콘텐츠와 더 빠르게 상호작용할 수 있습니다.\n\n### CSS Containment\n\nCSS Containment의 핵심이자 목적은 페이지 전체에서 DOM subtree의 분리를 제공하여 렌더링 성능을 향상시키는 것 입니다.\n\n## 연속 공백 제거\n\n``` css\n  white-space: pre-wrap;\n```\n\n## styled-component anti-pattern\n\n[!!!주의] SC props에 boolean 등 정해져있는 값이 아닌 string, number 등 임의의 값이 넘어가게되면 runtime에 class 를 매번 생성해서 효율이 확 떨어짐. 절대적으로 피해야할 anti-pattern 입니당.\n\n변하는 값을 넘기면 런타임때 클래스를 생성하는 방식이라 계속 다른 클래스가 생성되버림\n\n## && 이란?\n\n## display: box일때, 우측정렬 -> float: right!\n\n## CSS 선언시 정리 순서 -> 박스 모델 중심\n[참고](https://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/%EC%83%81%EC%9E%90_%EB%AA%A8%EB%8D%B8)\n\n``` javascript\nfontSize\nfontWeight\nposition\ntop\nleft\n...\ndisplay\nmargin\npadding\nwidth\nheight\nborder\n...\nbackground\ncolor\n...\n```\n\n관련된 애들끼리 모아놓은 걸 보실 수 있습니다. 읽기가 좋죠.\nboxmodel 이외의  background, color와 같이 꾸며주는 애들은 좀 뒤로\n\n## box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우\n\n부모 클래스에서 `display: flex;` 해주고 브라우저 크기에 따라 줄어들게 할 자식에서 `flex: auto`\n이때 `width: 100%` 를 주면 의도치않게 동작\n\n## overscroll-behavior\n\n- https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\n\n스크롤링이 끝났을때 브라우저에게 어떤 처리를 할지 설정해줌.\n\nex) 알림에서 스크롤 끝까지 갔을때 뒤쪽 브라우저 스크롤되지 않도록 처리할때 사용\n`overscroll-behavior: contain;`\n\n## px, em, rem 차이\n\n[참고 문서](https://medium.com/watcha/watcha-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-px-em-rem-f569c6e76e66)\n\n- px로 font-size를 지정할 경우 미디어 쿼리나 자바스크립트를 사용하지 않는 이상 변경하기 매우 어려움. 반응형 웹 작업에서는 효율적이지 못함\n- em은 font-size 기준으로 곱해서 계산한다\n- font-size는 부모의 값을 상속하는 속성이기 때문에 em 을 사용할때 원하지 않는 결과가 나올 수 있음. 필요한 곳에만 사용하길\n\n### rem\n\nem과 마찬가지로 font-size에 비례하는 속성.\nem과의 차이는 오직 html 태그의 글자 크기만 참조함.\n계산하기 쉽게 글자 크기를 10픽셀로 맞추고 시작하는 경우가 많음.\n\n## white-space\n\n요소의 공백을 어떻게 처리할지에 대한 스타일\n\n- normal → 여러 공백이나 줄바꿈을 하나의 공백으로 처리, 필요하다면 긴 줄을 줄바꿈처리함\n- nowrap → 여러 공백이나 줄바꿈을 하나의 공백으로 처리. 긴 줄을 줄바꿈 처리하지 않음\n- pre → 여러 공백을 그대로 처리. 긴 줄을 줄바꿈 하지 않음\n- pre-wrap → 연속 공백 그대로 유지. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리\n- pre-line → 연속 공백 하나의 공백으로 처리. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리\n","slug":"style-css","published":1,"date":"2021-04-12T10:23:14.334Z","updated":"2021-04-21T16:21:16.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs7006nbqwx7xbt58e3","content":"<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"css-→-disabled일때-스타일-처리하는-법\"><a href=\"#css-→-disabled일때-스타일-처리하는-법\" class=\"headerlink\" title=\"css → disabled일때 스타일 처리하는 법\"></a>css → disabled일때 스타일 처리하는 법</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"selector-pseudo\">:disabled</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: not-allowed;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: $&#123;Color.white&#125;;</span><br><span class=\"line\">    border: 1px solid $&#123;Color.white&#125;;</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 0.4;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"input-→-props를-디스트럭쳐링해서-넘길때-styled-component-→-white-list-정책이어서-아마-문제-없을듯-필요한것만-알아서-등록\"><a href=\"#input-→-props를-디스트럭쳐링해서-넘길때-styled-component-→-white-list-정책이어서-아마-문제-없을듯-필요한것만-알아서-등록\" class=\"headerlink\" title=\"input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)\"></a>input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)</h2><hr>\n<h2 id=\"flexbox\"><a href=\"#flexbox\" class=\"headerlink\" title=\"flexbox\"></a>flexbox</h2><ul>\n<li>컨테이너를 꾸며주는 속성값들이 있고, 아이템들을 꾸며주는 속성값들이 있다</li>\n<li>아이템들의 배치 방향에 따라 중심 축이 결정된다.</li>\n<li><code>display: flex;</code></li>\n<li><code>flex-direction: row;</code>  -&gt; 방향을 정해줘야함. default는 row</li>\n<li><code>flex-wrap: nowrap;</code> -&gt; default는 nowrap. 화면이 좁아질 경우 어떻게 표시할지</li>\n<li><code>flex-flow: column wrap</code> -&gt; 한번에 표현</li>\n</ul>\n<h3 id=\"justify-content-gt-중심축-main-axis-에서-아이템을-어떻게-배치할지\"><a href=\"#justify-content-gt-중심축-main-axis-에서-아이템을-어떻게-배치할지\" class=\"headerlink\" title=\"justify-content -&gt; 중심축(main axis)에서 아이템을 어떻게 배치할지\"></a>justify-content -&gt; <strong>중심축(main axis)</strong>에서 아이템을 어떻게 배치할지</h3><ul>\n<li>flex-start, center, flex-end</li>\n<li>space-around -&gt; 박스를 둘러싸서 스페이스를 넣어줌. 맨 앞뒤는 일정하지만, 겹치는 부분은 각각 적용되어 좀더 두껍</li>\n<li>space-evenly -&gt; space-around와 비슷하지만 겹치는 부분까지 맨앞뒤와 동일하게 일정하다.</li>\n<li>space-between -&gt; 맨 앞뒤는 공간 없고, 사이만 공간을 줌</li>\n</ul>\n<h3 id=\"align-items-gt-반대축-cross-axis-에서-아이템을-어떻게-배치할지\"><a href=\"#align-items-gt-반대축-cross-axis-에서-아이템을-어떻게-배치할지\" class=\"headerlink\" title=\"align-items -&gt; 반대축(cross axis)에서 아이템을 어떻게 배치할지\"></a>align-items -&gt; <strong>반대축(cross axis)</strong>에서 아이템을 어떻게 배치할지</h3><ul>\n<li>baseline -&gt; text를 기준으로 동일하게 정렬하고 싶을때</li>\n</ul>\n<h3 id=\"align-content-gt-반대축에서-아이템을-어떻게-배치할지-justify-content와-반대\"><a href=\"#align-content-gt-반대축에서-아이템을-어떻게-배치할지-justify-content와-반대\" class=\"headerlink\" title=\"align-content -&gt; 반대축에서 아이템을 어떻게 배치할지(justify-content와 반대)\"></a>align-content -&gt; <strong>반대축</strong>에서 아이템을 어떻게 배치할지(justify-content와 반대)</h3><h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><ul>\n<li>아이템이 점점 켜졌을때, 어떻게 노출할지</li>\n<li>content를 채우도록 할지 -&gt; ex) 모든 아이템들을 <code>flex-grow: 1</code>로 하면 각 아이템들의 할당영역이 같게됨</li>\n</ul>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><ul>\n<li>반대로 아이템이 점점 줄어들때 어떻게 노출할지</li>\n</ul>\n<h3 id=\"flex-basis-default-auto\"><a href=\"#flex-basis-default-auto\" class=\"headerlink\" title=\"flex-basis (default: auto)\"></a>flex-basis (default: auto)</h3><ul>\n<li>공간을 얼마나 차지할지 좀 더 세부적으로 조절할 수 있게 해줌</li>\n<li>ex) item1은 60%, item2는 30%, item3은 10% 차지하게 할 수도 있음</li>\n</ul>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><ul>\n<li>아이템 별로 아이템을 정렬할 수 있음</li>\n</ul>\n<h2 id=\"flex-box-내에서-특정-자식-요소만-왼쪽-오른쪽에-두고-싶은-경우-gt-margin-left-auto-margin-right-auto\"><a href=\"#flex-box-내에서-특정-자식-요소만-왼쪽-오른쪽에-두고-싶은-경우-gt-margin-left-auto-margin-right-auto\" class=\"headerlink\" title=\"flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -&gt; margin-left: auto / margin-right: auto\"></a>flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -&gt; margin-left: auto / margin-right: auto</h2><p>정리 굳 사이트</p>\n<ul>\n<li><a href=\"https://d2.naver.com/helloworld/8540176\">https://d2.naver.com/helloworld/8540176</a></li>\n</ul>\n<hr>\n<h2 id=\"vh\"><a href=\"#vh\" class=\"headerlink\" title=\"vh\"></a>vh</h2><ul>\n<li>view height -&gt; <code>height: 100vh</code> 로 할 경우, 부모의 height와 상관없이 view port를 100% 사용하겠다 라는 의미</li>\n</ul>\n<h2 id=\"item-center-정렬\"><a href=\"#item-center-정렬\" class=\"headerlink\" title=\"item center 정렬\"></a>item center 정렬</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.Aligner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"pseudo-class\"><a href=\"#pseudo-class\" class=\"headerlink\" title=\"pseudo-class\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/:nth-child\">pseudo-class</a></h2><p>선택자에 추가하는 키워드</p>\n<h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\":nth-child\"></a>:nth-child</h3><p>형제 엘리먼트(group of siblings) 간의 순서에 따라 요소를 선택함</p>\n<ul>\n<li>odd, even</li>\n<li>함수형으로 표기 가능</li>\n</ul>\n<h3 id=\"nth-last-child\"><a href=\"#nth-last-child\" class=\"headerlink\" title=\"nth-last-child\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/:nth-last-child\">nth-last-child</a></h3><p>끝부터 계산하여 형제 그룹간의 위치에 따라 엘리먼트 선택</p>\n<h2 id=\"content-visibility\"><a href=\"#content-visibility\" class=\"headerlink\" title=\"content-visibility\"></a><a href=\"https://wit.nts-corp.com/2020/09/11/6223\">content-visibility</a></h2><p>Chrome 85에 새롭게 추가, 렌더링 성능 향상에 도움</p>\n<ul>\n<li>화면 밖 콘텐츠의 렌더링을 생략함으로써 초기 로드 시간을 개선</li>\n<li>UserAgent가 layout, painting을 포함한 요소의 렌더링 작업을 필요로할 때까지 생략할 수 있도록 합니다.</li>\n<li>콘텐츠의 대부분이 화면 밖에 있을 때, content-visibility을 활용해서 렌더링을 생략하게 되면 사용자의 초기 로드 시간이 훨씬 빨라집니다. 또한, 화면 내 콘텐츠와 더 빠르게 상호작용할 수 있습니다.</li>\n</ul>\n<h3 id=\"CSS-Containment\"><a href=\"#CSS-Containment\" class=\"headerlink\" title=\"CSS Containment\"></a>CSS Containment</h3><p>CSS Containment의 핵심이자 목적은 페이지 전체에서 DOM subtree의 분리를 제공하여 렌더링 성능을 향상시키는 것 입니다.</p>\n<h2 id=\"연속-공백-제거\"><a href=\"#연속-공백-제거\" class=\"headerlink\" title=\"연속 공백 제거\"></a>연속 공백 제거</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">pre-wrap</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"styled-component-anti-pattern\"><a href=\"#styled-component-anti-pattern\" class=\"headerlink\" title=\"styled-component anti-pattern\"></a>styled-component anti-pattern</h2><p>[!!!주의] SC props에 boolean 등 정해져있는 값이 아닌 string, number 등 임의의 값이 넘어가게되면 runtime에 class 를 매번 생성해서 효율이 확 떨어짐. 절대적으로 피해야할 anti-pattern 입니당.</p>\n<p>변하는 값을 넘기면 런타임때 클래스를 생성하는 방식이라 계속 다른 클래스가 생성되버림</p>\n<h2 id=\"amp-amp-이란\"><a href=\"#amp-amp-이란\" class=\"headerlink\" title=\"&amp;&amp; 이란?\"></a>&amp;&amp; 이란?</h2><h2 id=\"display-box일때-우측정렬-gt-float-right\"><a href=\"#display-box일때-우측정렬-gt-float-right\" class=\"headerlink\" title=\"display: box일때, 우측정렬 -&gt; float: right!\"></a>display: box일때, 우측정렬 -&gt; float: right!</h2><h2 id=\"CSS-선언시-정리-순서-gt-박스-모델-중심\"><a href=\"#CSS-선언시-정리-순서-gt-박스-모델-중심\" class=\"headerlink\" title=\"CSS 선언시 정리 순서 -&gt; 박스 모델 중심\"></a>CSS 선언시 정리 순서 -&gt; 박스 모델 중심</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/%EC%83%81%EC%9E%90_%EB%AA%A8%EB%8D%B8\">참고</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">fontSize</span><br><span class=\"line\">fontWeight</span><br><span class=\"line\">position</span><br><span class=\"line\">top</span><br><span class=\"line\">left</span><br><span class=\"line\">...</span><br><span class=\"line\">display</span><br><span class=\"line\">margin</span><br><span class=\"line\">padding</span><br><span class=\"line\">width</span><br><span class=\"line\">height</span><br><span class=\"line\">border</span><br><span class=\"line\">...</span><br><span class=\"line\">background</span><br><span class=\"line\">color</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>관련된 애들끼리 모아놓은 걸 보실 수 있습니다. 읽기가 좋죠.<br>boxmodel 이외의  background, color와 같이 꾸며주는 애들은 좀 뒤로</p>\n<h2 id=\"box-안에서-우측-버튼-고정에-나머지는-인풋과-같은-블락으로-채우고-싶은경우\"><a href=\"#box-안에서-우측-버튼-고정에-나머지는-인풋과-같은-블락으로-채우고-싶은경우\" class=\"headerlink\" title=\"box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우\"></a>box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우</h2><p>부모 클래스에서 <code>display: flex;</code> 해주고 브라우저 크기에 따라 줄어들게 할 자식에서 <code>flex: auto</code><br>이때 <code>width: 100%</code> 를 주면 의도치않게 동작</p>\n<h2 id=\"overscroll-behavior\"><a href=\"#overscroll-behavior\" class=\"headerlink\" title=\"overscroll-behavior\"></a>overscroll-behavior</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\">https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior</a></li>\n</ul>\n<p>스크롤링이 끝났을때 브라우저에게 어떤 처리를 할지 설정해줌.</p>\n<p>ex) 알림에서 스크롤 끝까지 갔을때 뒤쪽 브라우저 스크롤되지 않도록 처리할때 사용<br><code>overscroll-behavior: contain;</code></p>\n<h2 id=\"px-em-rem-차이\"><a href=\"#px-em-rem-차이\" class=\"headerlink\" title=\"px, em, rem 차이\"></a>px, em, rem 차이</h2><p><a href=\"https://medium.com/watcha/watcha-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-px-em-rem-f569c6e76e66\">참고 문서</a></p>\n<ul>\n<li>px로 font-size를 지정할 경우 미디어 쿼리나 자바스크립트를 사용하지 않는 이상 변경하기 매우 어려움. 반응형 웹 작업에서는 효율적이지 못함</li>\n<li>em은 font-size 기준으로 곱해서 계산한다</li>\n<li>font-size는 부모의 값을 상속하는 속성이기 때문에 em 을 사용할때 원하지 않는 결과가 나올 수 있음. 필요한 곳에만 사용하길</li>\n</ul>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>em과 마찬가지로 font-size에 비례하는 속성.<br>em과의 차이는 오직 html 태그의 글자 크기만 참조함.<br>계산하기 쉽게 글자 크기를 10픽셀로 맞추고 시작하는 경우가 많음.</p>\n<h2 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h2><p>요소의 공백을 어떻게 처리할지에 대한 스타일</p>\n<ul>\n<li>normal → 여러 공백이나 줄바꿈을 하나의 공백으로 처리, 필요하다면 긴 줄을 줄바꿈처리함</li>\n<li>nowrap → 여러 공백이나 줄바꿈을 하나의 공백으로 처리. 긴 줄을 줄바꿈 처리하지 않음</li>\n<li>pre → 여러 공백을 그대로 처리. 긴 줄을 줄바꿈 하지 않음</li>\n<li>pre-wrap → 연속 공백 그대로 유지. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리</li>\n<li>pre-line → 연속 공백 하나의 공백으로 처리. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"css-→-disabled일때-스타일-처리하는-법\"><a href=\"#css-→-disabled일때-스타일-처리하는-법\" class=\"headerlink\" title=\"css → disabled일때 스타일 처리하는 법\"></a>css → disabled일때 스타일 처리하는 법</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"selector-pseudo\">:disabled</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: not-allowed;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: $&#123;Color.white&#125;;</span><br><span class=\"line\">    border: 1px solid $&#123;Color.white&#125;;</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 0.4;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"input-→-props를-디스트럭쳐링해서-넘길때-styled-component-→-white-list-정책이어서-아마-문제-없을듯-필요한것만-알아서-등록\"><a href=\"#input-→-props를-디스트럭쳐링해서-넘길때-styled-component-→-white-list-정책이어서-아마-문제-없을듯-필요한것만-알아서-등록\" class=\"headerlink\" title=\"input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)\"></a>input → props를 디스트럭쳐링해서 넘길때, styled-component → white list 정책이어서 아마 문제 없을듯(필요한것만 알아서 등록)</h2><hr>\n<h2 id=\"flexbox\"><a href=\"#flexbox\" class=\"headerlink\" title=\"flexbox\"></a>flexbox</h2><ul>\n<li>컨테이너를 꾸며주는 속성값들이 있고, 아이템들을 꾸며주는 속성값들이 있다</li>\n<li>아이템들의 배치 방향에 따라 중심 축이 결정된다.</li>\n<li><code>display: flex;</code></li>\n<li><code>flex-direction: row;</code>  -&gt; 방향을 정해줘야함. default는 row</li>\n<li><code>flex-wrap: nowrap;</code> -&gt; default는 nowrap. 화면이 좁아질 경우 어떻게 표시할지</li>\n<li><code>flex-flow: column wrap</code> -&gt; 한번에 표현</li>\n</ul>\n<h3 id=\"justify-content-gt-중심축-main-axis-에서-아이템을-어떻게-배치할지\"><a href=\"#justify-content-gt-중심축-main-axis-에서-아이템을-어떻게-배치할지\" class=\"headerlink\" title=\"justify-content -&gt; 중심축(main axis)에서 아이템을 어떻게 배치할지\"></a>justify-content -&gt; <strong>중심축(main axis)</strong>에서 아이템을 어떻게 배치할지</h3><ul>\n<li>flex-start, center, flex-end</li>\n<li>space-around -&gt; 박스를 둘러싸서 스페이스를 넣어줌. 맨 앞뒤는 일정하지만, 겹치는 부분은 각각 적용되어 좀더 두껍</li>\n<li>space-evenly -&gt; space-around와 비슷하지만 겹치는 부분까지 맨앞뒤와 동일하게 일정하다.</li>\n<li>space-between -&gt; 맨 앞뒤는 공간 없고, 사이만 공간을 줌</li>\n</ul>\n<h3 id=\"align-items-gt-반대축-cross-axis-에서-아이템을-어떻게-배치할지\"><a href=\"#align-items-gt-반대축-cross-axis-에서-아이템을-어떻게-배치할지\" class=\"headerlink\" title=\"align-items -&gt; 반대축(cross axis)에서 아이템을 어떻게 배치할지\"></a>align-items -&gt; <strong>반대축(cross axis)</strong>에서 아이템을 어떻게 배치할지</h3><ul>\n<li>baseline -&gt; text를 기준으로 동일하게 정렬하고 싶을때</li>\n</ul>\n<h3 id=\"align-content-gt-반대축에서-아이템을-어떻게-배치할지-justify-content와-반대\"><a href=\"#align-content-gt-반대축에서-아이템을-어떻게-배치할지-justify-content와-반대\" class=\"headerlink\" title=\"align-content -&gt; 반대축에서 아이템을 어떻게 배치할지(justify-content와 반대)\"></a>align-content -&gt; <strong>반대축</strong>에서 아이템을 어떻게 배치할지(justify-content와 반대)</h3><h3 id=\"flex-grow\"><a href=\"#flex-grow\" class=\"headerlink\" title=\"flex-grow\"></a>flex-grow</h3><ul>\n<li>아이템이 점점 켜졌을때, 어떻게 노출할지</li>\n<li>content를 채우도록 할지 -&gt; ex) 모든 아이템들을 <code>flex-grow: 1</code>로 하면 각 아이템들의 할당영역이 같게됨</li>\n</ul>\n<h3 id=\"flex-shrink\"><a href=\"#flex-shrink\" class=\"headerlink\" title=\"flex-shrink\"></a>flex-shrink</h3><ul>\n<li>반대로 아이템이 점점 줄어들때 어떻게 노출할지</li>\n</ul>\n<h3 id=\"flex-basis-default-auto\"><a href=\"#flex-basis-default-auto\" class=\"headerlink\" title=\"flex-basis (default: auto)\"></a>flex-basis (default: auto)</h3><ul>\n<li>공간을 얼마나 차지할지 좀 더 세부적으로 조절할 수 있게 해줌</li>\n<li>ex) item1은 60%, item2는 30%, item3은 10% 차지하게 할 수도 있음</li>\n</ul>\n<h3 id=\"align-self\"><a href=\"#align-self\" class=\"headerlink\" title=\"align-self\"></a>align-self</h3><ul>\n<li>아이템 별로 아이템을 정렬할 수 있음</li>\n</ul>\n<h2 id=\"flex-box-내에서-특정-자식-요소만-왼쪽-오른쪽에-두고-싶은-경우-gt-margin-left-auto-margin-right-auto\"><a href=\"#flex-box-내에서-특정-자식-요소만-왼쪽-오른쪽에-두고-싶은-경우-gt-margin-left-auto-margin-right-auto\" class=\"headerlink\" title=\"flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -&gt; margin-left: auto / margin-right: auto\"></a>flex box 내에서 특정 자식 요소만 왼쪽/오른쪽에 두고 싶은 경우 -&gt; margin-left: auto / margin-right: auto</h2><p>정리 굳 사이트</p>\n<ul>\n<li><a href=\"https://d2.naver.com/helloworld/8540176\">https://d2.naver.com/helloworld/8540176</a></li>\n</ul>\n<hr>\n<h2 id=\"vh\"><a href=\"#vh\" class=\"headerlink\" title=\"vh\"></a>vh</h2><ul>\n<li>view height -&gt; <code>height: 100vh</code> 로 할 경우, 부모의 height와 상관없이 view port를 100% 사용하겠다 라는 의미</li>\n</ul>\n<h2 id=\"item-center-정렬\"><a href=\"#item-center-정렬\" class=\"headerlink\" title=\"item center 정렬\"></a>item center 정렬</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.Aligner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"pseudo-class\"><a href=\"#pseudo-class\" class=\"headerlink\" title=\"pseudo-class\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/:nth-child\">pseudo-class</a></h2><p>선택자에 추가하는 키워드</p>\n<h3 id=\"nth-child\"><a href=\"#nth-child\" class=\"headerlink\" title=\":nth-child\"></a>:nth-child</h3><p>형제 엘리먼트(group of siblings) 간의 순서에 따라 요소를 선택함</p>\n<ul>\n<li>odd, even</li>\n<li>함수형으로 표기 가능</li>\n</ul>\n<h3 id=\"nth-last-child\"><a href=\"#nth-last-child\" class=\"headerlink\" title=\"nth-last-child\"></a><a href=\"https://developer.mozilla.org/ko/docs/Web/CSS/:nth-last-child\">nth-last-child</a></h3><p>끝부터 계산하여 형제 그룹간의 위치에 따라 엘리먼트 선택</p>\n<h2 id=\"content-visibility\"><a href=\"#content-visibility\" class=\"headerlink\" title=\"content-visibility\"></a><a href=\"https://wit.nts-corp.com/2020/09/11/6223\">content-visibility</a></h2><p>Chrome 85에 새롭게 추가, 렌더링 성능 향상에 도움</p>\n<ul>\n<li>화면 밖 콘텐츠의 렌더링을 생략함으로써 초기 로드 시간을 개선</li>\n<li>UserAgent가 layout, painting을 포함한 요소의 렌더링 작업을 필요로할 때까지 생략할 수 있도록 합니다.</li>\n<li>콘텐츠의 대부분이 화면 밖에 있을 때, content-visibility을 활용해서 렌더링을 생략하게 되면 사용자의 초기 로드 시간이 훨씬 빨라집니다. 또한, 화면 내 콘텐츠와 더 빠르게 상호작용할 수 있습니다.</li>\n</ul>\n<h3 id=\"CSS-Containment\"><a href=\"#CSS-Containment\" class=\"headerlink\" title=\"CSS Containment\"></a>CSS Containment</h3><p>CSS Containment의 핵심이자 목적은 페이지 전체에서 DOM subtree의 분리를 제공하여 렌더링 성능을 향상시키는 것 입니다.</p>\n<h2 id=\"연속-공백-제거\"><a href=\"#연속-공백-제거\" class=\"headerlink\" title=\"연속 공백 제거\"></a>연속 공백 제거</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">white-space</span>: <span class=\"selector-tag\">pre-wrap</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"styled-component-anti-pattern\"><a href=\"#styled-component-anti-pattern\" class=\"headerlink\" title=\"styled-component anti-pattern\"></a>styled-component anti-pattern</h2><p>[!!!주의] SC props에 boolean 등 정해져있는 값이 아닌 string, number 등 임의의 값이 넘어가게되면 runtime에 class 를 매번 생성해서 효율이 확 떨어짐. 절대적으로 피해야할 anti-pattern 입니당.</p>\n<p>변하는 값을 넘기면 런타임때 클래스를 생성하는 방식이라 계속 다른 클래스가 생성되버림</p>\n<h2 id=\"amp-amp-이란\"><a href=\"#amp-amp-이란\" class=\"headerlink\" title=\"&amp;&amp; 이란?\"></a>&amp;&amp; 이란?</h2><h2 id=\"display-box일때-우측정렬-gt-float-right\"><a href=\"#display-box일때-우측정렬-gt-float-right\" class=\"headerlink\" title=\"display: box일때, 우측정렬 -&gt; float: right!\"></a>display: box일때, 우측정렬 -&gt; float: right!</h2><h2 id=\"CSS-선언시-정리-순서-gt-박스-모델-중심\"><a href=\"#CSS-선언시-정리-순서-gt-박스-모델-중심\" class=\"headerlink\" title=\"CSS 선언시 정리 순서 -&gt; 박스 모델 중심\"></a>CSS 선언시 정리 순서 -&gt; 박스 모델 중심</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Learn/CSS/Building_blocks/%EC%83%81%EC%9E%90_%EB%AA%A8%EB%8D%B8\">참고</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">fontSize</span><br><span class=\"line\">fontWeight</span><br><span class=\"line\">position</span><br><span class=\"line\">top</span><br><span class=\"line\">left</span><br><span class=\"line\">...</span><br><span class=\"line\">display</span><br><span class=\"line\">margin</span><br><span class=\"line\">padding</span><br><span class=\"line\">width</span><br><span class=\"line\">height</span><br><span class=\"line\">border</span><br><span class=\"line\">...</span><br><span class=\"line\">background</span><br><span class=\"line\">color</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>관련된 애들끼리 모아놓은 걸 보실 수 있습니다. 읽기가 좋죠.<br>boxmodel 이외의  background, color와 같이 꾸며주는 애들은 좀 뒤로</p>\n<h2 id=\"box-안에서-우측-버튼-고정에-나머지는-인풋과-같은-블락으로-채우고-싶은경우\"><a href=\"#box-안에서-우측-버튼-고정에-나머지는-인풋과-같은-블락으로-채우고-싶은경우\" class=\"headerlink\" title=\"box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우\"></a>box 안에서 우측 버튼 고정에 나머지는 인풋과 같은 블락으로 채우고 싶은경우</h2><p>부모 클래스에서 <code>display: flex;</code> 해주고 브라우저 크기에 따라 줄어들게 할 자식에서 <code>flex: auto</code><br>이때 <code>width: 100%</code> 를 주면 의도치않게 동작</p>\n<h2 id=\"overscroll-behavior\"><a href=\"#overscroll-behavior\" class=\"headerlink\" title=\"overscroll-behavior\"></a>overscroll-behavior</h2><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior\">https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior</a></li>\n</ul>\n<p>스크롤링이 끝났을때 브라우저에게 어떤 처리를 할지 설정해줌.</p>\n<p>ex) 알림에서 스크롤 끝까지 갔을때 뒤쪽 브라우저 스크롤되지 않도록 처리할때 사용<br><code>overscroll-behavior: contain;</code></p>\n<h2 id=\"px-em-rem-차이\"><a href=\"#px-em-rem-차이\" class=\"headerlink\" title=\"px, em, rem 차이\"></a>px, em, rem 차이</h2><p><a href=\"https://medium.com/watcha/watcha-%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%8B%9D-px-em-rem-f569c6e76e66\">참고 문서</a></p>\n<ul>\n<li>px로 font-size를 지정할 경우 미디어 쿼리나 자바스크립트를 사용하지 않는 이상 변경하기 매우 어려움. 반응형 웹 작업에서는 효율적이지 못함</li>\n<li>em은 font-size 기준으로 곱해서 계산한다</li>\n<li>font-size는 부모의 값을 상속하는 속성이기 때문에 em 을 사용할때 원하지 않는 결과가 나올 수 있음. 필요한 곳에만 사용하길</li>\n</ul>\n<h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>em과 마찬가지로 font-size에 비례하는 속성.<br>em과의 차이는 오직 html 태그의 글자 크기만 참조함.<br>계산하기 쉽게 글자 크기를 10픽셀로 맞추고 시작하는 경우가 많음.</p>\n<h2 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h2><p>요소의 공백을 어떻게 처리할지에 대한 스타일</p>\n<ul>\n<li>normal → 여러 공백이나 줄바꿈을 하나의 공백으로 처리, 필요하다면 긴 줄을 줄바꿈처리함</li>\n<li>nowrap → 여러 공백이나 줄바꿈을 하나의 공백으로 처리. 긴 줄을 줄바꿈 처리하지 않음</li>\n<li>pre → 여러 공백을 그대로 처리. 긴 줄을 줄바꿈 하지 않음</li>\n<li>pre-wrap → 연속 공백 그대로 유지. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리</li>\n<li>pre-line → 연속 공백 하나의 공백으로 처리. 행의 줄바꿈은 행의 박스를 채우기 위해 필요한 경우 처리</li>\n</ul>\n"},{"title":"useCallback","_content":"\n# useCallback\n\n## Guide\n\n이 [문서](https://dmitripavlutin.com/dont-overuse-react-usecallback/) 를 요약해본다.\n\n> Over use 하지 말고, 상황에 맞게 써야한다. 컴포넌트를 느려지게 할수도 있고, 성능에 해를 끼칠 수 있음\n\n`useCallback`을 사용하지 않고 함수를 컴포넌트 내에 선언할 경우, 매 `rendering`마다 `re-create`된다\n`inline function`은 저렴하기 때문에 각 렌더링에서 함수를 다시 만드는건 문제되지 않는다.\n하지만 아래와 같은 경우엔 `useCallback`을 쓰는게 좋다\n\n1. `React.memo()` 내부에 래핑된 컴포넌트는 `callback prop`을 받는다\n2. 함수가 다른 `hook`에 종속적으로 사용되는 경우 (ex. `useEffect(..., [callback]`)\n\n## 사용하는 경우\n\n1. memoization이 필요할 정도로 많은 연산을 하는가?\n2. props 형태로 넘겨서 렌더링 할 때 마다 레퍼런스가 같아야 하는가?\n","source":"_posts/useCallback.md","raw":"---\ntitle: useCallback\n---\n\n# useCallback\n\n## Guide\n\n이 [문서](https://dmitripavlutin.com/dont-overuse-react-usecallback/) 를 요약해본다.\n\n> Over use 하지 말고, 상황에 맞게 써야한다. 컴포넌트를 느려지게 할수도 있고, 성능에 해를 끼칠 수 있음\n\n`useCallback`을 사용하지 않고 함수를 컴포넌트 내에 선언할 경우, 매 `rendering`마다 `re-create`된다\n`inline function`은 저렴하기 때문에 각 렌더링에서 함수를 다시 만드는건 문제되지 않는다.\n하지만 아래와 같은 경우엔 `useCallback`을 쓰는게 좋다\n\n1. `React.memo()` 내부에 래핑된 컴포넌트는 `callback prop`을 받는다\n2. 함수가 다른 `hook`에 종속적으로 사용되는 경우 (ex. `useEffect(..., [callback]`)\n\n## 사용하는 경우\n\n1. memoization이 필요할 정도로 많은 연산을 하는가?\n2. props 형태로 넘겨서 렌더링 할 때 마다 레퍼런스가 같아야 하는가?\n","slug":"useCallback","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-12T10:23:14.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs8006qbqwx2id570a4","content":"<h1 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h1><h2 id=\"Guide\"><a href=\"#Guide\" class=\"headerlink\" title=\"Guide\"></a>Guide</h2><p>이 <a href=\"https://dmitripavlutin.com/dont-overuse-react-usecallback/\">문서</a> 를 요약해본다.</p>\n<blockquote>\n<p>Over use 하지 말고, 상황에 맞게 써야한다. 컴포넌트를 느려지게 할수도 있고, 성능에 해를 끼칠 수 있음</p>\n</blockquote>\n<p><code>useCallback</code>을 사용하지 않고 함수를 컴포넌트 내에 선언할 경우, 매 <code>rendering</code>마다 <code>re-create</code>된다<br><code>inline function</code>은 저렴하기 때문에 각 렌더링에서 함수를 다시 만드는건 문제되지 않는다.<br>하지만 아래와 같은 경우엔 <code>useCallback</code>을 쓰는게 좋다</p>\n<ol>\n<li><code>React.memo()</code> 내부에 래핑된 컴포넌트는 <code>callback prop</code>을 받는다</li>\n<li>함수가 다른 <code>hook</code>에 종속적으로 사용되는 경우 (ex. <code>useEffect(..., [callback]</code>)</li>\n</ol>\n<h2 id=\"사용하는-경우\"><a href=\"#사용하는-경우\" class=\"headerlink\" title=\"사용하는 경우\"></a>사용하는 경우</h2><ol>\n<li>memoization이 필요할 정도로 많은 연산을 하는가?</li>\n<li>props 형태로 넘겨서 렌더링 할 때 마다 레퍼런스가 같아야 하는가?</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h1><h2 id=\"Guide\"><a href=\"#Guide\" class=\"headerlink\" title=\"Guide\"></a>Guide</h2><p>이 <a href=\"https://dmitripavlutin.com/dont-overuse-react-usecallback/\">문서</a> 를 요약해본다.</p>\n<blockquote>\n<p>Over use 하지 말고, 상황에 맞게 써야한다. 컴포넌트를 느려지게 할수도 있고, 성능에 해를 끼칠 수 있음</p>\n</blockquote>\n<p><code>useCallback</code>을 사용하지 않고 함수를 컴포넌트 내에 선언할 경우, 매 <code>rendering</code>마다 <code>re-create</code>된다<br><code>inline function</code>은 저렴하기 때문에 각 렌더링에서 함수를 다시 만드는건 문제되지 않는다.<br>하지만 아래와 같은 경우엔 <code>useCallback</code>을 쓰는게 좋다</p>\n<ol>\n<li><code>React.memo()</code> 내부에 래핑된 컴포넌트는 <code>callback prop</code>을 받는다</li>\n<li>함수가 다른 <code>hook</code>에 종속적으로 사용되는 경우 (ex. <code>useEffect(..., [callback]</code>)</li>\n</ol>\n<h2 id=\"사용하는-경우\"><a href=\"#사용하는-경우\" class=\"headerlink\" title=\"사용하는 경우\"></a>사용하는 경우</h2><ol>\n<li>memoization이 필요할 정도로 많은 연산을 하는가?</li>\n<li>props 형태로 넘겨서 렌더링 할 때 마다 레퍼런스가 같아야 하는가?</li>\n</ol>\n"},{"title":"useEffect","_content":"\n## useEffect\n\n- react의 effect hook\n- componentDidMount, componentDidUpdate 및 componentWillUnmoun 라이프사이클과 동일한 동작을 하게 처리 가능","source":"_posts/useEffect.md","raw":"---\ntitle: useEffect\n---\n\n## useEffect\n\n- react의 effect hook\n- componentDidMount, componentDidUpdate 및 componentWillUnmoun 라이프사이클과 동일한 동작을 하게 처리 가능","slug":"useEffect","published":1,"date":"2021-04-10T07:56:03.150Z","updated":"2021-04-10T07:56:03.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs8006tbqwxevwjaion","content":"<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><ul>\n<li>react의 effect hook</li>\n<li>componentDidMount, componentDidUpdate 및 componentWillUnmoun 라이프사이클과 동일한 동작을 하게 처리 가능</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><ul>\n<li>react의 effect hook</li>\n<li>componentDidMount, componentDidUpdate 및 componentWillUnmoun 라이프사이클과 동일한 동작을 하게 처리 가능</li>\n</ul>\n"},{"title":"useMemo","_content":"\n## useMemo\n\n- 상태나 디펜더시에 따라 변하는 인스턴스\n- 과한 연산으로 인한 메모이제이션을 기대하는 결과\n- memo에 영향이 있을 수 있는 mutable한 값(객체, 배열, 함수, 컴포넌트)라던지, expensive한 계산에만 쓰는게 좋음\n","source":"_posts/useMemo.md","raw":"---\ntitle: useMemo\n---\n\n## useMemo\n\n- 상태나 디펜더시에 따라 변하는 인스턴스\n- 과한 연산으로 인한 메모이제이션을 기대하는 결과\n- memo에 영향이 있을 수 있는 mutable한 값(객체, 배열, 함수, 컴포넌트)라던지, expensive한 계산에만 쓰는게 좋음\n","slug":"useMemo","published":1,"date":"2021-04-21T16:27:57.607Z","updated":"2021-04-21T16:28:19.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hs8006wbqwx39u1csyg","content":"<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><ul>\n<li>상태나 디펜더시에 따라 변하는 인스턴스</li>\n<li>과한 연산으로 인한 메모이제이션을 기대하는 결과</li>\n<li>memo에 영향이 있을 수 있는 mutable한 값(객체, 배열, 함수, 컴포넌트)라던지, expensive한 계산에만 쓰는게 좋음</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><ul>\n<li>상태나 디펜더시에 따라 변하는 인스턴스</li>\n<li>과한 연산으로 인한 메모이제이션을 기대하는 결과</li>\n<li>memo에 영향이 있을 수 있는 mutable한 값(객체, 배열, 함수, 컴포넌트)라던지, expensive한 계산에만 쓰는게 좋음</li>\n</ul>\n"},{"title":"useState","_content":"\n# React useState\n\n## [지연 초기화](https://ui.toast.com/weekly-pick/ko_20201022/)\n\n- 직접적인 값 대신 함수를 `useState`의 인자로 넘김\n- 초기 값을 구하기 위한 계산 비용이 클 때 `useState`의 지연 초기화를 사용\n- 지연 초기화는 상태가 최초로 생성될 때만 실행, 이후 발생하는 리렌더링에서는 실행되지 않음\n\n``` javascript\nconst [count, setCount] = useState(() =>\n  Number.parseInt(window.localStorage.getItem(cacheKey)),\n)\n```\n\n## 렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다\n\n> 상황\n> - 모달이 중첩된 경우, 모달을 닫을때 body의 overflow를 풀어버려서 뒤쪽 스크롤 되는 현상\n> - 열린 모달 수를 관리하는 컨텍스트 생성하여 개수에 따라 overflow hidden 처리함\n\n```typescript\nimport React, { createContext, useContext, useRef } from 'react';\n\ninterface BodyScrollLockContext {\n  lockScroll: () => void;\n  unlockScroll: () => void;\n}\n\nconst BodyScrollLockContext = createContext<BodyScrollLockContext>({} as BodyScrollLockContext);\n\nconst BodyScrollLockProvider: React.FC = props => {\n  const modalCountRef = useRef<number>(0);  // useState를 사용할 수 있지만, 렌더링에 영향을 미칠만한 상태가 아니기 때문에 ref를 사용했다\n\n  const lockScroll = () => {\n    modalCountRef.current++;\n    if (modalCountRef.current > 0) {\n      document.body.style.overflow = 'hidden';\n    }\n  };\n\n  const unlockScroll = () => {\n    modalCountRef.current--;\n    if (modalCountRef.current === 0) {\n      document.body.style.overflow = '';\n    }\n  };\n\n  const bodyScrollLockContext: BodyScrollLockContext = {\n    lockScroll,\n    unlockScroll\n  };\n\n  return <BodyScrollLockContext.Provider value={bodyScrollLockContext} {...props} />;\n};\n\nconst useBodyScrollLockContext = () => useContext(BodyScrollLockContext);\n\nexport { BodyScrollLockProvider, useBodyScrollLockContext };\n\n```\n","source":"_posts/useState.md","raw":"---\ntitle: useState\n---\n\n# React useState\n\n## [지연 초기화](https://ui.toast.com/weekly-pick/ko_20201022/)\n\n- 직접적인 값 대신 함수를 `useState`의 인자로 넘김\n- 초기 값을 구하기 위한 계산 비용이 클 때 `useState`의 지연 초기화를 사용\n- 지연 초기화는 상태가 최초로 생성될 때만 실행, 이후 발생하는 리렌더링에서는 실행되지 않음\n\n``` javascript\nconst [count, setCount] = useState(() =>\n  Number.parseInt(window.localStorage.getItem(cacheKey)),\n)\n```\n\n## 렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다\n\n> 상황\n> - 모달이 중첩된 경우, 모달을 닫을때 body의 overflow를 풀어버려서 뒤쪽 스크롤 되는 현상\n> - 열린 모달 수를 관리하는 컨텍스트 생성하여 개수에 따라 overflow hidden 처리함\n\n```typescript\nimport React, { createContext, useContext, useRef } from 'react';\n\ninterface BodyScrollLockContext {\n  lockScroll: () => void;\n  unlockScroll: () => void;\n}\n\nconst BodyScrollLockContext = createContext<BodyScrollLockContext>({} as BodyScrollLockContext);\n\nconst BodyScrollLockProvider: React.FC = props => {\n  const modalCountRef = useRef<number>(0);  // useState를 사용할 수 있지만, 렌더링에 영향을 미칠만한 상태가 아니기 때문에 ref를 사용했다\n\n  const lockScroll = () => {\n    modalCountRef.current++;\n    if (modalCountRef.current > 0) {\n      document.body.style.overflow = 'hidden';\n    }\n  };\n\n  const unlockScroll = () => {\n    modalCountRef.current--;\n    if (modalCountRef.current === 0) {\n      document.body.style.overflow = '';\n    }\n  };\n\n  const bodyScrollLockContext: BodyScrollLockContext = {\n    lockScroll,\n    unlockScroll\n  };\n\n  return <BodyScrollLockContext.Provider value={bodyScrollLockContext} {...props} />;\n};\n\nconst useBodyScrollLockContext = () => useContext(BodyScrollLockContext);\n\nexport { BodyScrollLockProvider, useBodyScrollLockContext };\n\n```\n","slug":"useState","published":1,"date":"2021-04-12T10:23:14.335Z","updated":"2021-04-21T16:17:38.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hsa006zbqwx10ntei90","content":"<h1 id=\"React-useState\"><a href=\"#React-useState\" class=\"headerlink\" title=\"React useState\"></a>React useState</h1><h2 id=\"지연-초기화\"><a href=\"#지연-초기화\" class=\"headerlink\" title=\"지연 초기화\"></a><a href=\"https://ui.toast.com/weekly-pick/ko_20201022/\">지연 초기화</a></h2><ul>\n<li>직접적인 값 대신 함수를 <code>useState</code>의 인자로 넘김</li>\n<li>초기 값을 구하기 위한 계산 비용이 클 때 <code>useState</code>의 지연 초기화를 사용</li>\n<li>지연 초기화는 상태가 최초로 생성될 때만 실행, 이후 발생하는 리렌더링에서는 실행되지 않음</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Number</span>.parseInt(<span class=\"built_in\">window</span>.localStorage.getItem(cacheKey)),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"렌더링에-영향을-미칠만한-상태가-아닐땐-ref를-사용하는게-좋다\"><a href=\"#렌더링에-영향을-미칠만한-상태가-아닐땐-ref를-사용하는게-좋다\" class=\"headerlink\" title=\"렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다\"></a>렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다</h2><blockquote>\n<p>상황</p>\n<ul>\n<li>모달이 중첩된 경우, 모달을 닫을때 body의 overflow를 풀어버려서 뒤쪽 스크롤 되는 현상</li>\n<li>열린 모달 수를 관리하는 컨텍스트 생성하여 개수에 따라 overflow hidden 처리함</li>\n</ul>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext, useContext, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> BodyScrollLockContext &#123;</span><br><span class=\"line\">  lockScroll: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  unlockScroll: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> BodyScrollLockContext = createContext&lt;BodyScrollLockContext&gt;(&#123;&#125; <span class=\"keyword\">as</span> BodyScrollLockContext);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> BodyScrollLockProvider: React.FC = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modalCountRef = useRef&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">0</span>);  <span class=\"comment\">// useState를 사용할 수 있지만, 렌더링에 영향을 미칠만한 상태가 아니기 때문에 ref를 사용했다</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lockScroll = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    modalCountRef.current++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modalCountRef.current &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.style.overflow = <span class=\"string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unlockScroll = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    modalCountRef.current--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modalCountRef.current === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.style.overflow = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyScrollLockContext: BodyScrollLockContext = &#123;</span><br><span class=\"line\">    lockScroll,</span><br><span class=\"line\">    unlockScroll</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">BodyScrollLockContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;bodyScrollLockContext&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useBodyScrollLockContext = <span class=\"function\">() =&gt;</span> useContext(BodyScrollLockContext);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; BodyScrollLockProvider, useBodyScrollLockContext &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"React-useState\"><a href=\"#React-useState\" class=\"headerlink\" title=\"React useState\"></a>React useState</h1><h2 id=\"지연-초기화\"><a href=\"#지연-초기화\" class=\"headerlink\" title=\"지연 초기화\"></a><a href=\"https://ui.toast.com/weekly-pick/ko_20201022/\">지연 초기화</a></h2><ul>\n<li>직접적인 값 대신 함수를 <code>useState</code>의 인자로 넘김</li>\n<li>초기 값을 구하기 위한 계산 비용이 클 때 <code>useState</code>의 지연 초기화를 사용</li>\n<li>지연 초기화는 상태가 최초로 생성될 때만 실행, 이후 발생하는 리렌더링에서는 실행되지 않음</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = useState(<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Number</span>.parseInt(<span class=\"built_in\">window</span>.localStorage.getItem(cacheKey)),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"렌더링에-영향을-미칠만한-상태가-아닐땐-ref를-사용하는게-좋다\"><a href=\"#렌더링에-영향을-미칠만한-상태가-아닐땐-ref를-사용하는게-좋다\" class=\"headerlink\" title=\"렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다\"></a>렌더링에 영향을 미칠만한 상태가 아닐땐 ref를 사용하는게 좋다</h2><blockquote>\n<p>상황</p>\n<ul>\n<li>모달이 중첩된 경우, 모달을 닫을때 body의 overflow를 풀어버려서 뒤쪽 스크롤 되는 현상</li>\n<li>열린 모달 수를 관리하는 컨텍스트 생성하여 개수에 따라 overflow hidden 처리함</li>\n</ul>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; createContext, useContext, useRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> BodyScrollLockContext &#123;</span><br><span class=\"line\">  lockScroll: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  unlockScroll: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> BodyScrollLockContext = createContext&lt;BodyScrollLockContext&gt;(&#123;&#125; <span class=\"keyword\">as</span> BodyScrollLockContext);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> BodyScrollLockProvider: React.FC = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modalCountRef = useRef&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">0</span>);  <span class=\"comment\">// useState를 사용할 수 있지만, 렌더링에 영향을 미칠만한 상태가 아니기 때문에 ref를 사용했다</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> lockScroll = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    modalCountRef.current++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modalCountRef.current &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.style.overflow = <span class=\"string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> unlockScroll = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    modalCountRef.current--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (modalCountRef.current === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.style.overflow = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> bodyScrollLockContext: BodyScrollLockContext = &#123;</span><br><span class=\"line\">    lockScroll,</span><br><span class=\"line\">    unlockScroll</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">BodyScrollLockContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;bodyScrollLockContext&#125;</span> &#123;<span class=\"attr\">...props</span>&#125; /&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useBodyScrollLockContext = <span class=\"function\">() =&gt;</span> useContext(BodyScrollLockContext);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; BodyScrollLockProvider, useBodyScrollLockContext &#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"useRef","_content":"\n## useRef\n\n`useRef`는 `.current` 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 `ref 객체`를 반환합니다. 반환된 객체는 컴포넌트의 전 생애주기를 통해 유지될 것입니다.\n\n> 주로 태그를 직접 다룰 경우 사용, 간단하지 않은 구조의경우(반복 등) id대신 사용\n","source":"_posts/useRef.md","raw":"---\ntitle: useRef\n---\n\n## useRef\n\n`useRef`는 `.current` 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 `ref 객체`를 반환합니다. 반환된 객체는 컴포넌트의 전 생애주기를 통해 유지될 것입니다.\n\n> 주로 태그를 직접 다룰 경우 사용, 간단하지 않은 구조의경우(반복 등) id대신 사용\n","slug":"useRef","published":1,"date":"2021-04-21T16:27:13.933Z","updated":"2021-04-21T16:28:16.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hsb0071bqwxa7t47jn3","content":"<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code>는 <code>.current</code> 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 <code>ref 객체</code>를 반환합니다. 반환된 객체는 컴포넌트의 전 생애주기를 통해 유지될 것입니다.</p>\n<blockquote>\n<p>주로 태그를 직접 다룰 경우 사용, 간단하지 않은 구조의경우(반복 등) id대신 사용</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><code>useRef</code>는 <code>.current</code> 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 <code>ref 객체</code>를 반환합니다. 반환된 객체는 컴포넌트의 전 생애주기를 통해 유지될 것입니다.</p>\n<blockquote>\n<p>주로 태그를 직접 다룰 경우 사용, 간단하지 않은 구조의경우(반복 등) id대신 사용</p>\n</blockquote>\n"},{"title":"wiki","_content":"\n* [Development](/Development)\n* [Javascript](/Javascript)\n* [React](/React)\n* [Typescript](/Typescript)\n* [CSS](/style-css)\n* [Test](/Test)\n* [Webpack](/Webpack)\n* [CodeSoom](/CodeSoom)\n* [Redux](/Redux)\n* [Redux-thunk](/ReduxThunk)\n* [ESLint](/Eslint)\n* [Router](/Router)\n","source":"_posts/wiki.md","raw":"---\ntitle: wiki\n---\n\n* [Development](/Development)\n* [Javascript](/Javascript)\n* [React](/React)\n* [Typescript](/Typescript)\n* [CSS](/style-css)\n* [Test](/Test)\n* [Webpack](/Webpack)\n* [CodeSoom](/CodeSoom)\n* [Redux](/Redux)\n* [Redux-thunk](/ReduxThunk)\n* [ESLint](/Eslint)\n* [Router](/Router)\n","slug":"wiki","published":1,"date":"2021-04-12T14:24:23.987Z","updated":"2021-04-12T14:24:23.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknro8hsb0073bqwx1ffubnay","content":"<ul>\n<li><a href=\"/Development\">Development</a></li>\n<li><a href=\"/Javascript\">Javascript</a></li>\n<li><a href=\"/React\">React</a></li>\n<li><a href=\"/Typescript\">Typescript</a></li>\n<li><a href=\"/style-css\">CSS</a></li>\n<li><a href=\"/Test\">Test</a></li>\n<li><a href=\"/Webpack\">Webpack</a></li>\n<li><a href=\"/CodeSoom\">CodeSoom</a></li>\n<li><a href=\"/Redux\">Redux</a></li>\n<li><a href=\"/ReduxThunk\">Redux-thunk</a></li>\n<li><a href=\"/Eslint\">ESLint</a></li>\n<li><a href=\"/Router\">Router</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"/Development\">Development</a></li>\n<li><a href=\"/Javascript\">Javascript</a></li>\n<li><a href=\"/React\">React</a></li>\n<li><a href=\"/Typescript\">Typescript</a></li>\n<li><a href=\"/style-css\">CSS</a></li>\n<li><a href=\"/Test\">Test</a></li>\n<li><a href=\"/Webpack\">Webpack</a></li>\n<li><a href=\"/CodeSoom\">CodeSoom</a></li>\n<li><a href=\"/Redux\">Redux</a></li>\n<li><a href=\"/ReduxThunk\">Redux-thunk</a></li>\n<li><a href=\"/Eslint\">ESLint</a></li>\n<li><a href=\"/Router\">Router</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cknro8hq2000jbqwxfa4yfti7","category_id":"cknro8hq3000mbqwxfedl59o6","_id":"cknro8hqb000ybqwx0zg2cf37"},{"post_id":"cknro8hq3000lbqwx4uqz6egs","category_id":"cknro8hq3000mbqwxfedl59o6","_id":"cknro8hqd0014bqwx3dg65twe"},{"post_id":"cknro8hq3000nbqwx1po85vrk","category_id":"cknro8hq3000mbqwxfedl59o6","_id":"cknro8hqe001abqwx9k4pgwtq"},{"post_id":"cknro8hqe001ebqwxaqgf9mqw","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqg001nbqwxacvvb1bj"},{"post_id":"cknro8hqc0010bqwx1ikrbxmu","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqh001rbqwx8bze3moj"},{"post_id":"cknro8hqf001gbqwx9jr02z9z","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqi001vbqwx5ia1a7xw"},{"post_id":"cknro8hqg001kbqwx4f0b10wk","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqk001zbqwx6bdk6vb8"},{"post_id":"cknro8hqc0012bqwx8l31h2h6","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hql0023bqwxc03l0wl3"},{"post_id":"cknro8hqg001mbqwx0lbzeh5b","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqm0027bqwx7hsj9xhr"},{"post_id":"cknro8hqh001qbqwx23a0ca6a","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqo002bbqwxb3pugvkx"},{"post_id":"cknro8hqd0017bqwx3sqq7ux0","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqo002fbqwxfabuafrc"},{"post_id":"cknro8hqh001ubqwxcb95beuj","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqq002jbqwx3jom7ra6"},{"post_id":"cknro8hqk001ybqwxd8n858ic","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqq002mbqwxeekbd7sy"},{"post_id":"cknro8hq6000qbqwx3drh23vp","category_id":"cknro8hqd0013bqwx7gbhh52i","_id":"cknro8hqr002qbqwxcfo95srp"},{"post_id":"cknro8hq6000qbqwx3drh23vp","category_id":"cknro8hqi001xbqwx8e3u1f85","_id":"cknro8hqt002ubqwx1lkd865k"},{"post_id":"cknro8hqe0019bqwx1ymx5inb","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hqt002ybqwxf0uy5vy4"},{"post_id":"cknro8hqp002ibqwxdrpghaje","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqv0032bqwx00b3avf3"},{"post_id":"cknro8hql0022bqwxam6y0eiv","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqw0036bqwxg762ezdy"},{"post_id":"cknro8hqq002lbqwx19921vkb","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqx003abqwxe2tdgwcy"},{"post_id":"cknro8hqr002pbqwxh6x6d2x3","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqx003dbqwx93sj170j"},{"post_id":"cknro8hqm0026bqwxdpq94d7i","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqy003hbqwxe3rcamuw"},{"post_id":"cknro8hqs002tbqwxbikg17qm","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqy003kbqwx4xwi2peq"},{"post_id":"cknro8hqt002xbqwxbd7ngym2","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hqz003nbqwx7qylfxlw"},{"post_id":"cknro8hqn002abqwx1gft996h","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr0003qbqwxdcag9mls"},{"post_id":"cknro8hqv0031bqwx2snq4aij","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr0003ubqwxb63t3uqg"},{"post_id":"cknro8hqw0035bqwx9iznc63q","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr1003wbqwx5pen4ign"},{"post_id":"cknro8hqo002ebqwx0kbodtkw","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr3003zbqwx3wnbckex"},{"post_id":"cknro8hqx0039bqwx0jk67q80","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr40042bqwxeoul626e"},{"post_id":"cknro8hqx003cbqwx8hp3du06","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr70046bqwx18twg2ue"},{"post_id":"cknro8hqy003gbqwx99mceam9","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr80048bqwx4vl66ygp"},{"post_id":"cknro8hqy003jbqwxa1021hrs","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr8004abqwx5oupcdo9"},{"post_id":"cknro8hqz003mbqwx9xcxgt77","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hr9004ebqwx69qxf9o4"},{"post_id":"cknro8hr0003pbqwxb600ch3d","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrb004hbqwxcwzbd3na"},{"post_id":"cknro8hr0003tbqwxb0od3yuk","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrc004kbqwxas7u8g1n"},{"post_id":"cknro8hr0003vbqwx5sq57hkd","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrd004mbqwxfrkibv1x"},{"post_id":"cknro8hr2003ybqwxb2qr4of3","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrd004pbqwxeibj0k2s"},{"post_id":"cknro8hr40041bqwxd9qudkss","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hre004rbqwxavda15i7"},{"post_id":"cknro8hr70045bqwx4lccguv4","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrf004ubqwx34gz290n"},{"post_id":"cknro8hr80047bqwxdttiej21","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrg004xbqwxc6vm8mya"},{"post_id":"cknro8hr80049bqwxg60u4x4s","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hri0050bqwx78907ky0"},{"post_id":"cknro8hr9004dbqwxfe190vbl","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrk0054bqwx0xnncrz1"},{"post_id":"cknro8hra004gbqwxh1m67vvy","category_id":"cknro8hqe001cbqwxdsp93ms9","_id":"cknro8hrl0057bqwx1i3l83av"},{"post_id":"cknro8hrc004jbqwx3ey5frwb","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hro005abqwx59gnavfr"},{"post_id":"cknro8hrc004lbqwxbk016wfk","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrp005cbqwxhjf02d90"},{"post_id":"cknro8hre004qbqwx14wxa5pj","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrq005fbqwx3wxpc8n7"},{"post_id":"cknro8hrf004tbqwx0dv53auk","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrr005ibqwxcblgbb18"},{"post_id":"cknro8hrg004wbqwxc4widwbb","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrs005mbqwxhm3f1red"},{"post_id":"cknro8hrh004zbqwx98yf8ohm","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrt005pbqwx9oct7bjz"},{"post_id":"cknro8hrk0053bqwxcs4ydkci","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrt005rbqwx13ng6bb2"},{"post_id":"cknro8hrk0056bqwxg1jg0uzw","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hru005vbqwxbn4k9vt7"},{"post_id":"cknro8hrn0059bqwxgnfchsvw","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hru005zbqwxft2f5a0n"},{"post_id":"cknro8hro005bbqwxbu8q2ipf","category_id":"cknro8hqo002dbqwx7punfsvv","_id":"cknro8hrz0063bqwxchiv236h"},{"post_id":"cknro8hrr005hbqwxckxcbk0t","category_id":"cknro8hrs005nbqwxefsa0z63","_id":"cknro8hs0006abqwx5261018q"},{"post_id":"cknro8hrr005hbqwxckxcbk0t","category_id":"cknro8hru005ybqwxbpng9lyz","_id":"cknro8hs1006dbqwxhpb5agmb"},{"post_id":"cknro8hrz0065bqwxf3ghhp80","category_id":"cknro8hs00068bqwx2zbz5e74","_id":"cknro8hs7006kbqwx8boo5jfq"},{"post_id":"cknro8hs00067bqwx2t4j1581","category_id":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsf0078bqwxgx6bat5w"},{"post_id":"cknro8hs00067bqwx2t4j1581","category_id":"cknro8hsb0072bqwx7uav1aqe","_id":"cknro8hsf0079bqwx1bc9fsl6"},{"post_id":"cknro8hs6006jbqwx4nli2sp3","category_id":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsf007bbqwxehws7885"},{"post_id":"cknro8hs6006jbqwx4nli2sp3","category_id":"cknro8hsb0072bqwx7uav1aqe","_id":"cknro8hsg007ebqwx33d00m1q"},{"post_id":"cknro8hs00069bqwxb1po2150","category_id":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsg007hbqwxae2p06rf"},{"post_id":"cknro8hs00069bqwxb1po2150","category_id":"cknro8hsb0072bqwx7uav1aqe","_id":"cknro8hsg007kbqwx992x2tvw"},{"post_id":"cknro8hs1006cbqwx7n609lx9","category_id":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsg007mbqwxexv9awbk"},{"post_id":"cknro8hs1006cbqwx7n609lx9","category_id":"cknro8hsb0072bqwx7uav1aqe","_id":"cknro8hsh007pbqwx7224gt0r"},{"post_id":"cknro8hs4006ebqwx4vxyc276","category_id":"cknro8hs5006fbqwx4g1jf6aa","_id":"cknro8hsh007rbqwx99pbg13f"},{"post_id":"cknro8hs4006ebqwx4vxyc276","category_id":"cknro8hsb0072bqwx7uav1aqe","_id":"cknro8hsh007tbqwxg7hn97ni"}],"PostTag":[{"post_id":"cknro8hpo0001bqwxcy7mfi4u","tag_id":"cknro8hpu0003bqwxcrh58fxp","_id":"cknro8hq1000fbqwxfqqncf7x"},{"post_id":"cknro8hpo0001bqwxcy7mfi4u","tag_id":"cknro8hpy0007bqwx5r1fauza","_id":"cknro8hq1000hbqwxc7752nql"},{"post_id":"cknro8hpo0001bqwxcy7mfi4u","tag_id":"cknro8hpz000abqwx4hs0asgw","_id":"cknro8hq2000kbqwxcospglyd"},{"post_id":"cknro8hpx0006bqwxgqzzck3s","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hq6000pbqwx2lka5zix"},{"post_id":"cknro8hpx0006bqwxgqzzck3s","tag_id":"cknro8hq1000ibqwx50mu42ld","_id":"cknro8hq9000rbqwxf9h5fbix"},{"post_id":"cknro8hpy0008bqwx4wrufp63","tag_id":"cknro8hpz000abqwx4hs0asgw","_id":"cknro8hqc0011bqwxhn28hu3d"},{"post_id":"cknro8hpy0008bqwx4wrufp63","tag_id":"cknro8hq9000ubqwx05vn1q9l","_id":"cknro8hqd0015bqwx8kgkc4bg"},{"post_id":"cknro8hqc0010bqwx1ikrbxmu","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqd0018bqwxe3az5pkh"},{"post_id":"cknro8hq2000jbqwxfa4yfti7","tag_id":"cknro8hqb000zbqwxbap6aqb6","_id":"cknro8hqe001bbqwx57rg5wux"},{"post_id":"cknro8hqc0012bqwx8l31h2h6","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqf001fbqwxfk9u1snc"},{"post_id":"cknro8hqd0017bqwx3sqq7ux0","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqf001hbqwxhtnd8kjb"},{"post_id":"cknro8hq3000lbqwx4uqz6egs","tag_id":"cknro8hqd0016bqwxemflf73r","_id":"cknro8hqg001lbqwx207a2qcq"},{"post_id":"cknro8hqe0019bqwx1ymx5inb","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqg001obqwx1aw6bwg4"},{"post_id":"cknro8hqe001ebqwxaqgf9mqw","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqh001tbqwxewqi588h"},{"post_id":"cknro8hq3000nbqwx1po85vrk","tag_id":"cknro8hqd0016bqwxemflf73r","_id":"cknro8hqi001wbqwx1il898do"},{"post_id":"cknro8hqf001gbqwx9jr02z9z","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqk0020bqwx1k1vhmcc"},{"post_id":"cknro8hqg001kbqwx4f0b10wk","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hql0024bqwxhg7te4io"},{"post_id":"cknro8hqg001mbqwx0lbzeh5b","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqm0028bqwx65cs2qn9"},{"post_id":"cknro8hqh001qbqwx23a0ca6a","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqo002cbqwx2qp1g18p"},{"post_id":"cknro8hqk001ybqwxd8n858ic","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqo002gbqwx2z37aa4x"},{"post_id":"cknro8hq6000qbqwx3drh23vp","tag_id":"cknro8hqg001jbqwxgq7a1y4c","_id":"cknro8hqq002kbqwx3doi5s5f"},{"post_id":"cknro8hq6000qbqwx3drh23vp","tag_id":"cknro8hqh001sbqwxb2n542of","_id":"cknro8hqr002obqwx2czv7fvf"},{"post_id":"cknro8hq6000qbqwx3drh23vp","tag_id":"cknro8hqk0021bqwx4mfxe069","_id":"cknro8hqr002sbqwxeytycgub"},{"post_id":"cknro8hq9000sbqwx5lcggy0v","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqt002wbqwx05i73jh0"},{"post_id":"cknro8hq9000sbqwx5lcggy0v","tag_id":"cknro8hq1000ibqwx50mu42ld","_id":"cknro8hqv0030bqwx3gj7a4cb"},{"post_id":"cknro8hq9000sbqwx5lcggy0v","tag_id":"cknro8hqn0029bqwxbz3e10b9","_id":"cknro8hqv0034bqwx4orsckoj"},{"post_id":"cknro8hqh001ubqwxcb95beuj","tag_id":"cknro8hq0000dbqwx3jh4f0qy","_id":"cknro8hqw0037bqwxeawn19oc"},{"post_id":"cknro8hqh001ubqwxcb95beuj","tag_id":"cknro8hqp002hbqwx8t4chf1x","_id":"cknro8hqx003bbqwx9lo192ok"},{"post_id":"cknro8hql0022bqwxam6y0eiv","tag_id":"cknro8hqp002hbqwx8t4chf1x","_id":"cknro8hqx003ebqwx7gd08o3y"},{"post_id":"cknro8hql0022bqwxam6y0eiv","tag_id":"cknro8hqu002zbqwx2sm30bjf","_id":"cknro8hqy003ibqwxgfp837ra"},{"post_id":"cknro8hqm0026bqwxdpq94d7i","tag_id":"cknro8hqp002hbqwx8t4chf1x","_id":"cknro8hqz003obqwx3bw6hcb3"},{"post_id":"cknro8hqm0026bqwxdpq94d7i","tag_id":"cknro8hqu002zbqwx2sm30bjf","_id":"cknro8hr0003rbqwx3xd8h50p"},{"post_id":"cknro8hqn002abqwx1gft996h","tag_id":"cknro8hqz003lbqwxej2p72l7","_id":"cknro8hr40040bqwxbu6vcam9"},{"post_id":"cknro8hqn002abqwx1gft996h","tag_id":"cknro8hr0003sbqwx6hu3bgnt","_id":"cknro8hr50043bqwxdv0bhwx8"},{"post_id":"cknro8hqo002ebqwx0kbodtkw","tag_id":"cknro8hqp002hbqwx8t4chf1x","_id":"cknro8hr9004cbqwxglit7g5r"},{"post_id":"cknro8hqo002ebqwx0kbodtkw","tag_id":"cknro8hr50044bqwx4b1m1q0t","_id":"cknro8hra004fbqwx55oe97fv"},{"post_id":"cknro8hqp002ibqwxdrpghaje","tag_id":"cknro8hr8004bbqwxb3t70o7v","_id":"cknro8hrg004vbqwx1rkoa80q"},{"post_id":"cknro8hqp002ibqwxdrpghaje","tag_id":"cknro8hrb004ibqwx11kghfjk","_id":"cknro8hrg004ybqwx8kih3h2w"},{"post_id":"cknro8hqp002ibqwxdrpghaje","tag_id":"cknro8hrd004nbqwxggaf614l","_id":"cknro8hrj0052bqwx5jh48sr8"},{"post_id":"cknro8hqq002lbqwx19921vkb","tag_id":"cknro8hre004sbqwxduh86gxe","_id":"cknro8hrk0055bqwx78nodbx0"},{"post_id":"cknro8hqr002pbqwxh6x6d2x3","tag_id":"cknro8hri0051bqwxejla164y","_id":"cknro8hrq005gbqwx00idg25p"},{"post_id":"cknro8hqr002pbqwxh6x6d2x3","tag_id":"cknro8hrl0058bqwxa4sy1p3y","_id":"cknro8hrr005jbqwxfylc1yk7"},{"post_id":"cknro8hqs002tbqwxbikg17qm","tag_id":"cknro8hqp002hbqwx8t4chf1x","_id":"cknro8hrt005tbqwx033jf1nw"},{"post_id":"cknro8hqs002tbqwxbikg17qm","tag_id":"cknro8hrp005dbqwx6yzm73aa","_id":"cknro8hru005wbqwx7qvfe5qx"},{"post_id":"cknro8hqs002tbqwxbikg17qm","tag_id":"cknro8hrr005kbqwxhwa8dwbh","_id":"cknro8hry0061bqwx1qml33r2"},{"post_id":"cknro8hqt002xbqwxbd7ngym2","tag_id":"cknro8hrt005sbqwxhqg8fp3p","_id":"cknro8hrz0064bqwx6vmre2ch"},{"post_id":"cknro8hqw0035bqwx9iznc63q","tag_id":"cknro8hrw0060bqwxdif4d8u0","_id":"cknro8hs6006ibqwx5hzgbwyw"},{"post_id":"cknro8hqw0035bqwx9iznc63q","tag_id":"cknro8hrz0066bqwx2j994h68","_id":"cknro8hs7006mbqwx4puq0pr6"},{"post_id":"cknro8hqw0035bqwx9iznc63q","tag_id":"cknro8hs0006bbqwxf3yraph5","_id":"cknro8hs7006pbqwxh79acqux"},{"post_id":"cknro8hqx0039bqwx0jk67q80","tag_id":"cknro8hpz000abqwx4hs0asgw","_id":"cknro8hs8006sbqwx9s7sea9r"},{"post_id":"cknro8hqx0039bqwx0jk67q80","tag_id":"cknro8hs6006hbqwx9tx985bk","_id":"cknro8hs8006vbqwxde48ggdt"},{"post_id":"cknro8hqy003gbqwx99mceam9","tag_id":"cknro8hs7006obqwx7w41063w","_id":"cknro8hsa006ybqwx17hhehv8"},{"post_id":"cknro8hr80047bqwxdttiej21","tag_id":"cknro8hs8006ubqwx0r5peo13","_id":"cknro8hsg007dbqwxczoc6yqo"},{"post_id":"cknro8hr80047bqwxdttiej21","tag_id":"cknro8hsa0070bqwx9w782orc","_id":"cknro8hsg007fbqwxbbp5h1d7"},{"post_id":"cknro8hr80047bqwxdttiej21","tag_id":"cknro8hsd0074bqwx23h91oml","_id":"cknro8hsg007jbqwxhybe1id3"},{"post_id":"cknro8hr80047bqwxdttiej21","tag_id":"cknro8hsf0076bqwx7441gtnq","_id":"cknro8hsg007lbqwxdudw843x"},{"post_id":"cknro8hr9004dbqwxfe190vbl","tag_id":"cknro8hsf007cbqwx8gowbfi5","_id":"cknro8hsh007obqwx0amzhmfr"},{"post_id":"cknro8hrc004jbqwx3ey5frwb","tag_id":"cknro8hsg007ibqwx2nx31102","_id":"cknro8hsh007qbqwxbrli2zr2"},{"post_id":"cknro8hrr005hbqwxckxcbk0t","tag_id":"cknro8hrz0066bqwx2j994h68","_id":"cknro8hsh007ubqwx3oq587ll"},{"post_id":"cknro8hs00067bqwx2t4j1581","tag_id":"cknro8hsh007sbqwx605s16nr","_id":"cknro8hsi007ybqwx52qrhyiq"},{"post_id":"cknro8hs00067bqwx2t4j1581","tag_id":"cknro8hsh007vbqwx25pv4wzi","_id":"cknro8hsi007zbqwx4xo43wko"},{"post_id":"cknro8hs00067bqwx2t4j1581","tag_id":"cknro8hsh007wbqwxa3hufcus","_id":"cknro8hsi0081bqwx58ni9qxt"},{"post_id":"cknro8hs00069bqwxb1po2150","tag_id":"cknro8hsh007sbqwx605s16nr","_id":"cknro8hsi0086bqwxbep65mxy"},{"post_id":"cknro8hs00069bqwxb1po2150","tag_id":"cknro8hsi0080bqwx0tkmcn5f","_id":"cknro8hsj0087bqwx0vcphxes"},{"post_id":"cknro8hs00069bqwxb1po2150","tag_id":"cknro8hsh007wbqwxa3hufcus","_id":"cknro8hsj0089bqwx9y9m0ipx"},{"post_id":"cknro8hs00069bqwxb1po2150","tag_id":"cknro8hsi0083bqwx2mzn7p93","_id":"cknro8hsj008abqwxfvxz576g"},{"post_id":"cknro8hs00069bqwxb1po2150","tag_id":"cknro8hsi0084bqwx6ijj0h33","_id":"cknro8hsj008cbqwx5ej0bdl9"},{"post_id":"cknro8hs1006cbqwx7n609lx9","tag_id":"cknro8hsh007sbqwx605s16nr","_id":"cknro8hsj008ebqwxgzmq24bo"},{"post_id":"cknro8hs1006cbqwx7n609lx9","tag_id":"cknro8hsj0088bqwx4ejd7sp6","_id":"cknro8hsj008fbqwx30ny8y5i"},{"post_id":"cknro8hs1006cbqwx7n609lx9","tag_id":"cknro8hsh007wbqwxa3hufcus","_id":"cknro8hsj008hbqwxgw89dgx1"},{"post_id":"cknro8hs4006ebqwx4vxyc276","tag_id":"cknro8hsh007sbqwx605s16nr","_id":"cknro8hsk008mbqwxhcf3ayd6"},{"post_id":"cknro8hs4006ebqwx4vxyc276","tag_id":"cknro8hsi0080bqwx0tkmcn5f","_id":"cknro8hsk008nbqwx38v03pwn"},{"post_id":"cknro8hs4006ebqwx4vxyc276","tag_id":"cknro8hsh007wbqwxa3hufcus","_id":"cknro8hsk008pbqwx3q3t92f4"},{"post_id":"cknro8hs4006ebqwx4vxyc276","tag_id":"cknro8hsk008jbqwx6d71hyln","_id":"cknro8hsk008qbqwx2ph1aicd"},{"post_id":"cknro8hs4006ebqwx4vxyc276","tag_id":"cknro8hsk008kbqwx22br20jm","_id":"cknro8hsk008sbqwx3pvabolm"},{"post_id":"cknro8hs6006gbqwx59ynckwu","tag_id":"cknro8hsk008lbqwxd31b3um3","_id":"cknro8hsk008ubqwx6f6q45dc"},{"post_id":"cknro8hs6006gbqwx59ynckwu","tag_id":"cknro8hsk008obqwx5pbuc74w","_id":"cknro8hsk008vbqwx1w3d9dah"},{"post_id":"cknro8hs6006gbqwx59ynckwu","tag_id":"cknro8hsk008rbqwxavs4dv0l","_id":"cknro8hsl008xbqwxg2kd093j"},{"post_id":"cknro8hs6006jbqwx4nli2sp3","tag_id":"cknro8hsh007sbqwx605s16nr","_id":"cknro8hsl008zbqwx4rzh6hmi"},{"post_id":"cknro8hs6006jbqwx4nli2sp3","tag_id":"cknro8hsl008wbqwx22v4dsph","_id":"cknro8hsl0090bqwx00shfevk"},{"post_id":"cknro8hs6006jbqwx4nli2sp3","tag_id":"cknro8hsh007wbqwxa3hufcus","_id":"cknro8hsl0091bqwx3pmpf3o5"}],"Tag":[{"name":"정리","_id":"cknro8hpu0003bqwxcrh58fxp"},{"name":"book","_id":"cknro8hpy0007bqwx5r1fauza"},{"name":"javascript","_id":"cknro8hpz000abqwx4hs0asgw"},{"name":"til","_id":"cknro8hq0000dbqwx3jh4f0qy"},{"name":"hexo","_id":"cknro8hq1000ibqwx50mu42ld"},{"name":"test","_id":"cknro8hq9000ubqwx05vn1q9l"},{"name":"RxJ","_id":"cknro8hqb000zbqwxbap6aqb6"},{"name":"RxJS","_id":"cknro8hqd0016bqwxemflf73r"},{"name":"Smart Work","_id":"cknro8hqg001jbqwxgq7a1y4c"},{"name":"스마트워크","_id":"cknro8hqh001sbqwxb2n542of"},{"name":"일하는 방식을 혁신한 기업들의 비밀","_id":"cknro8hqk0021bqwx4mfxe069"},{"name":"markdown","_id":"cknro8hqn0029bqwxbz3e10b9"},{"name":"git","_id":"cknro8hqp002hbqwx8t4chf1x"},{"name":"git-flow","_id":"cknro8hqu002zbqwx2sm30bjf"},{"name":"vue","_id":"cknro8hqz003lbqwxej2p72l7"},{"name":"vue style binding","_id":"cknro8hr0003sbqwx6hu3bgnt"},{"name":"git stash","_id":"cknro8hr50044bqwx4b1m1q0t"},{"name":"CR","_id":"cknro8hr8004bbqwxb3t70o7v"},{"name":"LF","_id":"cknro8hrb004ibqwx11kghfjk"},{"name":"CRLF","_id":"cknro8hrd004nbqwxggaf614l"},{"name":"브라우저","_id":"cknro8hre004sbqwxduh86gxe"},{"name":"HTTP","_id":"cknro8hri0051bqwxejla164y"},{"name":"HTTP/2","_id":"cknro8hrl0058bqwxa4sy1p3y"},{"name":"stash","_id":"cknro8hrp005dbqwx6yzm73aa"},{"name":"reset","_id":"cknro8hrr005kbqwxhwa8dwbh"},{"name":"GatsbyJS","_id":"cknro8hrt005sbqwxhqg8fp3p"},{"name":"TDD","_id":"cknro8hrw0060bqwxdif4d8u0"},{"name":"Typescript","_id":"cknro8hrz0066bqwx2j994h68"},{"name":"cache","_id":"cknro8hs0006bbqwxf3yraph5"},{"name":"정규표현식","_id":"cknro8hs6006hbqwx9tx985bk"},{"name":"회고","_id":"cknro8hs7006obqwx7w41063w"},{"name":"TIL","_id":"cknro8hs8006ubqwx0r5peo13"},{"name":"Javascript","_id":"cknro8hsa0070bqwx9w782orc"},{"name":"for-in","_id":"cknro8hsd0074bqwx23h91oml"},{"name":"for-of","_id":"cknro8hsf0076bqwx7441gtnq"},{"name":"VIM","_id":"cknro8hsf007cbqwx8gowbfi5"},{"name":"docker","_id":"cknro8hsg007ibqwx2nx31102"},{"name":"Jest","_id":"cknro8hsh007sbqwx605s16nr"},{"name":"Mock Function","_id":"cknro8hsh007vbqwx25pv4wzi"},{"name":"Jest 번역","_id":"cknro8hsh007wbqwxa3hufcus"},{"name":"Unit Test","_id":"cknro8hsi0080bqwx0tkmcn5f"},{"name":"설정 및 해제","_id":"cknro8hsi0083bqwx2mzn7p93"},{"name":"Setup and Teardown","_id":"cknro8hsi0084bqwx6ijj0h33"},{"name":"Getting Started","_id":"cknro8hsj0088bqwx4ejd7sp6"},{"name":"비동기 테스트","_id":"cknro8hsk008jbqwx6d71hyln"},{"name":"Test Asynchronous Code","_id":"cknro8hsk008kbqwx22br20jm"},{"name":"FE 2019","_id":"cknro8hsk008lbqwxd31b3um3"},{"name":"frontend","_id":"cknro8hsk008obqwx5pbuc74w"},{"name":"네이버 테크 콘서트","_id":"cknro8hsk008rbqwxavs4dv0l"},{"name":"Using Matchers","_id":"cknro8hsl008wbqwx22v4dsph"}]}}